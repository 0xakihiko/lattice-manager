{"version":3,"sources":["components/main.tsx","components/validateSig.tsx","util/localStorage.ts","util/storageSession.ts","sdk/sdkSession.ts","store/AppContext.tsx","hooks/useRecords.tsx","components/formatting/pageContent.tsx","components/NameEditor.tsx","components/connect.tsx","components/pair.tsx","components/permissions.tsx","components/settings.tsx","hooks/useAddresses.tsx","hooks/useRequestFailed.tsx","components/ErrorAlert.tsx","components/AddAddressesButton.tsx","components/AddressTable.tsx","util/addresses.ts","components/AddressTagsPage.tsx","components/landing.tsx","components/loading.tsx","components/error.tsx","components/btc-wallet/wallet.tsx","util/sendChecks.ts","components/btc-wallet/send.tsx","components/btc-wallet/receive.tsx","App.tsx","index.tsx","util/helpers.ts"],"names":["Content","Layout","Footer","Sider","Main","props","keyringName","URLSearchParams","window","location","search","get","state","name","constants","DEFAULT_APP_NAME","menuItem","session","collapsed","error","msg","cb","loading","pendingMsg","waiting","onCancel","deviceID","password","lastUpdated","Date","windowWidth","innerWidth","walletIsExternal","openedByKeyring","hwCheck","handleMenuChange","bind","handleLogout","handleKeyringOpener","syncActiveWalletState","cancelConnect","connectSession","handlePair","fetchBtcData","setError","refreshWallets","handlePageTurn","retry","updateWidth","addEventListener","this","isMobile","setState","params","forceLogin","onload","prevKeyringLogin","localStorage","getKeyringItem","keyringTimeoutBoundary","getTime","KEYRING_LOGOUT_MS","lastLogin","connect","removeKeyringItem","getLogin","context","removeEventListener","updates","settings","getSettings","setSession","SDKSession","client","pair","unwait","isConnected","setKeyringItem","data","endpoint","BASE_SIGNING_URL","customEndpoint","opener","postMessage","JSON","stringify","close","enc","Buffer","from","toString","href","page","setPage","stateUpdate","key","err","disconnect","removeLogin","LOST_PAIRING_MSG","LOST_PAIRING_ERR","handleLostPairing","showLoading","wait","isPaired","setLogin","returnKeyringData","isRecursion","fetchBtcAddresses","newAddrCounts","console","regular","change","clearUtxos","opts","fetchBtcStateData","BTC_PURPOSE_NONE","getBtcPurpose","bypassRefresh","activeWallet","getActiveWallet","isExternal","external","shouldRefresh","slice","hideWallet","collapsedWidth","theme","mode","onSelect","Item","title","SubMenu","renderMenu","onClick","type","size","icon","style","backgroundColor","marginRight","className","target","rel","alt","src","height","extra","walletTag","ghost","push","renderHeaderText","retryCb","content","refreshData","pageTurnCb","hasActiveWallet","spin","renderMenuItem","submit","hide","submitCb","setKeyringName","errMsg","textAlign","ENV","color","margin","renderContent","minHeight","renderHeader","id","renderSidebar","renderErrorHeader","renderPage","renderFooter","React","Component","contextType","AppContext","ReactCrypto","require","default","EC","ec","ValidateSig","signer","sig","curve","crypto","msgHash","createHash","update","digest","keyFromPublic","verify","decode","_certData","PREIMAGE_LEN","start","preimage","METADATA_LEN","pubkey","_sig","cert","getCert","_validate","LATTICE_CERT_SIGNER","validateCert","getPreimage","message","result","status","subTitle","validateSig","spanLength","spanOffset","span","offset","bordered","renderResult","ROOT_STORE","process","REACT_APP_ROOT_STORE","getItem","value","parse","e","setItem","removeItem","getRootStore","getRootStoreItem","setRootStoreItem","getKeyring","omit","getLoginId","setLoginId","removeLoginId","getLoginPassword","setLoginPassword","removeLoginPassword","getDeviceIndexedItem","deviceId","setDeviceIndexedItem","removeDeviceIndexedItem","setRootStore","removeRootStore","removeRootStoreItem","setSettings","setKeyring","renameKeyringItem","oldKey","newKey","item","getAddresses","setAddresses","removeAddresses","getContracts","setContracts","removeContracts","getContractPacks","setContractPacks","removeContractPacks","StorageSession","device_id","pass","store","o","Array","isArray","newData","oldData","isObject","Object","keys","forEach","updateBranch","wallet_uid","k","stateUpdateHandler","storageSession","baseUrl","addresses","btcTxs","btcUtxos","lastFetchedBtcData","btcPrice","getBtcWalletData","saveBtcWalletData","lastUsed","_getLastUsedBtcAddrIdx","BTC","length","newPage","driedAddrs","hasBTCAddrs","hasBTCChangeAddrs","BTC_CHANGE","BTC_PURPOSE","allAddrs","rehydratedAddrs","walletData","BTC_WALLET_STORAGE_KEY","dryAddresses","uid","save","getWalletData","purposeSpecificData","rehydrateAddresses","pw","_triedLocal","tmpTimeout","SHORT_TIMEOUT","_genPrivKey","Client","privKey","timeout","skipRetryOnWrongWallet","warn","_tryConnect","log","ASYNC_SDK_TIMEOUT","prevWallet","resetStateData","req","sign","res","broadcastBtcTx","tx","txid","concat","confirmed","txs","t","balance","u","isChange","totalFetched","lastUsedIdx","currentAddrs","GAP_LIMIT","BTC_CHANGE_GAP_LIMIT","BTC_MAIN_GAP_LIMIT","targetIdx","maxToFetch","nToFetch","Math","min","BTC_ADDR_BLOCK_LEN","changeIdx","startPath","BTC_COIN","harden","n","skipCache","_getAddresses","utxos","addrs","fetchBtcPrice","fetchBtcTxs","_txs","fetchBtcUtxos","_utxos","floor","now","newTxs","filterUniqueObjects","_processBtcTxs","newUtxos","sort","a","b","setTimeout","coin","i","maxUsed","inputs","input","indexOf","addr","outputs","output","processedTxs","incoming","every","recipient","inputSum","internalOutputSum","externalOutputSum","fee","sortedTxs","timestamp","createContext","undefined","AppContextProvider","children","overrides","useState","setIsMobile","isLoadingAddresses","setIsLoadingAddresses","defaultValue","records","setRecords","addRecords","recordsToAdd","recordsInState","unionBy","removeRecords","recordsToRemove","differenceBy","resetRecords","useRecords","addAddressesToState","removeAddressesFromState","resetAddressesInState","defaultContext","useEffect","windowIsMobileWidth","Provider","PageContent","justify","NameEditor","setName","isEditing","setIsEditing","isHovered","setIsHovered","Form","useForm","form","layout","onFinish","justifyContent","initialValue","rules","required","data-testid","resetFields","htmlType","EditOutlined","fontSize","onMouseEnter","onMouseLeave","Connect","isLoading","modal","showSettings","handleCancel","handleSubmit","renderMsg","showModal","focus","document","getElementById","getFieldDecorator","placeholder","ref","width","Password","onPressEnter","renderConnectButton","footer","visible","onOk","hideModal","inModal","renderSetupInfo","closable","spanWidth","tooLong","renderModal","LinkOutlined","DesktopOutlined","renderForm","Pair","code","toUpperCase","clientWidth","w","getBoxWidth","getBoxFontHeight","onChange","handleUpdate","BN","assets","ETH","decimals","Settings","keyring","getBtcPurposeName","reload","evt","devLattice","checked","updateCustomEndpoint","btcPurpose","parseInt","purpose","BTC_PURPOSE_NONE_STR","BTC_PURPOSE_LEGACY","BTC_PURPOSE_LEGACY_STR","BTC_PURPOSE_WRAPPED_SEGWIT","BTC_PURPOSE_WRAPPED_SEGWIT_STR","BTC_PURPOSE_SEGWIT","BTC_PURPOSE_SEGWIT_STR","Group","handleChangeBitcoinVersionSetting","direction","resetState","WarningOutlined","updateUseDevLattice","cols","dataIndex","render","text","record","removeKeyring","toLowerCase","Panel","header","dataSource","columns","renderKeyringsSetting","renderCustomEndpointSetting","renderBitcoinVersionSetting","renderDevLatticeSetting","renderCard","ADDRESSES_PER_PAGE","useAddresses","useContext","retryFunction","setRetryFunction","setRetryFunctionWithReset","useCallback","func","useRequestFailed","fetchAddresses","fetched","retries","getKvRecords","then","total","catch","addAddresses","addressesToAdd","addKvRecords","caseSensitive","finally","selectedAddresses","ids","map","r","isEmpty","removeKvRecords","ErrorAlert","description","action","AddAddressesButton","isModalVisible","setIsModalVisible","PlusOutlined","maskClosable","destroyOnClose","validateFields","_","chain","keyBy","mapValues","onFinishFailed","onFieldsChange","autoComplete","preserve","List","val","fields","add","remove","restField","display","flexDirection","marginBottom","flexGrow","validateTrigger","max","validator","rule","some","Promise","reject","Error","resolve","addonBefore","MinusSquareFilled","disabled","marginLeft","block","AddressTable","setInput","filteredAddresses","setFilteredAddresses","setSelectedAddresses","filter","fuzzysort","go","x","obj","_addresses","intersectionBy","allowClear","danger","tableLayout","spinning","tip","indicator","LoadingOutlined","pagination","position","pageSize","defaultCurrent","showSizeChanger","rowSelection","__","_selectedAddresses","onSelectAll","selectedRowKeys","Column","defaultSortOrder","sorter","localeCompare","hash","AddressTagsPage","SyncOutlined","Landing","getFwVersion","minor","TAGS_HELP_LINK","TagsOutlined","maxHeight","maxWidth","Loading","keyPressListener","btnMsg","Wallet","offsetWidth","maxChars","getInnerWidth","label","align","ts","day","hour","diff","week","month","getDateDiffStr","BTC_TX_BASE_URL","Meta","avatar","pow","subtitle","ensureTrimmedText","itemMeta","ArrowDownOutlined","ArrowUpOutlined","elapsed","timeType","elapsedSec","getBtcTxs","pending","ClockCircleOutlined","itemLayout","renderItem","renderListItem","btcBalance","getBtcBalance","SATS_TO_BTC","precision","getPage","CaretLeftOutlined","PAGE_SIZE","CaretRightOutlined","renderLastUpdatedTag","ReloadOutlined","renderList","renderPages","renderStartCard","validateBtcAddr","allChecks","full","fullCheck","checkEthRecipient","checkNumericValue","recipientCheck","isPrefixed","correctLength","num","Number","isNaN","Send","valueCheck","txHash","btcFeeRate","BTC_DEFAULT_FEE_RATE","ensResolvedAddress","handleENSResolution","renderBanner","renderSubmitButton","renderValueLabel","buildBtcRequest","updateBtcFeeRate","fetch","response","json","resp","ceil","address","check","numberVal","isZeroPrefixed","isLessThanOne","checkValue","buildBtcTxReq","calculateMaxValue","notification","open","duration","updateValue","renderIcon","renderValueLabelTitle","updateRecipient","isValid","CheckCircleOutlined","CloseCircleOutlined","onClose","desc","getUrl","getBtcUtxos","txBytes","getBtcNumTxBytes","feeSat","toFixed","isValidReq","renderBalance","renderRecipientLabel","renderExtra","image","Empty","PRESENTED_IMAGE_SIMPLE","QRCode","Search","Input","TextArea","Receive","updateDisplayAddress","displayAddr","getBtcDisplayAddress","select","execCommand","autoSize","minRows","maxRows","copyAddress","CopyOutlined","enterButton","onSearch","cardW","renderAddrBox","App","ReactDOM","bs58check","bech32","REACT_APP_ENV","REACT_APP_BASE_SIGNING_URL","BTC_PROD_DATA_API","BTC_BROADCAST_ENDPOINT","HARDENED_OFFSET","CONTRACTS_PER_PAGE","REACT_APP_BTC_COIN","BTC_CHANGE_ADDR_BLOCK_LEN","REACT_APP_BTC_DEFAULT_FEE_RATE","REACT_APP_BTC_TX_BASE_URL","CONTRACT_PAGE_SIZE","BTC_TESTNET","REACT_APP_BTC_TESTNET","KEYRING_DATA_PATH","ABI_PACK_URL","REACT_APP_LATTICE_CERT_SIGNER","CONTRACTS_HELP_LINK","PERMISSIONS_HELP_LINK","BTC_SEGWIT_NATIVE_V0_PREFIX","BTC_LEGACY_VERSION","BTC_WRAPPED_SEGWIT_VERSION","RATE_LIMIT","GET_ABI_URL","DEFAULT_CONTRACT_NETWORK","CONTRACT_NETWORKS","ethereum","url","apiRoute","arbitrum","polygon","optimism","binance","avalanche","devConstants","BTC_DEV_DATA_API","fetchJSON","_fetchBtcUtxos","ADDRS_PER_CALL","MAX_UTOXS_RET","addrsToCheck","unspent_outputs","confirmations","tx_hash_big_endian","vout","tx_output_n","_blockchainDotComScriptToAddr","script","_fetchBtcUtxosTestnet","pop","addrsCopy","_fetchBtcTxs","isFirstCall","isSingleAddr","MAX_TXS_RET","txsAdded","ftx","time","block_index","prev_out","out","_tx","_fetchBtcTxsTestnet","lastSeenId","formattedTxs","confirmedCount","block_time","vin","prevout","scriptpubkey_address","last_trade_price","rawTx","method","body","_calcBtcTxNumInputs","feeRate","inputIdx","currentValue","numInputs","numBytes","_scriptStr","bech32Prefix","pubkeyhash","words","toWords","unshift","encode","version","localSettings","inputSize","outputSize","inputWitnessSize","vFactor","btcValue","changeAddrs","isFullSpend","satValue","round","bytesUsed","BASE_SIGNER_PATH","prevOuts","utxo","signerPath","prevOut","index","changePath","currency","toHexStr","bn","s","base","objs","filtered","reverse","isDup","fobj","matchedKeys"],"mappings":"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","file":"static/js/main.c15d1e40.chunk.js","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport './styles.css'\nimport { Button, Layout, Menu, PageHeader, Tag, Tooltip } from 'antd';\nimport { \n  HomeOutlined, MenuOutlined, TagsOutlined, \n  WalletOutlined, ArrowUpOutlined, ArrowDownOutlined, \n  ReloadOutlined, CreditCardOutlined, CheckOutlined, SettingOutlined \n} from '@ant-design/icons';\nimport { default as SDKSession } from '../sdk/sdkSession';\nimport { \n  Connect, Error, Landing, Loading, PageContent, Pair, Send, \n  Receive, Wallet, Settings, ValidateSig, AddressTagsPage \n} from './index'\nimport { constants, getBtcPurpose } from '../util/helpers'\nimport localStorage from '../util/localStorage';\nimport { AppContext } from '../store/AppContext';\nconst { Content, Footer, Sider } = Layout;\nconst LOGIN_PARAM = 'loginCache';\nconst DEFAULT_MENU_ITEM = 'menu-landing';\n\ntype MainState = {\n  name: string,\n  menuItem: string,\n  session: any,\n  collapsed: boolean,\n  error: { msg: string, cb: Function },\n  loading: boolean,\n  pendingMsg: string,\n  waiting: boolean, \n  onCancel: Function,\n  deviceID: string,\n  password: string,\n  lastUpdated: Date,\n  windowWidth: number,\n  walletIsExternal: boolean,\n  keyringName: string,\n  openedByKeyring: boolean,\n  hwCheck: string,\n}\n\n\nclass Main extends React.Component<any, MainState> {\n  static contextType = AppContext\n\n  constructor(props) {\n    super(props)\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = params.get('keyring')\n    this.state = {\n      name: constants.DEFAULT_APP_NAME,\n      menuItem: DEFAULT_MENU_ITEM,\n      // GridPlusSDK session object\n      session: null,\n      collapsed: false,\n      error: { msg: null, cb: null },\n      loading: false,\n      pendingMsg: null,\n      // Waiting on asynchronous data, usually from the Lattice\n      waiting: false, \n      onCancel: null,\n      // Login info stored in localstorage. Can be cleared out at any time by the `logout` func\n      deviceID: null,\n      password: null,\n      // Last time the state was updated (comes from webwork setup by SdkSession)\n      lastUpdated: new Date(),\n      // Width of the current window\n      windowWidth: window.innerWidth,\n      // Track changes in the active wallet so we can refresh addresses when we detect one\n      walletIsExternal: null,\n      // Window params\n      keyringName,\n      // Was the app opened with a keyring in the url parameters\n      openedByKeyring: !!keyringName,\n      // Validation check on Lattice hardware. Should draw a separate component\n      hwCheck: null,\n    };\n\n    // Bind local state updaters\n    this.handleMenuChange = this.handleMenuChange.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleKeyringOpener = this.handleKeyringOpener.bind(this);\n    this.syncActiveWalletState = this.syncActiveWalletState.bind(this);\n\n    // Bind callbacks whose calls may originate elsewhere\n    this.cancelConnect = this.cancelConnect.bind(this);\n    this.connectSession = this.connectSession.bind(this);\n    this.handlePair = this.handlePair.bind(this);\n    this.fetchBtcData = this.fetchBtcData.bind(this);\n    this.setError = this.setError.bind(this);\n    this.refreshWallets = this.refreshWallets.bind(this);\n    this.handlePageTurn = this.handlePageTurn.bind(this);\n\n    // Bind wrappers\n    this.retry = this.retry.bind(this);\n\n    // Bind listener callbacks\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    // Listen for window resize\n    window.addEventListener('resize', this.updateWidth);\n\n    if (this.isMobile()) this.setState({collapsed: true})\n    // Metamask connects through a keyring and in these cases we need\n    // to utilize window.postMessage once we connect.\n    // We can extend this pattern to other apps in the future.\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = this.state.keyringName\n    const hwCheck = params.get('hwCheck')\n    const forceLogin = params.get('forceLogin')\n    \n    // Workaround to support Firefox extensions. See `returnKeyringData` below.\n    const hasLoggedIn = params.get(LOGIN_PARAM)\n    if (hasLoggedIn) {\n      this.setState({ waiting: true, pendingMsg: 'Connecting...' })\n      return;\n    }\n    \n    if (keyringName) {\n      //@ts-expect-error\n      window.onload = this.handleKeyringOpener();\n      this.setState({ keyringName }, () => {\n        // Check if this keyring has already logged in. This login should expire after a period of time.\n        const prevKeyringLogin = localStorage.getKeyringItem(keyringName);\n        const keyringTimeoutBoundary = new Date().getTime() - constants.KEYRING_LOGOUT_MS;\n        if (!forceLogin && prevKeyringLogin && prevKeyringLogin.lastLogin > keyringTimeoutBoundary) {\n          this.connect( prevKeyringLogin.deviceID, \n                        prevKeyringLogin.password, \n                        () => this.connectSession(prevKeyringLogin));\n        } else {\n          // If the login has expired, clear it now.\n          localStorage.removeKeyringItem(keyringName)\n        }\n      })\n    } else if (hwCheck) {\n      // Lattice validation check builds this URL and includes a signature + preimage\n      this.setState({ hwCheck })\n    } else {\n      // Lookup deviceID and pw from storage\n      const { deviceID, password } = localStorage.getLogin()\n      if (deviceID && password)\n        this.connect(deviceID, password, () => this.connectSession())\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.context.session)\n      this.syncActiveWalletState();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  window.innerWidth });\n    if (this.isMobile() && !this.state.collapsed) {\n      this.setState({ collapsed: true })\n    } else if (!this.isMobile() && this.state.collapsed) {\n      this.setState({ collapsed: false })\n    }\n  }\n\n  isMobile() {\n    return this.context.isMobile\n  }\n\n  connect(deviceID, password, cb) {\n    const updates = { deviceID, password };\n    const name = this.state.keyringName ? this.state.keyringName : this.state.name\n    if (!this.context.session) {\n      // Create a new session if we don't have one.\n      const settings = localStorage.getSettings()\n      this.context.setSession(\n        new SDKSession(deviceID, this.setError, name, settings)\n      );\n    }\n    this.setState(updates, cb);\n  }\n\n  cancelConnect() {\n    // Cancel the pairing process if it was started (i.e. if the connection was started with\n    // a device that could be discovered). Most of the time this will not be possible because\n    // the cancel button that triggers this function will not be displayed once the device\n    // responds back that it is ready to pair.\n    if (this.context.session && this.context.session.client) {\n      this.context.session.client.pair('', () => {});\n    }\n    // Reset all SDK-related state variables so the user can re-connect to something else.\n    this.setState({ deviceID: null, password: null, session: null })\n    this.unwait()\n  }\n\n  isConnected() {\n    if (!this.context.session) return false;\n    return this.context.session.isConnected();\n  }\n\n  //------------------------------------------\n  // KEYRING HANDLERS\n  //------------------------------------------\n\n  handleKeyringOpener() {\n    this.setState({ openedByKeyring: true })\n  }\n\n  returnKeyringData() {\n    if (!this.state.openedByKeyring)\n      return;\n    // Save the login for later\n    localStorage.setKeyringItem(this.state.keyringName, {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      lastLogin: new Date().getTime()\n    })\n    // Send the data back to the opener\n    const data = {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      endpoint: constants.BASE_SIGNING_URL,\n    };\n    // Check if there is a custom endpoint configured\n    const settings = localStorage.getSettings();\n    if (settings.customEndpoint && settings.customEndpoint !== '') {\n      data.endpoint = settings.customEndpoint;\n    }\n    this.handleLogout();\n    if (window.opener) {\n      // If there is a `window.opener` we can just post back\n      window.opener.postMessage(JSON.stringify(data), \"*\");\n      window.close();\n    } else {\n      // Otherwise we need a workaround to let the originator\n      // know we have logged in. We will put the login data\n      // into the URL and the requesting app will fetch that.\n      // Note that the requesting extension is now responsible for\n      // closing this web page.\n      const enc = Buffer.from(JSON.stringify(data)).toString('base64');\n      window.location.href = `${window.location.href}&${LOGIN_PARAM}=${enc}`;\n    }\n  }\n  //------------------------------------------\n  // END KEYRING HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // LOCAL STATE UPDATES\n  //------------------------------------------\n  wait(msg=null, onCancel=null) {\n    this.setState({ pendingMsg: msg, waiting: true, onCancel });\n  }\n\n  unwait() {\n    this.setState({ pendingMsg: null, waiting: false, onCancel: null });\n  }\n\n  //------------------------------------------\n  // END LOCAL STATE UPDATES\n  //------------------------------------------\n\n  //------------------------------------------\n  // HEADER HANDLERS\n  //------------------------------------------\n  handlePageTurn(page) {\n    this.context.session.setPage(page);\n  }\n\n  handleMenuChange ({ key }) {\n    const stateUpdate = { menuItem: key }\n    //@ts-expect-error\n    if (this.isMobile()) stateUpdate.collapsed = true\n    this.setState(stateUpdate)\n  }\n\n  handleLogout(err=null) {\n    this.unwait();\n    this.context.session.disconnect();\n    this.setState({ session: null });\n    localStorage.removeLogin()\n    if (err && err === constants.LOST_PAIRING_MSG)\n      //@ts-expect-error\n      this.setError({ err })\n  }\n\n  setError(data={msg:null, cb:null}) {\n    // Handle case where user deletes pairing on the Lattice\n    if (data.msg === constants.LOST_PAIRING_ERR)\n      return this.handleLostPairing();\n    this.setState({ error: data, loading: false })\n  }\n  \n  //------------------------------------------\n  // END HEADER HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK HOOKS\n  //------------------------------------------\n\n  // Call `connect` on the SDK session. If we get an error back, clear out the client,\n  // as we cannot connect.\n  connectSession(data=this.state, showLoading=true) {\n    const { deviceID, password } = data;\n      // Sanity check -- this should never get hit\n    if (!deviceID || !password) {\n      //@ts-expect-error\n      return this.setError({ \n        msg: 'You must provide a deviceID and password. Please refresh and log in again. '\n      });\n    } else {\n      this.setError();\n    }\n    // Connect to the device\n    this.connect(deviceID, password, () => {\n      // Create a new session with the deviceID and password provided.\n      if (showLoading === true) {\n        this.wait(\"Looking for your Lattice\", this.cancelConnect);\n      }\n      this.context.session.connect(deviceID, password, (err, isPaired) => {\n        this.unwait();\n        // If the request was before we got our callback, exit here\n        if (!this.context.session || this.state.deviceID !== deviceID)\n          return;\n        if (err) {\n          // If we failed to connect, clear out the SDK session. This component will\n          // prompt the user for new login data and will try to create one.\n          this.setError({ \n            msg: err, \n            cb: () => { this.connectSession(data); } \n          });\n        } else {\n          // We connected!\n          // 1. Save these credentials to localStorage if this is NOT a keyring\n          if (!this.state.openedByKeyring) {\n            localStorage.setLogin({ deviceID, password })\n          }\n          // 2. Clear errors and alerts\n          this.setError();\n          // 3. Proceed based on state\n          if (isPaired && this.state.openedByKeyring) {\n            return this.returnKeyringData();\n          }\n        }\n      });\n    })\n  }\n\n  // Fetch up-to-date blockchain state data for the addresses stored in our\n  // SDKSession. Called after we load addresses for the first time\n  // Passing `isRecursion=true` means we will attempt to fetch new\n  // addresses based on known state data and if we do not yield any new ones\n  // we should exit. This is done to avoid naively requesting state data\n  // for all known addresses each time we add a new one based on a gap limit.\n  // For example, an initial sync will get 20 addrs and fetch state data. It \n  // may then request one address at a time and then state data for that one\n  // address until the gap limit is reached.\n  fetchBtcData(isRecursion=false) {\n    this.unwait();\n    this.setError();\n    this.wait('Fetching addresses');\n    this.context.session.fetchBtcAddresses((err, newAddrCounts) => {\n      if (err) {\n        console.error('Error fetching BTC addresses', err)\n        this.unwait();\n        this.setError({ \n          msg: 'Failed to fetch BTC addresses. Please try again.', \n          cb: this.fetchBtcData\n        });\n        return;\n      }\n      this.unwait()\n      const shouldExit =  isRecursion && \n                          newAddrCounts.regular === 0 && \n                          newAddrCounts.change === 0;\n      if (shouldExit) {\n        // Done syncing\n        return;\n      }\n      // If this is the first time we are calling this function,\n      // start by clearing UTXOs to avoid stale balances\n      if (!isRecursion) {\n        this.context.session.clearUtxos();\n      }\n      // Sync data now\n      this.wait('Syncing chain data')\n      const opts = isRecursion ? newAddrCounts : null;\n      this.context.session.fetchBtcStateData(opts, (err) => {\n        if (err) {\n          console.error('Error fetching BTC state data', err)\n          this.unwait();\n          this.setError({ \n            msg: 'Failed to fetch BTC state data. Please try again.', \n            cb: this.fetchBtcData \n          });\n          return;\n        }\n        // Recurse such that we exit if there are no new addresses\n        this.fetchBtcData(true);\n      })\n    })\n  }\n\n  handleLostPairing() {\n    // If we lost our pairing, we will have discovered that after trying to `connect`.\n    // The Lattice will draw a pairing screen, so to tear it down we need to send an\n    // invalid pairing code.\n    // TODO: This will still draw a pairing failure screen on the Lattice. There is\n    //       currently no way around this, but it is something we should address\n    //       in the future.\n    this.context.session.client.pair('x', () => {\n      this.handleLogout(constants.LOST_PAIRING_MSG);\n    });\n  }\n\n  refreshWallets() {\n    if (this.state.waiting === true)\n      return;\n    this.wait(\"Refreshing wallets\")\n    this.setState({ waiting: true })\n    this.context.session.refreshWallets((err) => {\n      if (err === constants.LOST_PAIRING_ERR)\n        return this.handleLostPairing();\n      \n      this.syncActiveWalletState(true);\n      this.unwait();\n      if (err)\n        return this.setError({ msg: err, cb: this.refreshWallets })\n      this.setError();\n      if (constants.BTC_PURPOSE_NONE !== getBtcPurpose())\n        this.fetchBtcData()\n    })\n  }\n\n  // If we detect a new active wallet interface, save it and refresh wallet addresses\n  syncActiveWalletState(bypassRefresh=false) {\n    const activeWallet = this.context.session.getActiveWallet();\n    if (!activeWallet)\n      return;\n    const isExternal = activeWallet.external;\n    if (this.state.walletIsExternal !== isExternal) {\n      // We only want to refresh if we know another interface was active before. If this\n      // is the first check, just set the flag without calling refresh (it will get called)\n      // automatically.\n      const shouldRefresh = this.state.walletIsExternal !== null;\n      // Set state regardless\n      this.setState({ walletIsExternal: isExternal })\n      // Refresh if needed\n      if (shouldRefresh === true && bypassRefresh !== true)\n        this.refreshWallets();\n    }\n  }\n\n  //------------------------------------------\n  // END SDK HOOKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK CALLBACKS\n  //------------------------------------------\n\n  // Handle a `finalizePairing` response. There are three states:\n  // 1. Wrong secret: draw a new screen (try again) automatically\n  // 2. Timed out: display error screen and wait for user to try again\n  // 3. Success: load addresses\n  handlePair(data) {\n    // Hack to circumvent a weird screen artifact we are seeing in firmware\n    // NOTHING TO SEE HERE\n    if (data[0] === '_' || data[0] === '[') data = data.slice(1)\n\n    // If we didn't timeout, submit the secret and hope for success!\n    this.wait(\"Establishing connection with your Lattice\");\n    this.context.session.client.pair(data, (err) => {\n      this.unwait();\n      if (err) {\n        // If there was an error here, the user probably entered the wrong secret\n        const pairErr = 'Failed to pair. You either entered the wrong code or have already connected to this app.'\n        this.setError({ msg: pairErr, cb: this.connectSession });\n      } else if (this.state.openedByKeyring) {\n        this.returnKeyringData();\n      }\n    })\n  }\n\n  //------------------------------------------\n  // END SDK CALLBACKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // RENDERERS\n  //------------------------------------------\n  renderMenu() {\n    const hideWallet = constants.BTC_PURPOSE_NONE === getBtcPurpose();\n    return (\n      <Sider\n        collapsed={this.state.collapsed}\n        collapsedWidth={0}\n      >\n        <Menu theme=\"dark\" mode=\"inline\" onSelect={this.handleMenuChange}>\n          {/* Setting title={null} removes floating tooltip on mobile */}\n          <Menu.Item key=\"menu-landing\" title={null}>\n            <HomeOutlined/>\n            <span>Home</span>\n            </Menu.Item>\n          <Menu.Item key=\"menu-kv-records\" title={null}>\n            <TagsOutlined />\n            <span>Address Tags</span>\n          </Menu.Item>\n          <Menu.Item key=\"menu-settings\" title={null}>\n            <SettingOutlined />\n            <span>Settings</span>\n          </Menu.Item>\n          {!hideWallet ? (\n            <Menu.SubMenu title=\"BTC Wallet\" key=\"submenu-wallet\">\n              <Menu.Item key=\"menu-wallet\" title={null}>\n                <WalletOutlined />\n                <span>History</span>\n              </Menu.Item>\n              <Menu.Item key=\"menu-send\" title={null}>\n                <ArrowUpOutlined />\n                <span>Send</span>\n              </Menu.Item>\n              <Menu.Item key=\"menu-receive\" title={null}>\n                <ArrowDownOutlined />\n                <span>Receive</span>\n              </Menu.Item>\n            </Menu.SubMenu>\n          ) : null}\n        </Menu>\n      </Sider>\n    );\n  }\n\n  renderSidebar() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    if (this.isConnected())\n      return this.renderMenu();\n  }\n\n  renderHeaderText() {\n    return (\n      <>\n        {this.isMobile() ? (\n          <Button\n            onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n            type=\"text\"\n            size=\"large\"\n            icon={<MenuOutlined />}\n            style={{ backgroundColor: \"transparent\", marginRight: \"5px\" }}\n          />\n        ) : null}\n        <a\n          className=\"lattice-a\"\n          href=\"https://gridplus.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img  alt=\"GridPlus\" \n                src={'/gridplus-logo.png'}\n                style={{height: '1em'}}/>\n        </a>\n      </>\n    );\n  }\n\n  renderHeader() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    let extra: any[] = [];\n    if (!this.isConnected())\n      return;\n\n    // Display a tag if there is a SafeCard inserted\n    let walletTag = null;\n    const size = this.isMobile() ? 'small' : 'middle';\n    const activeWallet = this.context.session.getActiveWallet();\n\n    if (activeWallet === null) {\n      walletTag = ( \n        //@ts-expect-error\n        <Button type=\"danger\" ghost onClick={this.refreshWallets} size={size}>No Wallet <ReloadOutlined/></Button>\n      )\n    } else {\n      walletTag = activeWallet.external === true ?  (\n        <Button type=\"primary\" ghost onClick={this.refreshWallets} size={size}><CreditCardOutlined/> SafeCard <ReloadOutlined/></Button>\n      ) : (\n        <Button type=\"default\" ghost onClick={this.refreshWallets} size={size}><CheckOutlined/> Lattice <ReloadOutlined/></Button>\n      )\n    }\n    if (walletTag) extra.push((\n      <Tooltip title=\"Refresh\" key=\"WalletTagTooltip\">{walletTag}</Tooltip>));\n\n    extra.push(\n      ( <Button key=\"logout-button\" type=\"primary\" onClick={this.handleLogout} size={size}>\n        Logout\n      </Button>)\n    );\n    return (\n      <PageHeader\n        title={this.renderHeaderText()}\n        ghost={true}\n        extra={!this.state.waiting ? extra : null}\n      />\n    )\n  }\n\n  renderErrorHeader() {\n    if (this.state.error.msg) {\n      const err = (\n        <Error  msg={this.state.error.msg} \n                retryCb={this.state.error.cb}\n        />\n      )\n      return (\n        <PageContent content={err} />\n      )\n    } else {\n      return;\n    }\n  }\n\n  retry(cb) {\n    this.setError();\n    return cb();\n  }\n\n  renderMenuItem() {\n    switch (this.state.menuItem) {\n      case \"menu-wallet\":\n        return (\n          <Wallet\n            session={this.context.session}\n            refreshData={this.fetchBtcData}\n            lastUpdated={this.state.lastUpdated}\n            pageTurnCb={this.handlePageTurn}\n          />\n        );\n      case \"menu-receive\":\n        return <Receive session={this.context.session} />;\n      case \"menu-send\":\n        return <Send session={this.context.session} />;\n      // case 'menu-permissions':\n      //   return (\n      //     <Permissions\n      //       session={this.state.session}\n      //       isMobile={() => this.isMobile()}\n      //     />\n      //   )\n      case \"menu-settings\":\n        return <Settings />;\n      case \"menu-kv-records\":\n        return <AddressTagsPage />;\n      case DEFAULT_MENU_ITEM:\n        return <Landing />;\n      default:\n        return;\n    }\n  }\n\n  renderContent() {\n    const hasActiveWallet = this.context.session ? this.context.session.getActiveWallet() !== null : false;\n    if (this.state.waiting) {\n      return (\n        <Loading  msg={this.state.pendingMsg}\n                  onCancel={this.state.onCancel}/> \n      );\n    } else if (!this.isConnected()) {\n      // Connect to the Lattice via the SDK\n      return (\n        <Connect  submitCb={this.connectSession}\n                  cancelConnect={this.cancelConnect}\n                  name={this.state.name}\n                  keyringName={this.state.keyringName}\n                  setKeyringName={(keyringName) => this.setState({ keyringName })}\n                  errMsg={this.state.error.msg}/>\n      );\n    } else if (!this.context.session.isPaired()) {\n      // Automatically try to pair if we have a session but no pairing  \n      return (\n        <Pair submit={this.handlePair}\n              hide={!!this.state.error.msg} />\n      );\n    } else if (this.state.openedByKeyring) {\n      // The window should close automatically, but just in case something goes wrong...\n      return (\n        <Loading  msg={\"Successfully connected to your Lattice! You may close this window.\"}\n                  spin={false}/>\n      )\n    } else if (!hasActiveWallet) {\n      const retry = this.context.session ? this.refreshWallets : null;\n      return (\n        <Error msg={\"No active wallet present for device!\"}\n               retryCb={retry} \n        />\n      )\n    } else {\n      return this.renderMenuItem();\n    }\n  }\n\n  renderFooter() {\n    return (\n      <Footer style={{ textAlign: 'center' }}>\n        ©2021 GridPlus Inc\n        {constants.ENV === 'dev' ? <Tag color=\"blue\" style={{margin: \"0 0 0 10px\"}}>DEV</Tag> : null}\n      </Footer>\n    )\n  }\n\n  renderPage() {\n    if (this.state.hwCheck !== null) {\n      return <ValidateSig data={this.state.hwCheck} />\n    } else {\n      return this.renderContent();\n    }\n  }\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        {this.renderHeader()}\n        <Layout id=\"main-content-outer\">\n          {this.renderSidebar()}\n          <Layout id=\"main-content-inner\">\n            <Content style={{ margin: '0 0 0 0' }}>\n              {this.renderErrorHeader()}\n              <div style={{ margin: '30px 0 0 0'}}>\n                {this.renderPage()}        \n              </div>\n            </Content>\n            {this.renderFooter()}\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default Main","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Col, Result, Row } from 'antd'\nimport { decode } from 'bs58'\nimport { constants } from '../util/helpers';\nimport { AppContext } from '../store/AppContext';\nconst ReactCrypto = require('gridplus-react-crypto').default;\nconst EC = require('elliptic').ec;\n\nconst PREIMAGE_LEN = 32;\nconst SIG_TEMPLATE_LEN =  74; // Struct containing DER sig\nconst CERT_TEMPLATE_LEN = 147;  // Struct containing pubkey, permissions, and signature on it\n\nclass ValidateSig extends React.Component<any, any> {\n  static contextType = AppContext;\n  \n  // Validate a signature for a message from a known signer on a known curve\n  // * msg - Expected ASCII string\n  // * signer - Expected buffer containing 65-byte public key\n  // * sig - Expected DER signature (string is best)\n  // * curve - Consumable curve for elliptic\n  _validate(msg, signer, sig, curve='secp256k1') {\n    const crypto = new ReactCrypto();\n    const ec = new EC(curve);\n    const msgHash = crypto.createHash('sha256').update(msg).digest();\n    const key = ec.keyFromPublic(signer, 'hex')\n    return key.verify(msgHash, sig);\n  }\n\n  getPreimage() {\n    return decode(this.props.data).slice(0, PREIMAGE_LEN).toString()\n  }\n\n  getCert() {\n    const start = PREIMAGE_LEN + SIG_TEMPLATE_LEN;\n    const _certData = decode(this.props.data).slice(start, start + CERT_TEMPLATE_LEN);\n    const METADATA_LEN = 8;\n    const PUBKEY_LEN = 65;\n    const preimage = _certData.slice(2, METADATA_LEN + PUBKEY_LEN);\n    // When we issue the cert, we are signing metadata + the public key. However, this\n    // cert gets packed into a template along with this metadata and the length of the data in\n    // that template is variable, depending on the size of the DER sig (which we call a \"cert\").\n    // We sign metadata with 0 length at the outset because we won't know the eventual length.\n    // Therefore this byte needs to be reuturned to its initial 0 value in order to validate the \"cert\".\n    // preimage[1] = 0;\n    const pubkey = Buffer.from(_certData.slice((METADATA_LEN), (METADATA_LEN + PUBKEY_LEN))).toString('hex');\n    const _sig = Buffer.from(_certData.slice((METADATA_LEN + PUBKEY_LEN), (METADATA_LEN + PUBKEY_LEN + SIG_TEMPLATE_LEN)));\n    const sig = _sig.slice(0, (2 + _sig[1]));\n    return { pubkey, preimage, sig }\n  }\n\n  validateCert() {\n    const cert = this.getCert();\n    return this._validate(cert.preimage, constants.LATTICE_CERT_SIGNER, cert.sig)\n  }\n\n  validateSig() {\n    try {\n      if (!this.validateCert())\n        return false;\n      const preimage = this.getPreimage();\n      const cert = this.getCert();\n      const _sig = Buffer.from(decode(this.props.data).slice(PREIMAGE_LEN, PREIMAGE_LEN + SIG_TEMPLATE_LEN));\n      const sig = _sig.slice(0, (2 + _sig[1]))\n      return this._validate(preimage, cert.pubkey, sig);\n    } catch (err) {\n      console.error(`Encountered error validating signature: ${err.message}`)\n      return false;\n    }\n  }\n\n  renderResult() {\n    let result = {\n      status: \"warning\",\n      title: \"Could not Verify Authenticity\",\n      subTitle: \"We could not verify the authenticity of this signature or signer.\"\n    };\n    if (true === this.validateSig()) {\n      result.status = \"success\";\n      result.title = \"Verified\";\n      result.subTitle = \"The signer is authentic!\"\n    }\n    return (\n      <Result\n        //@ts-expect-error\n        status={result.status}\n        title={result.title}\n        subTitle={result.subTitle}\n      />\n    )\n  }\n\n\n  render() {\n    const spanLength = this.context.isMobile ? 18 : 10;\n    const spanOffset = this.context.isMobile ? 3 : 7; \n    return (\n      <Row>\n        <Col span={spanLength} offset={spanOffset}>\n          <center>\n            <Card title=\"Validate Hardware\" bordered={true}>\n              {this.renderResult()}\n              <p><b>Message:</b> {this.getPreimage()}</p>\n            </Card>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n\n\n}\n\nexport default ValidateSig","import omit from \"lodash/omit\";\n\nconst LOGIN_ID_STORAGE_KEY = \"gridplus_web_wallet_id\";\nconst LOGIN_PASSWORD_STORAGE_KEY = \"gridplus_web_wallet_password\";\nconst ADDRESSES_STORAGE_KEY = \"gridplus_addresses\";\nconst CONTRACTS_STORAGE_KEY = \"gridplus_contracts\";\nconst CONTRACT_PACKS_STORAGE_KEY = \"gridplus_contracts_packs\";\nconst ROOT_STORE = process.env.REACT_APP_ROOT_STORE || \"gridplus\";\n\n// #region -- Generic Local Storage Functions\n\nconst getItem = (key) => {\n  const value = window.localStorage.getItem(key);\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return JSON.parse(JSON.stringify(value));\n  }\n};\nconst setItem = (key, value) =>\n  window.localStorage.setItem(key, JSON.stringify(value));\nconst removeItem = (key) => window.localStorage.removeItem(key);\n\nconst getRootStore = () => getItem(ROOT_STORE) ?? {};\nconst setRootStore = (value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), ...value })\n  );\nconst removeRootStore = () => removeItem(ROOT_STORE);\n\nconst getRootStoreItem = (key) => getItem(ROOT_STORE)?.[key] ?? {};\nconst setRootStoreItem = (key, value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), [`${key}`]: value })\n  );\nconst removeRootStoreItem = (key) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify(omit(getRootStore(), key))\n  );\n\n// #endregion\n\n// #region -- Settings Functions\n\nconst getSettings = () => getRootStoreItem(\"settings\");\nconst setSettings = (value) => setRootStoreItem(\"settings\", value);\n\n// #endregion\n\n// #region -- Keyring Functions\n\nconst getKeyring = () => getRootStoreItem(\"keyring\");\nconst setKeyring = (value) => setRootStoreItem(\"keyring\", value);\n\nconst getKeyringItem = (key) => getRootStoreItem(\"keyring\")?.[key] ?? {};\nconst setKeyringItem = (key, value) =>\n  setRootStoreItem(\"keyring\", { [`${key}`]: value });\nconst removeKeyringItem = (key) =>\n  setRootStoreItem(\"keyring\", omit(getKeyring(), key));\nconst renameKeyringItem = (oldKey, newKey) => {\n  if (oldKey !== newKey) {\n    const item = { ...getKeyringItem(oldKey) };\n    setKeyringItem(newKey, item);\n    removeKeyringItem(oldKey);\n  }\n};\n\n// #endregion\n\n// #region -- Login Functions\n\nconst getLoginId = () => getItem(LOGIN_ID_STORAGE_KEY);\nconst setLoginId = (value) => setItem(LOGIN_ID_STORAGE_KEY, value);\nconst removeLoginId = () => removeItem(LOGIN_ID_STORAGE_KEY);\n\nconst getLoginPassword = () => getItem(LOGIN_PASSWORD_STORAGE_KEY);\nconst setLoginPassword = (value) => setItem(LOGIN_PASSWORD_STORAGE_KEY, value);\nconst removeLoginPassword = () => removeItem(LOGIN_PASSWORD_STORAGE_KEY);\n\nconst getLogin = () => ({\n  deviceID: getLoginId(),\n  password: getLoginPassword(),\n});\nconst setLogin = ({ deviceID, password }) => {\n  setLoginId(deviceID);\n  setLoginPassword(password);\n};\nconst removeLogin = () => {\n  removeLoginId();\n  removeLoginPassword();\n};\n\n// #endregion\n\n// #region -- Device Indexed Functions\n\nconst getDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return getRootStoreItem(deviceId)?.[key];\n  }\n};\n\nconst setDeviceIndexedItem = (key, value) => {\n  const deviceId = getLoginId();\n  if (deviceId && value) {\n    return setRootStoreItem(deviceId, {\n      ...getRootStoreItem(deviceId),\n      [`${key}`]: value,\n    });\n  }\n};\n\nconst removeDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return setRootStoreItem(deviceId, omit(getRootStoreItem(deviceId), key));\n  }\n};\n\n// #endregion\n\n// #region -- Address & Contracts Functions\n\nconst getAddresses = () => getDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\nconst setAddresses = (value) =>\n  setDeviceIndexedItem(ADDRESSES_STORAGE_KEY, value);\nconst removeAddresses = () => removeDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\n\nconst getContracts = () => getDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\nconst setContracts = (value) =>\n  setDeviceIndexedItem(CONTRACTS_STORAGE_KEY, value);\nconst removeContracts = () => removeDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\n\nconst getContractPacks = () => getItem(CONTRACT_PACKS_STORAGE_KEY) ?? [];\nconst setContractPacks = (value) => setItem(CONTRACT_PACKS_STORAGE_KEY, value);\nconst removeContractPacks = () => removeItem(CONTRACT_PACKS_STORAGE_KEY);\n\n// #endregion\n\nexport default {\n  getItem,\n  setItem,\n  removeItem,\n  getRootStore,\n  setRootStore,\n  removeRootStore,\n  getRootStoreItem,\n  setRootStoreItem,\n  removeRootStoreItem,\n  getSettings,\n  setSettings,\n  getLoginId,\n  setLoginId,\n  removeLoginId,\n  getLoginPassword,\n  setLoginPassword,\n  removeLoginPassword,\n  getKeyring,\n  setKeyring,\n  getKeyringItem,\n  setKeyringItem,\n  removeKeyringItem,\n  renameKeyringItem,\n  getLogin,\n  setLogin,\n  removeLogin,\n  getDeviceIndexedItem,\n  setDeviceIndexedItem,\n  removeDeviceIndexedItem,\n  getAddresses,\n  setAddresses,\n  removeAddresses,\n  getContracts,\n  setContracts,\n  removeContracts,\n  getContractPacks,\n  setContractPacks,\n  removeContractPacks,\n};\n","import localStorage from './localStorage';\n\nclass StorageSession {\n  data: any;\n  store: any;\n  \n  constructor(device_id, pass) {\n    this.data = null;\n    this.store = localStorage.getRootStore();\n  }\n\n  isObject(o) {\n    try {\n      return o && typeof o === 'object' && !Array.isArray(o);\n    } catch(e) {\n      return false;\n    }\n  }\n\n  updateBranch(newData, oldData, key) {\n    // If we have reached the end of oldData\n    if (!this.isObject(oldData))\n      return;\n\n    // If `newData[key]` is a nested object, start that object\n    // clone in `oldData`\n    if (this.isObject(newData[key]) && !oldData[key])\n      oldData[key] = {};\n\n    // Loop through all keys in new data at this level. We will\n    // be adding each one as a branch\n    if (this.isObject(newData[key])) {\n      Object.keys(newData[key]).forEach((newKey) => {\n        // If there are more keys nested in this branch, update them first\n        if (this.isObject(newData[key][newKey]))\n          this.updateBranch(newData[key], oldData[key], newKey)\n        // No more keys in this branch? Finally copy this data to `oldData`\n        else\n          oldData[key][newKey] = newData[key][newKey];\n      });\n    } else {\n      // If this is a non-ojbect, copy it directly\n      oldData[key] = newData[key];\n    }\n  }\n\n  save(deviceID, wallet_uid, data) {\n    // Get the data for this deviceID\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    // Update relevant keys without overwriting anything else\n    Object.keys(data).forEach((k) => {\n      this.updateBranch(data, this.store[deviceID][wallet_uid], k);\n    })\n    // Update the store itself\n    localStorage.setRootStore(this.store);\n  }\n\n  getWalletData(deviceID, wallet_uid) {\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    return this.store[deviceID][wallet_uid];\n  }\n}\n\n\nexport default StorageSession;","import { Client } from 'gridplus-sdk';\nimport { SDKAddresses } from '../types/SDKAddresses';\nimport {\n  broadcastBtcTx, constants, fetchBtcPrice,\n  fetchBtcTxs, fetchBtcUtxos, filterUniqueObjects, getBtcPurpose, harden\n} from '../util/helpers';\nimport { default as StorageSession } from '../util/storageSession';\nconst Buffer = require('buffer/').Buffer;\nconst ReactCrypto = require('gridplus-react-crypto').default;\n\nclass SDKSession {\n  client: Client;\n  crypto: any;\n  name: any;\n  storageSession: any;\n  deviceID: any;\n  stateUpdateHandler: any;\n  page: number;\n  baseUrl: any;\n  addresses: SDKAddresses;\n  btcTxs: any[];\n  btcUtxos: any[];\n  lastFetchedBtcData: number;\n  btcPrice: number;\n\n  constructor(deviceID, stateUpdateHandler, name=null, opts: any = {}) {\n    this.client = null;\n    this.crypto = null;\n    this.name = name || constants.DEFAULT_APP_NAME; // app name\n    // Make use of localstorage to persist wallet data\n    this.storageSession = null;\n    // Save the device ID for the session\n    this.deviceID = deviceID;\n    // Handler to call when we get state updates\n    this.stateUpdateHandler = stateUpdateHandler;\n\n    // Current page of results (transactions) for the wallet\n    this.page = 1; // (1-indexed)\n\n    // Configurable settings\n    this.baseUrl = opts.customEndpoint ? opts.customEndpoint : constants.BASE_SIGNING_URL;\n\n    // BTC wallet data\n    this.addresses = {};          // Contains BTC and BTC_CHANGE addresses\n    this.btcTxs = [];             // Contains all txs for all addresses\n    this.btcUtxos = [];           // Contains all utxos for all addresses\n    this.lastFetchedBtcData = 0;  // Timestamp containing the last time we updated data\n    this.btcPrice = 0;            // Price in dollars of full unit BTC\n    \n    // Go time\n    this.getBtcWalletData();\n  }\n\n  disconnect() {\n    this.client = null;\n    this.saveBtcWalletData();\n    this.storageSession = null;\n    this.deviceID = null;\n  }\n\n  isConnected() {\n    return this.client !== null;\n  }\n\n  isPaired() {\n    return this.client.isPaired || false;\n  }\n\n  resetStateData() {\n    this.addresses = {};\n    this.btcTxs = [];\n    this.btcUtxos = [];\n  }\n  \n  getBtcDisplayAddress() {\n    // If we have set the next address to use, display that.\n    // Otherwise, fallback on the first address.\n    const lastUsed = this._getLastUsedBtcAddrIdx()\n    if (lastUsed > -1 && this.addresses.BTC[lastUsed + 1])\n      return this.addresses.BTC[lastUsed + 1];\n    else if (this.addresses.BTC && this.addresses.BTC.length > 0)\n      return this.addresses.BTC[0];\n    else\n      return null;\n  }\n\n  getActiveWallet() {\n    if (!this.client) return null;\n    return this.client.getActiveWallet();\n  }\n\n  setPage(newPage=1) {\n    this.page = newPage;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  // Prepare addresses for caching in localStorage\n  dryAddresses() {\n    const driedAddrs: SDKAddresses = {};\n    const hasBTCAddrs = this.addresses.BTC && this.addresses.BTC.length > 0;\n    const hasBTCChangeAddrs = this.addresses.BTC_CHANGE && this.addresses.BTC_CHANGE.length > 0;\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return driedAddrs;\n    }\n    if (hasBTCAddrs) {\n      driedAddrs.BTC = {};\n      driedAddrs.BTC[BTC_PURPOSE] = this.addresses.BTC || [];\n    }\n    if (hasBTCChangeAddrs) {\n      driedAddrs.BTC_CHANGE = {};\n      driedAddrs.BTC_CHANGE[BTC_PURPOSE] = this.addresses.BTC_CHANGE || [];\n    }\n    return driedAddrs;\n  }\n\n  // Pull addresses out of cached localStorage data\n  rehydrateAddresses(allAddrs: SDKAddresses = {}) {\n    const rehydratedAddrs: SDKAddresses = {};\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return rehydratedAddrs;\n    }\n    if (allAddrs.BTC) {\n      rehydratedAddrs.BTC = allAddrs.BTC[BTC_PURPOSE];\n    }\n    if (allAddrs.BTC_CHANGE) {\n      rehydratedAddrs.BTC_CHANGE = allAddrs.BTC_CHANGE[BTC_PURPOSE];\n    }\n    this.addresses = rehydratedAddrs;\n  }\n\n  saveBtcWalletData() {\n    // This function should never be called without a deviceID \n    // or StorageSession\n    if (!this.deviceID || !this.storageSession) return;\n\n    // Package data and save it\n    // NOTE: We are only storing addresses at this point, as\n    // the blockchain state needs to be up-to-date and is therefore\n    // not very useful to store.\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      console.error('Cannot save BTC wallet data when wallet is hidden');\n      return;\n    }\n    const walletData = {\n      [constants.BTC_WALLET_STORAGE_KEY]: {\n        [BTC_PURPOSE]: {\n          addresses: this.dryAddresses(),\n          btcTxs: this.btcTxs,\n          btcUtxos: this.btcUtxos,\n          lastFetchedBtcData: this.lastFetchedBtcData,\n        },\n        btcPrice: this.btcPrice,\n      }\n    };\n    const activeWallet = this.client ? this.client.getActiveWallet() : null;\n    if (this.client && activeWallet !== null) {\n      const wallet_uid = activeWallet.uid.toString('hex');\n      this.storageSession.save(this.deviceID, wallet_uid, walletData);\n    }\n  }\n\n  getBtcWalletData() {\n    // Create a storage session only if we have a deviceID and don't\n    // have a current storage session\n    if (this.deviceID && !this.storageSession)\n      //@ts-expect-error\n      this.storageSession = new StorageSession(this.deviceID);\n    if (this.client) {\n      // Make sure the btc wallet is enabled\n      const BTC_PURPOSE = getBtcPurpose();\n      if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n        console.error('Cannot get wallet data when wallet is hidden.');\n        return;\n      }\n      // If we have a client and if it has a non-zero active wallet UID,\n      // lookup the addresses corresponding to that wallet UID in storage.\n      const activeWallet = this.getActiveWallet();\n      if (activeWallet === null) {\n        // No active wallet -- reset addresses\n        this.addresses = {};\n      } else {\n        const uid = activeWallet.uid.toString('hex')\n        // Rehydrate the data\n        const data = this.storageSession.getWalletData(this.deviceID, uid);\n        if (!data || !data[constants.BTC_WALLET_STORAGE_KEY])\n          return;\n        const walletData = data[constants.BTC_WALLET_STORAGE_KEY];\n        // Price is saved outside of the purpose sub-object\n        if (walletData.btcPrice) {\n          this.btcPrice = walletData.btcPrice;\n        }\n        // Unpack wallet data associated with the current btc purpose\n        const purposeSpecificData = walletData[BTC_PURPOSE];\n        if (!purposeSpecificData)\n          return;\n        if (purposeSpecificData.addresses) {\n          this.rehydrateAddresses(purposeSpecificData.addresses);\n        }\n        if (purposeSpecificData.btcTxs) {\n          this.btcTxs = purposeSpecificData.btcTxs;\n        }\n        if (purposeSpecificData.btcUtxos) {\n          this.btcUtxos = purposeSpecificData.btcUtxos;\n        }\n        if (purposeSpecificData.lastFetchedBtcData) {\n          this.lastFetchedBtcData = purposeSpecificData.lastFetchedBtcData;\n        }\n      }\n    }\n  }\n\n  _tryConnect(deviceID, pw, cb, _triedLocal=false) {\n    let baseUrl = this.baseUrl;\n    let tmpTimeout = constants.SHORT_TIMEOUT; // Artificially short timeout just for connecting\n    if (_triedLocal === false) {\n      baseUrl = `http://lattice-${deviceID}.local:8080`\n      tmpTimeout = 5000 // Shorten the timeout even more since we should discover quickly if device is on LAN\n    }\n    // Derive a keypair from the deviceID and password\n    // This key doesn't hold any coins and only allows this app to make\n    // requests to a particular device. Nevertheless, the user should\n    // enter a reasonably strong password to prevent unwanted requests\n    // from nefarious actors.\n    const key = this._genPrivKey(deviceID, pw, this.name);\n    // If no client exists in this session, create a new one and\n    // attach it.\n    let client;\n    try {\n      client = new Client({ \n        name: this.name,\n        privKey: key,\n        baseUrl,\n        timeout: tmpTimeout, // Artificially short timeout for simply locating the Lattice\n        skipRetryOnWrongWallet: false,\n      })\n    } catch (err) {\n      return cb(err.toString());\n    }\n    client.connect(deviceID, (err) => {\n      if (err) {\n        if (_triedLocal === false) {\n          console.warn('Failed to connect to Lattice over LAN. Falling back to cloud routing.')\n          return this._tryConnect(deviceID, pw, cb, true); \n        } else {\n          console.error('Failed to connect via cloud routing.')\n          return cb(err);\n        }\n      } else if (_triedLocal === false) {\n        console.log('Successfully connected to Lattice over LAN.')\n      }\n      // Update the timeout to a longer one for future async requests\n      client.timeout = constants.ASYNC_SDK_TIMEOUT;\n      this.client = client;\n      // Setup a new storage session if these are new credentials.\n      // (This call will be bypassed if the credentials are already saved\n      // in localStorage because getBtcWalletData is also called in the constructor)\n      this.deviceID = deviceID;\n      this.getBtcWalletData();\n      return cb(null, client.isPaired);\n    });\n  }\n\n  connect(deviceID, pw, cb) {\n    return this._tryConnect(deviceID, pw, cb, true); // temporarily disable local connect\n  }\n\n  refreshWallets(cb) {\n    if (this.client) {\n      const prevWallet = JSON.stringify(this.client.getActiveWallet());\n      this.client.connect(this.deviceID, (err, isPaired) => {\n        // If we lost connection, the user most likely removed the pairing and will need to repair\n        if (false === this.client.isPaired)\n          return cb(constants.LOST_PAIRING_ERR);\n        if (err)\n          return cb(err);\n        // If we pulled a new active wallet, reset balances + transactions\n        // so we can reload a new set.\n        const newWallet = JSON.stringify(this.client.getActiveWallet());\n        if (newWallet !== prevWallet)\n          this.resetStateData();\n        // Update storage. This will remap to a new localStorage key if the wallet UID\n        // changed. If we didn't get an active wallet, it will just clear out the addresses\n        this.getBtcWalletData();\n        return cb(null, isPaired);\n      })\n    } else {\n      return cb('Lost connection to Lattice. Please refresh.');\n    }\n  }\n\n  sign(req, cb) {\n    // Get the tx payload to broadcast\n    this.client.sign(req, (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n      broadcastBtcTx(res.tx, (err, txid) => {\n        if (err)\n          return cb(`Error broadcasting transaction: ${err.message}`)\n        return cb(null, txid)\n      })\n    })\n  }\n\n  _genPrivKey(deviceID, pw, name) {\n    const key = Buffer.concat([\n      Buffer.from(pw), \n      Buffer.from(deviceID),\n      Buffer.from(name),\n    ])\n    // Create a new instance of ReactCrypto using the key as entropy\n    this.crypto = new ReactCrypto(key);\n    return this.crypto.createHash('sha256').update(key).digest();\n  }\n\n  //----------------------------------------------------\n  // NEW STUFF - REWRITING ADDRESS/DATA FETCHING FOR BTC WALLET\n  //----------------------------------------------------\n\n  // Get a set of either pending or confirmed transactions from the full\n  // set of known BTC txs\n  getBtcTxs(confirmed=true) {\n    const txs: any[] = [];\n    this.btcTxs.forEach((t) => {\n      if (confirmed && t.confirmed) {\n        txs.push(t)\n      } else if (!confirmed && !t.confirmed) {\n        txs.push(t)\n      }\n    })\n    return txs;\n  }\n\n  // Get the set of known UTXOs belonging to our known set of BTC addresses\n  getBtcUtxos() {\n    return this.btcUtxos;\n  }\n\n  // Get the BTC balance, which is simply a sum of UTXO values\n  // Returns the balance in satoshis\n  getBtcBalance() {\n    let balance = 0;\n    this.btcUtxos.forEach((u) => {\n      balance += u.value;\n    })\n    return balance;\n  }\n\n  // Fetch necessary addresses based on state data. We need to fetch addresses\n  // for both BTC and BTC_CHANGE such that we have fetched GAP_LIMIT past the last\n  // used address. An address is \"used\" if it has at least one transaction associated.\n  // This function will automatically fetch both BTC and BTC_CHANGE addresses up to\n  // the associated GAP_LIMITs and updates state internally.\n  // Returns a callback containing params (error, numFetched), where `numFetched` is\n  // the total number of *new* addresses we fetched. If this number is >0, it signifies\n  // we should re-fetch transaction data for our new set of addresses.\n  fetchBtcAddresses(cb, isChange=false, totalFetched={regular: 0, change: 0}) {\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return cb('Cannot request BTC addresses while wallet is hidden.');\n    }\n    const lastUsedIdx = this._getLastUsedBtcAddrIdx(isChange);\n    const currentAddrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    const GAP_LIMIT = isChange ?  constants.BTC_CHANGE_GAP_LIMIT : \n                                  constants.BTC_MAIN_GAP_LIMIT;\n    const targetIdx = lastUsedIdx + 1 + GAP_LIMIT;\n    const maxToFetch = targetIdx - currentAddrs.length;\n    const nToFetch = Math.min(constants.BTC_ADDR_BLOCK_LEN, maxToFetch)\n    if (nToFetch > 0) {\n      // If we have closed our gap limit we need to get more addresses\n      const changeIdx = isChange ? 1 : 0;\n      const opts = {\n        startPath: [ \n          BTC_PURPOSE, constants.BTC_COIN, harden(0), changeIdx, currentAddrs.length \n        ],\n        n: nToFetch,\n        skipCache: true,\n      }\n      this._getAddresses(opts, (err, addresses) => {\n        if (err)\n          return cb(err);\n        // Track the number of new addresses we fetched\n        if (isChange) {\n          totalFetched.change += nToFetch;\n        } else {\n          totalFetched.regular += nToFetch;\n        }\n        // Save the addresses to memory and also update them in localStorage\n        // Note that we do need to track index here\n        if (isChange) {\n          this.addresses.BTC_CHANGE = currentAddrs.concat(addresses);\n        } else {\n          this.addresses.BTC = currentAddrs.concat(addresses);\n        }\n        console.log('Fetched BTC', this.addresses.BTC)\n        console.log('Fetched BTC_CHANGE', this.addresses.BTC_CHANGE)\n        // If we need to fetch more, recurse\n        if (maxToFetch > nToFetch) {\n          this.fetchBtcAddresses(cb, isChange, totalFetched);\n        } else if (!isChange) {\n          // If we are done fetching main BTC addresses, switch to the change path\n          this.fetchBtcAddresses(cb, true, totalFetched);\n        } else {\n          this.saveBtcWalletData();\n          cb(null, totalFetched);\n        }\n      })\n    } else if (!isChange) {\n      // If we are done fetching main BTC addresses, switch to the change path\n      this.fetchBtcAddresses(cb, true, totalFetched);\n    } else {\n      // Nothing to fetch\n      this.saveBtcWalletData();\n      cb(null, totalFetched);\n    }\n  }\n\n  // We want to clear UTXOs when we re-sync because they could have been spent.\n  // Due to the nature of `fetchBtcStateData`, we need to append new UTXOs to\n  // the existing set as we sync data, so it is best to call this function once\n  // from the component that is starting the resync.\n  clearUtxos() {\n    this.btcUtxos = [];\n  }\n\n  // Fetch transactions and UTXOs for all known BTC addresses (including change)\n  // Calls to appropriate Bitcoin data provider and updates state internally.\n  // Returns a callback with params (error)\n  fetchBtcStateData(opts, cb, isChange=false, txs=[], utxos=[]) {\n    // Determine which addresses for which to fetch state.\n    // If we get non-zero `opts` values it means this is a follow up call\n    // and we only want to fetch data for new addresses we've collected\n    // rather than data for all known addresses.\n    let addrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    if (opts && opts.regular > 0) {\n      addrs = this.addresses.BTC.slice(-opts.regular);\n      opts.regular = 0;\n    } else if (opts && opts.change > 0) {\n      // If we have new change addrs but not new regular addrs,\n      // we can force a switch to change here so we don't re-scan\n      // the same regular addresses we have already scanned.\n      isChange = true;\n      addrs = this.addresses.BTC_CHANGE.slice(-opts.change);\n      opts.change = 0;\n    }\n    fetchBtcPrice((err, btcPrice) => {\n      if (err) {\n        // Don't fail out if we can't get the price - just display 0\n        console.error('Failed to fetch price:', err);\n        btcPrice = 0;\n      }\n      fetchBtcTxs(addrs, txs, (err, _txs) => {\n        if (err)\n          return cb(err);\n        else if (!_txs)\n          return cb('Failed to fetch transactions');\n        txs = txs.concat(_txs);\n        fetchBtcUtxos(addrs, (err, _utxos) => {\n          if (err)\n            return cb(err);\n          else if (!_utxos)\n            return cb('Failed to fetch UTXOs');\n          utxos = utxos.concat(_utxos);\n          if (!isChange) {\n            // Once we get data for our BTC addresses, switch to change\n            this.fetchBtcStateData(opts, cb, true, txs, utxos);\n          } else {\n            // All done! Filter/process data and save\n            this.btcPrice = btcPrice;\n            this.lastFetchedBtcData = Math.floor(Date.now());\n            const newTxs = this.btcTxs.concat(txs);\n            this.btcTxs = filterUniqueObjects(newTxs, ['id']);\n            this._processBtcTxs();\n            const newUtxos = this.btcUtxos.concat(utxos);\n            // UTXOs should already be filtered but it doesn't hurt to\n            // do a sanity check filter here.\n            this.btcUtxos =   filterUniqueObjects(newUtxos, ['id', 'vout'])\n                              .sort((a, b) => { return b.value - a.value });\n            this.saveBtcWalletData();\n            cb(null);\n          }\n        })\n      })\n    })\n  }\n\n  // Generic caller to SDK getAddress route with retry mechanism\n  _getAddresses(opts, cb) {\n    this.client.getAddresses(opts, (err, addresses) => {\n      // Catch an error, but if the device is busy it probably means it is currently\n      // caching a batch of new addresses. Continue the loop through this request until\n      // it hits.\n      if (err && err !== 'Device Busy') {\n        setTimeout(() => {\n          return cb(err);\n        }, 2000);\n      } else {\n        // To avoid concurrency problems on an initial sync, we need to wait\n        // for the device to refresh addresses before completing the callback\n        if (err === 'Device Busy') {\n          return this._getAddresses(opts, cb)\n        } else {\n          return cb(null, addresses);\n        }\n      }\n    })\n  }\n\n  // Get the highest index address that has been used for either BTC or BTC_CHANGE\n  _getLastUsedBtcAddrIdx(change=false) {\n    const coin = change ? 'BTC_CHANGE' : 'BTC';\n    const addrs = this.addresses[coin] || [];\n    const txs = this.btcTxs || [];\n    let lastUsed = -1;\n    for (let i = 0; i < txs.length; i++) {\n      if (txs[i].confirmed) {\n        let maxUsed = lastUsed;\n        txs[i].inputs.forEach((input) => {\n          if (addrs.indexOf(input.addr) > maxUsed)\n            maxUsed = addrs.indexOf(input.addr);\n        })\n        txs[i].outputs.forEach((output) => {\n          if (addrs.indexOf(output.addr) > maxUsed)\n            maxUsed = addrs.indexOf(output.addr);\n        })\n        if (maxUsed > lastUsed)\n          lastUsed = maxUsed;\n      }\n    }\n    return lastUsed;\n  }\n\n  // Loop through known txs, determining value and recipient\n  // based on known addresses.\n  // Recipient should be the first address\n  // If the recipient is one of our addresses, the transaction is inbound\n  // If the transaction is inbound, value is SUM(outputs to our addresses)\n  // If the transaction is outbound, value is SUM(inputs) - SUM(outputs to our addresses)\n  _processBtcTxs() {\n    const allAddrs = this.addresses.BTC.concat(this.addresses.BTC_CHANGE);\n    const processedTxs: any[] = [];\n    const txs = JSON.parse(JSON.stringify(this.btcTxs));\n    txs.forEach((tx) => {\n      // Determine if this is an outgoing transaction or not based on inputs.\n      // We consider a transaction as \"incoming\" if *every* input was signed by\n      // an external address.\n      tx.incoming = tx.inputs.every(input => allAddrs.indexOf(input.addr) === -1);\n\n      // Fill in the recipient. If this is an outgoing transaction, it will\n      // always be the first output. Otherwise, we consider the recipient\n      // to be the first address belonging to us that we can find in outputs.\n      if (!tx.incoming) {\n        tx.recipient = tx.outputs[0].addr;\n      } else {\n        tx.outputs.forEach((output) => {\n          if (!tx.recipient && allAddrs.indexOf(output.addr) > -1) {\n            // Mark the recipient as the first of our addresses we find\n            tx.recipient = allAddrs[allAddrs.indexOf(output.addr)];\n          }\n        })\n        if (!tx.recipient) {\n          // Fallback to the first output. This should not be possible after\n          // the loop above.\n          tx.recipient = tx.outputs[0].addr;\n        }\n      }\n\n      // Calculate the value of the transaction to display in our history\n      tx.value = 0;\n      if (!tx.incoming) {\n        // Outgoing tx: sum(outputs to external addrs)\n        let inputSum = 0;\n        tx.inputs.forEach((input) => {\n          inputSum += input.value;\n        })\n        let internalOutputSum = 0;\n        let externalOutputSum = 0;\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            internalOutputSum += output.value;\n          } else {\n            externalOutputSum += output.value;\n          }\n        })\n        if (inputSum === internalOutputSum + tx.fee) {\n          // Edge case: sent to internal address, i.e. internal transaction\n          tx.value = 0;\n        } else {\n          tx.value = externalOutputSum;\n        }\n      } else {\n        // Incoming tx: sum(outputs to internal addrs)\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            tx.value += output.value;\n          }\n        })\n      }\n      processedTxs.push(tx);\n    })\n    const sortedTxs = processedTxs\n                      .sort((a, b) => { return b.timestamp - a.timestamp })\n    this.btcTxs = sortedTxs;\n  }\n}\n\nexport default SDKSession","import React, { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { useRecords } from \"../hooks/useRecords\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport localStorage from \"../util/localStorage\";\n\n/**\n * A React Hook that allows us to pass data down the component tree without having to pass\n * props.\n */\nexport const AppContext = createContext(undefined);\n\nexport const AppContextProvider = ({\n  children,\n  overrides,\n}: {\n  children: ReactNode;\n  overrides?: { [key: string]: any };\n}) => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 500);\n  const [session, setSession] = useState<SDKSession>(null);\n\n  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);\n  const [\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  ] = useRecords(localStorage.getAddresses() ?? [])\n\n  const defaultContext = {\n    isMobile,\n    session,\n    setSession,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  };\n\n  /**\n   * Whenever `addresses` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setAddresses(addresses);\n  }, [addresses]);\n\n  /**\n   * Sets `isMobile` when the window resizes.\n   * */\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      const windowIsMobileWidth = window.innerWidth < 500;\n      if (windowIsMobileWidth && !isMobile) setIsMobile(true);\n      if (!windowIsMobileWidth && isMobile) setIsMobile(false);\n    });\n  }, [isMobile]);\n\n  return (\n    <AppContext.Provider value={{ ...defaultContext, ...overrides }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import differenceBy from \"lodash/differenceBy\";\nimport unionBy from \"lodash/unionBy\";\nimport { useState } from \"react\";\nimport { Record } from \"../types/records\";\n\n/**\n * `useRecords` is a React hook that builds off of `useState` to add setter functions for\n * interacting with a list of objects:\n *  - `addRecords` - Combines passed in array of records and records in state by comparing ids\n *  - `removeRecords` - Removes passed in array of records from records in state by comparing ids\n * @param defaultValue - any array to set the default value\n */\nexport const useRecords = <T extends Record>(\n  defaultValue: T[],\n  id = \"id\"\n): [T[], (toAdd: T[]) => void, (toRemove: T[]) => void, () => void] => {\n  const [records, setRecords] = useState<T[]>(defaultValue);\n\n  const addRecords = (recordsToAdd: T[]) =>\n    setRecords((recordsInState) => unionBy(recordsInState, recordsToAdd, id));\n\n  const removeRecords = (recordsToRemove: T[]) =>\n    setRecords((recordsInState) =>\n      differenceBy(recordsInState, recordsToRemove, id)\n    );\n\n  const resetRecords = () => setRecords([]);\n\n  return [records, addRecords, removeRecords, resetRecords];\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Col, Row } from 'antd'\nimport { AppContext } from \"../../store/AppContext\";\nconst SPAN_WIDTH = 14; // Max 24 for 100% width\n\nclass PageContent extends React.Component<any, any> {\n  static contextType = AppContext\n\n  render () {\n    if (!this.props.children && !this.props.content)\n      return; // Content must be passed in\n    // Mobile content should be displayed without any padding\n    if (this.context.isMobile)\n      return this.props.children ?this.props.children : this.props.content\n    // Desktop content has some padding\n    return(\n      <Row justify=\"center\">\n        <Col span={SPAN_WIDTH}>\n          {this.props.children || this.props.content}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default PageContent;","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport React, { useState } from \"react\";\n\n/**\n * Allows the user to edit text inline by rendering\n * the string as a button that converts the string \n * into a text field when clicked by the user.\n */\nexport const NameEditor = ({ name, setName }: {\n  name: string;\n  setName: (name: string) => void;\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [form] = Form.useForm();\n\n  const onCancel = () => {\n    form.resetFields();\n    setIsEditing(false);\n  };\n\n  const onFinish = (value) => {\n    setIsEditing(false);\n    setName(value.name);\n  };\n\n  return isEditing ? (\n    <Form\n      form={form}\n      name=\"formData\"\n      layout=\"inline\"\n      onFinish={onFinish}\n      style={{ justifyContent: \"center\" }}\n    >\n      <Form.Item\n        name=\"name\"\n        initialValue={name}\n        rules={[{ required: true, message: \"Name is required.\" }]}\n      >\n        <Input data-testid={`${name}-input`} />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"text\" onClick={onCancel} data-testid={`${name}-cancel`}>\n          Cancel\n        </Button>\n        <Button type=\"ghost\" htmlType=\"submit\" data-testid={`${name}-save`}>\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  ) : (\n    <Button\n      type=\"text\"\n      size=\"large\"\n      icon={isHovered ? <EditOutlined /> : null}\n      style={{ fontSize: \"24px\" }}\n      data-testid={`${name}-edit`}\n      onClick={() => setIsEditing(true)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {name}\n    </Button>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Input, Row, Modal } from 'antd'\nimport { DesktopOutlined, LinkOutlined } from '@ant-design/icons';\nimport { Settings } from './index'\nimport { constants } from '../util/helpers'\nimport { NameEditor } from './NameEditor';\nimport { LoginData } from '../types/authentication';\nimport { AppContext } from '../store/AppContext';\n\ntype ConnectProps = {\n  submitCb: (data: LoginData, showLoading: boolean) => void,\n  cancelConnect: () => void,\n  name: string,\n  keyringName: string,\n  setKeyringName: (name: string) => void,\n  errMsg: string\n}\n\ntype ConnectState = {\n  errMsg: string,\n  isLoading: boolean,\n  modal: boolean,\n  showSettings: boolean\n}\n\nclass Connect extends React.Component<ConnectProps, ConnectState> {\n  static contextType = AppContext;\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      errMsg: null,\n      isLoading: false,\n      modal: false,\n      showSettings: false,\n    }\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderMsg = this.renderMsg.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  componentDidMount() {\n    //@ts-expect-error\n    this.input.focus()\n    this.setState({ isLoading: false  })\n  }\n\n  componentDidUpdate() {\n    if (this.props.name !== constants.DEFAULT_APP_NAME && document.title !== 'Lattice Connector') {\n      document.title = 'Lattice Connector'\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isLoading: false })\n  }\n\n  handleSubmit() {\n    const deviceID = (document.getElementById(\"deviceIdInput\") as HTMLInputElement).value;\n    const password = (document.getElementById(\"passwordInput\") as HTMLInputElement).value;\n    if (password.length < 8) {\n      this.setState({ isLoading: true, errMsg: \"Your password must be at least 8 characters.\"})\n    } else {\n      this.setState({ isLoading: true, errMsg: null })\n      // Call the connect function. Skip the loading screen so we don't\n      // leave the landing page until we connect.\n      this.props.submitCb({deviceID, password}, false);\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelConnect();\n    this.setState({ isLoading: false, errMsg: null });\n  }\n\n  renderConnectButton() {\n    if (this.state.isLoading && \n        this.state.errMsg === null &&\n        this.props.errMsg === null) {\n      return (\n        <div>\n          <Button type=\"primary\"\n                  style={{ margin: '20px 0 0 0' }}\n                  loading>\n            Connecting...\n          </Button>\n          <br/>\n          <Button type=\"link\" onClick={this.handleCancel}>\n            Cancel\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n        <Button type=\"primary\" onClick={this.handleSubmit} style={{ margin: '20px 0 0 0'}}>\n          Connect\n        </Button>\n      )\n    }\n  }\n\n  renderForm(getFieldDecorator) {\n    return (\n      <div>\n        <Row justify=\"center\">\n          <Input  placeholder=\"DeviceID\" \n                  id=\"deviceIdInput\" \n                  //@ts-expect-error\n                  ref={i => {this.input = i}}\n                  style={{ margin: '10px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          <Input.Password placeholder=\"Password (create for new logins)\" \n                          id=\"passwordInput\" \n                          onPressEnter={this.handleSubmit} \n                          style={{ margin: '20px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          {this.renderConnectButton()}\n        </Row>\n      </div>\n    )\n  }\n\n  showModal() {\n    this.setState({ modal: true });\n  }\n\n  hideModal() {\n    this.setState({ modal: false, showSettings: false });\n  }\n\n  renderSetupInfo() {\n    return (\n      <div>\n        <center>\n          <h3><b>New User Setup</b></h3>\n        </center>\n        <p>\n          You can use this page to establish a connection between <b>{this.props.name}</b>&nbsp; and your Lattice \n          hardware wallet device.&nbsp;\n          <i>For more general device setup information, please see the&nbsp;\n            <a className=\"lattice-a\" href=\"https://gridplus.io/setup\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            Lattice setup page\n            </a>.</i>\n        </p>\n        <h3><b>Step 1:</b></h3>\n        <p>\n          Unlock your Lattice and find its <b>Device ID</b> on the main menu. This is a six-character code.\n        </p>\n        <h3><b>Step 2:</b></h3>\n        <p>\n          Once you have your Device ID, specify a <b>password</b>. This does <i>not</i> secure any value and \n          is <i>not</i> associated with your wallet seed - it is only used to send secure requests to your device. \n          If you lose your password, you can remove the permission on your device and re-connect with a new one.\n        </p>\n        <h3><b>Step 3:</b></h3>\n        <p>\n          Please ensure your Lattice is <b>online</b> and click \"Connect\". Your device is online if there is a single\n          wifi signal icon on the top-right of the screen.\n        </p>\n      </div>\n    )\n  }\n\n  renderModal() {\n    if (this.state.showSettings) {\n      return (\n        <Modal\n          title=\"Settings\"\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          <Settings inModal={true} />\n        </Modal>\n      )\n    }\n     return (\n      <div>\n        <Modal\n          title={this.props.name === constants.DEFAULT_APP_NAME ? this.props.name : 'Lattice Connector 🔗'}\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          {this.renderSetupInfo()}\n        </Modal>\n      </div>\n    );\n  }\n\n  renderMsg() {\n    let err;\n    if (this.state.errMsg)\n      err = this.state.errMsg;\n    else if (this.props.errMsg)\n      err = this.props.errMsg;\n    if (err)\n      return (\n        <Alert  message={<p><b>Error:</b><br/>{err}</p>} \n                type={\"error\"} \n                style={{margin: \"20px 0 0 0\"}}\n                closable/>\n      );\n    return;\n  }\n\n  render() {\n    const spanWidth = this.context.isMobile ? 24 : 10;\n    const spanOffset = this.context.isMobile ? 0 : 7;\n    const tooLong = this.props.keyringName !== null && this.props.keyringName.length < 5;\n    return (\n      <Row>\n        {this.renderModal()}\n        <Col span={spanWidth} offset={spanOffset}>\n          <center>\n            {this.renderMsg()}\n            <Card bordered={true}>\n              <a  className='lattice-a'\n                  href=\"https://gridplus.io/lattice\" \n                  target='_blank' \n                  rel='noopener noreferrer'\n              >\n                {this.props.keyringName ? (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Connector <LinkOutlined/></h2>\n                ) : (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Manager<br/><DesktopOutlined/></h2>\n                )}\n              </a>\n              {this.props.keyringName ? (\n                <div style={{margin: \"2em\"}}>\n                  <br />\n                  <i><h3>Connect to:</h3></i>\n                  <NameEditor\n                    name={this.props.keyringName}\n                    setName={this.props.setKeyringName}\n                  />\n                </div>) : null}\n              {/* @ts-expect-error */}\n              {tooLong ? (<p><b>Error: App name must be more than 4 characters.</b></p>) : this.renderForm()}\n            </Card>\n            <Button type=\"link\" onClick={this.showModal.bind(this)} style={{margin: \"20px 0 0 0\"}}>\n              New User Info\n            </Button>\n            <br/>\n            <Button type=\"link\" onClick={() => {\n              this.setState({ showSettings: true }, this.showModal)\n            }}>\n              Settings\n            </Button>\n            <br/>\n            <Button type=\"link\" href=\"https://gridplus.io/lattice\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n              About the Lattice\n            </Button>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default Connect\n","import React from 'react';\nimport { Card, Input } from 'antd'\nimport { PageContent } from './index'\nimport 'antd/dist/antd.dark.css'\nimport { AppContext } from '../store/AppContext';\nconst SUBMIT_LEN = 8; // 8 characters in a code\n\nclass Pair extends React.Component<any, any> {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ code: '' })\n    //@ts-expect-error\n    this.input.focus()\n  }\n\n  componentWillUnmount() {\n    this.setState({ code: '' })\n  }\n\n  handleUpdate(e) {\n    try {\n      this.setState({ code: e.target.value.toUpperCase() }, () => {\n        if (this.state.code.length >= SUBMIT_LEN) {\n          this.props.submit(this.state.code)\n        }\n      })\n    } catch (err) {\n      ;\n    }\n  }\n\n  getBoxWidth() {\n    const e = document.getElementById('secret-card')\n    if (!e)\n      return\n    return 0.8 * e.clientWidth\n  }\n\n  getBoxFontHeight() {\n    const w = this.getBoxWidth();\n    if (!w)\n      return;\n    return 0.6 * (w / SUBMIT_LEN);\n  }\n\n  render() {\n    if (this.props.hide) {\n      return null;\n    }\n    const size = this.context.isMobile ? 'small' : 'large';\n    const width = this.getBoxWidth();\n    const fontSize = this.getBoxFontHeight();\n    const content = (\n      <center>\n        <Card title=\"Enter Secret\" bordered={true} id='secret-card'>\n          <p></p>\n          <p>Please enter the pairing secret displayed on your Lattice screen:</p>\n          <Input\n            className='lattice-pairing-box'\n            size={size}\n            id=\"secret\"\n            //@ts-expect-error\n            ref={i => {this.input = i}}\n            onChange={this.handleUpdate.bind(this)}\n            style={{width, fontSize}}\n            value={this.state.code}\n          />\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Pair","// NOTE: This feature has been shelved for now. The problem is this:\n// 1. We deprecated the ETH wallet and are in the process of deprecating the BTC wallet too\n// 2. Only the paired requester can setup a permission and the web wallet (rebanded manager)\n//    is itself a paired requester.\n// Ideally we could have a true manager that can create a permission on behalf of a paired\n// requester, otherwise the requester needs to have an interface to setup the permission.\n// If we are to use this app as the \"manager\", we cannot manage permissions on it.\n// FOR NOW, I AM HIDING THIS FEATURE IN main.js\n\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Dropdown, Input, Menu, Row, Select, Spin } from 'antd'\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { constants, } from '../util/helpers';\nimport { PageContent } from './index'\nimport './styles.css'\nconst BN = require('bignumber.js');\nconst HOURS = 3600;\nconst DAYS = 86400;\nconst assets = {\n  ETH: {\n    name: 'ETH',\n    decimals: 18,\n  },\n  BTC: {\n    name: 'BTC',\n    decimals: 8,\n  }\n}\n\nclass Permissions extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      success: false,\n      loading: false,\n      asset: assets.ETH,\n      timeMultiplier: HOURS, // conversion of window to seconds\n      value: 0,\n      window: 0,\n    }\n\n    this.submit = this.submit.bind(this);\n    this.updateAsset = this.updateAsset.bind(this);\n    this.updateTimeMultiplier = this.updateTimeMultiplier.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateWindow = this.updateWindow.bind(this);\n  }\n\n  updateAsset(x) {\n    this.setState({ asset: assets[x.key]})\n  }\n\n  updateTimeMultiplier(x) {\n    this.setState({ timeMultiplier: x })\n  }\n\n  updateWindow(evt) {\n    const x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      let s = parseFloat(x);\n      if (x[x.length-1] === '.')\n      //@ts-expect-error\n        s += '.';\n      this.setState({ window: s })\n    }\n    else if (x === '')\n      this.setState({ window: '0' })\n  }\n\n  updateValue(evt) {\n    let x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      if (x.length > 1 && x[0] === '0' && x[1] !== '.')\n        x = x.slice(1);\n      this.setState({ value: x })\n    }\n    else if (x === '')\n      this.setState({ value: '0' })\n  }\n\n  submit() {\n    this.setState({ loading: true, error: null, success: false })\n    const req = {\n      currency: this.state.asset.name,\n      decimals: this.state.asset.decimals,\n      timeWindow: Math.floor(parseFloat(this.state.window) * this.state.timeMultiplier),\n      limit: 0,\n      asset: null,\n    };\n    const value = new BN(this.state.value);\n    const decimals = new BN(this.state.asset.decimals);\n    const power = new BN('10').pow(decimals);\n    let limitStr = value.multipliedBy(power).toString(16)\n    if (limitStr.length % 2 > 0)\n      limitStr = `0${limitStr}`;\n    //@ts-expect-error\n    req.limit = `0x${limitStr}`;\n    this.props.session.client.addPermissionV0(req, (err) => {\n      if (err) {\n        this.setState({ error: err.toString(), success: false, loading: false })\n      } else {\n        this.setState({ error: null, success: true, loading: false })\n      }\n    })\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Error\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.loading) {\n      return (\n        <div>\n          <Spin indicator={(<LoadingOutlined/>)}/>\n          <br/>\n        </div>\n      )\n    } else if (this.state.success) {\n      return (\n        <Alert \n          type=\"success\"\n          message=\"Success\"\n          description=\"Successfully added permission to Lattice.\"\n        />\n      )\n    }\n  }\n\n  renderCard() {\n    const timeMultiplierSelect = (\n      <Select defaultValue={HOURS} onChange={this.updateTimeMultiplier}>\n        <Select.Option value={HOURS}>hours</Select.Option>\n        <Select.Option value={DAYS}>days</Select.Option>\n      </Select>\n    )\n\n    const currencyMenu = (\n      <Menu onClick={this.updateAsset}>\n        {Object.keys(assets).map((key) => {\n          return (\n            <Menu.Item key={key}>{key}</Menu.Item>\n          )\n        })}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <p>\n          You can set spending limits for ETH and BTC. If you make a request from this web wallet that is under your\n          spending limit, your Lattice will auto-sign the transaction. Note that this currently only works for simple \n          ETH and BTC transfers.&nbsp;\n           <a className='lattice-a'\n              href={constants.PERMISSIONS_HELP_LINK}\n              target='_blank'\n              rel='noopener noreferrer'\n          >\n            (More info)\n          </a>        \n        </p>\n        <br/>\n        <i>This is a feature prototype. In the future, GridPlus intends to expand this functionality\n        to other assets and more general contract interactions.</i>\n        <br/><br/>\n        <p><b>Currency:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Dropdown overlay={currencyMenu}>\n              <Button>{this.state.asset.name}</Button>\n            </Dropdown>\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Spending Limit:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-value\" \n                  value={this.state.value} \n                  onChange={this.updateValue.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Reset Every:</b></p>\n         <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-window\"\n                  addonAfter={timeMultiplierSelect}\n                  value={this.state.window} \n                  onChange={this.updateWindow.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Button type=\"primary\" onClick={this.submit}>\n          Set Limit\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={<div>\n          <h3>Spending Limits (Beta)&nbsp;\n            <a  className='lattice-a'\n                href={constants.PERMISSIONS_HELP_LINK}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n              <QuestionCircleOutlined/>\n            </a>\n          </h3>\n        </div>} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Permissions","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Checkbox, Col, Collapse, Input, Radio, Row, Space, Table } from 'antd'\nimport { WarningOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\nimport './styles.css'\nimport omit from \"lodash/omit\"\nimport { constants, getBtcPurpose } from '../util/helpers';\nimport localStorage from '../util/localStorage';\n\nclass Settings extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      settings: localStorage.getSettings(),\n      keyring: localStorage.getKeyring(),\n    }\n    this.getBtcPurposeName = this.getBtcPurposeName.bind(this)\n  }\n\n\n  submit() {\n    // Save the settings to localStorage\n    localStorage.setSettings(this.state.settings)\n    // Reload the page for the changes to take effect\n    window.location.reload();\n  }\n\n  updateUseCustomEndpoint(value) {\n    const settings = this.state.settings;\n    if (value !== true) {\n      // Reset the custom endpoint if this value is false\n      settings.customEndpoint = '';\n    }\n    this.setState({ settings });\n  }\n\n  updateCustomEndpoint(evt) {\n    const settings = this.state.settings;\n    settings.customEndpoint = evt.target.value;\n    this.setState({ settings });\n  }\n\n  updateUseDevLattice(evt) {\n    const settings = this.state.settings;\n    settings.devLattice = evt.target.checked\n    this.setState({ settings }, this.submit)\n  }\n\n  removeKeyring ({ name }) {\n    localStorage.removeKeyringItem(name)\n    this.setState({ keyring: omit(this.state.keyring, name) })\n  }\n\n  resetState() {\n    localStorage.removeRootStore()\n    window.location.reload();\n  }\n\n  renderCustomEndpointSetting() {\n    const { customEndpoint='' } = this.state.settings;\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Connection Endpoint:</h3>\n            <p>\n              If you wish to route messages and connections through your own endpoint, you may specify it here.&nbsp;\n              Otherwise leave blank.&nbsp; See&nbsp;\n              <a  href=\"https://github.com/GridPlus/lattice-connect\"\n                  className='lattice-a'\n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\">\n                this\n              </a> for more information.\n            </p>\n            <div>\n              <Input  placeholder=\"host:port\" \n                      defaultValue={customEndpoint} \n                      onChange={this.updateCustomEndpoint.bind(this)}/>\n            </div>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  handleChangeBitcoinVersionSetting(evt) {\n    const settings = this.state.settings;\n    settings.btcPurpose = parseInt(evt.target.value);\n    this.setState({ settings }, this.submit)\n  }\n\n  getBtcPurposeName() {\n    const purpose = this.state.settings.btcPurpose ?\n                    this.state.settings.btcPurpose :\n                    getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_NONE) {\n      return constants.BTC_PURPOSE_NONE_STR;\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n      return constants.BTC_PURPOSE_LEGACY_STR\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n      return constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n      return constants.BTC_PURPOSE_SEGWIT_STR;\n    } else {\n      return 'Error finding BTC version'\n    }\n  }\n\n  renderBitcoinVersionSetting() {\n    // NOTE: Firmware does not yet support segwit addresses\n    // TODO: Uncomment this when firmware is updated\n    const purpose = getBtcPurpose() || constants.BTC_PURPOSE_NONE;\n    return (\n      <Card>\n        <h4>Bitcoin Wallet Type</h4>\n        <Radio.Group  onChange={this.handleChangeBitcoinVersionSetting.bind(this)}\n                      defaultValue={purpose}>\n          <Space direction=\"vertical\">\n            <Radio value={constants.BTC_PURPOSE_NONE}>\n              Hide BTC Wallet\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_SEGWIT}>\n              {constants.BTC_PURPOSE_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_WRAPPED_SEGWIT}>\n              {constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_LEGACY}>\n              {constants.BTC_PURPOSE_LEGACY_STR}\n            </Radio>\n          </Space>\n        </Radio.Group>\n      </Card>\n    )\n  }\n\n  renderDevLatticeSetting() {\n    const { devLattice } = this.state.settings;\n    return (\n      <Card>\n        <h4>Debug Settings</h4>\n        <Row justify='center' style={{ margin: '10px 0 0 0'}}>\n          <Button type=\"link\" onClick={this.resetState} className='warning-a'>\n          <WarningOutlined/>&nbsp;Reset App State\n        </Button>\n        </Row>\n        <Row justify='center' style={{ margin: '20px 0 0 0'}}>\n          <Checkbox onChange={this.updateUseDevLattice.bind(this)} checked={devLattice}>\n            Using Dev Lattice\n          </Checkbox>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderKeyringsSetting() {\n    const keyring = localStorage.getKeyring()\n    const cols = [\n      { \n        title: 'App Name', \n        dataIndex: 'name', \n        key: 'name'\n      }, \n      { \n        title: 'Action', \n        dataIndex: 'action', \n        key: 'action',\n        render: (text, record) => (\n          <Button type=\"link\" onClick={() => {this.removeKeyring(record)}}>Forget</Button>\n        ) \n      }\n    ]\n    const data: any[] = [];\n    Object.keys(keyring)\n      .sort((a, b) => { return a.toLowerCase() > b.toLowerCase() ? 1 : -1 })\n      .forEach((name) => { data.push({ name, key: name }) })\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Third Party Connections</h3>\n            <p>\n              Manage connections to your Lattice. Third party apps should be listed here if they are connected to your device.\n            </p>\n            <Collapse>\n              {/* @ts-expect-error */}\n              <Collapse.Panel header={`Connections List (${data.length})`}>\n                <Table dataSource={data} columns={cols}/>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderCard() {\n    return (\n      <div>\n        {this.renderKeyringsSetting()}\n        {this.renderCustomEndpointSetting()}\n        {this.renderBitcoinVersionSetting()}\n        {this.renderDevLatticeSetting()}\n        <br/>\n        <Button type=\"primary\" onClick={this.submit.bind(this)}>\n          Update and Reload\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Settings'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    if (this.props.inModal)\n      return (<center>{this.renderCard()}</center>);\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Settings","import isEmpty from \"lodash/isEmpty\";\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\nimport { Record } from \"../types/records\";\nimport { constants } from \"../util/helpers\";\nimport { useRequestFailed } from \"./useRequestFailed\";\nconst { ADDRESSES_PER_PAGE } = constants;\nconst ADDRESS_RECORD_TYPE = 0;\n\n/**\n * The `useAddresses` hook is used to manage the external calls for fetching, adding, and removing\n * key-value address data on the user's Lattice and caching that data in `localStorage`.\n */\nexport const useAddresses = () => {\n  const {\n    session,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  } = useContext(AppContext);\n\n  const { error, setError, retryFunction, setRetryFunctionWithReset } =\n    useRequestFailed();\n\n  /**\n   * Fetches the installed addresses from the user's Lattice.\n   */\n  const fetchAddresses = useCallback(\n    async (fetched = 0, retries = 1) => {\n      setIsLoadingAddresses(true);\n\n      return session.client\n        .getKvRecords({\n          start: fetched,\n          n: ADDRESSES_PER_PAGE,\n        })\n        .then((res) => {\n          addAddressesToState(res.records);\n          const totalFetched = res.fetched + fetched;\n          const remainingToFetch = res.total - totalFetched;\n          if (remainingToFetch > 0) {\n            fetchAddresses(fetched + res.fetched);\n          } else {\n            setError(null);\n            setIsLoadingAddresses(false);\n          }\n        })\n        .catch((err) => {\n          if (retries > 0) {\n            setError(null);\n            fetchAddresses(fetched, retries - 1);\n          } else {\n            setError(err);\n            setIsLoadingAddresses(false);\n            setRetryFunctionWithReset(fetchAddresses);\n          }\n        });\n    },\n    [\n      addAddressesToState,\n      session.client,\n      setError,\n      setIsLoadingAddresses,\n      setRetryFunctionWithReset,\n    ]\n  );\n\n  /**\n   * Removes installed addresses from the user's Lattice.\n   */\n  const removeAddresses = (selectedAddresses: Record[]) => {\n    const ids = selectedAddresses.map((r) => parseInt(r.id));\n    if (isEmpty(ids)) return;\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .removeKvRecords({ ids })\n      .then(() => {\n        removeAddressesFromState(selectedAddresses);\n        setError(null);\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => removeAddresses(selectedAddresses));\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  /**\n   * Adds new addresses to the user's Lattice.\n   */\n  const addAddresses = async (addressesToAdd) => {\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .addKvRecords({\n        caseSensitive: false,\n        type: ADDRESS_RECORD_TYPE,\n        records: addressesToAdd,\n      })\n      .then(() => {\n        // TODO: Remove fetch and call addAddressesToState() with the address data when FW is\n        //  updated to return address data. See GitHub issue:\n        //  https://github.com/GridPlus/k8x_firmware_production/issues/2323\n        fetchAddresses();\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => addAddresses(addressesToAdd));\n        throw err\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  return {\n    fetchAddresses,\n    addresses,\n    addAddresses,\n    addAddressesToState,\n    removeAddresses,\n    removeAddressesFromState,\n    resetAddressesInState,\n    isLoadingAddresses,\n    error,\n    setError,\n    retryFunction,\n  };\n};\n","import { useCallback, useState } from \"react\";\n\n/**\n * The `useRequestFailed` hook is used to more easily manage the state of a request as it is loading,\n * responding with errors, or retrying.\n */\nexport const useRequestFailed = () => {\n  const [error, setError] = useState(undefined);\n  const [retryFunction, setRetryFunction] = useState(undefined);\n\n  /**\n   * Wraps the `retryFunction` in another function that will not only call the `retryFunction` but\n   * also reset the state of the `error` and `retryFunction` variables.\n   */\n  const setRetryFunctionWithReset = useCallback(\n    (func) =>\n      setRetryFunction(() => () => {\n        func();\n        setError(null);\n        setRetryFunction(null);\n      }),\n    [setRetryFunction]\n  );\n\n  return {\n    error,\n    setError,\n    retryFunction,\n    setRetryFunction,\n    setRetryFunctionWithReset,\n  };\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nexport const ErrorAlert = ({ error, retryFunction }) => {\n  return error ? (\n    <Alert\n      message=\"Error\"\n      description={error}\n      type=\"error\"\n      closable\n      action={\n        <Button\n          //@ts-expect-error\n          type=\"danger\"\n          onClick={() => {\n            retryFunction && retryFunction();\n          }}\n        >\n          Retry\n        </Button>\n      }\n    />\n  ) : null;\n};\n","import { MinusSquareFilled, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input, Modal, Space } from \"antd\";\nimport _ from \"lodash\";\nimport React, { useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { ErrorAlert } from \"./ErrorAlert\";\n\nconst MAX_RECORD_LEN = 63; // 63 characters max for both key and vlaue\nexport const keyIsDuplicatedErrorMessage =\n  \"You already have a tag with this address on your device.\";\nexport const valIsDuplicatedErrorMessage =\n  \"You already have a tag with this name on your device.\";\n\nexport const AddAddressesButton = () => {\n  const {\n    addresses,\n    addAddresses,\n    isLoadingAddresses,\n    error,\n    setError,\n    retryFunction,\n  } = useAddresses();\n  const [form] = Form.useForm();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = () => {\n    form.validateFields().then(({ recordsToAdd }) => {\n      // Transform recordsToAdd data into { key: val } for SDK\n      const addresses = _.chain(recordsToAdd)\n        .keyBy(\"key\")\n        .mapValues(\"val\")\n        .value();\n\n      addAddresses(addresses)\n        .then(hideModal)\n        .catch(console.error);\n    });\n  };\n\n  const onFinishFailed = () => {\n    setError(\"Unable to submit. Fix errors in form and try again.\");\n  };\n\n  const onFieldsChange = () => {\n    setError(null);\n  };\n\n  return (\n    <>\n      <Button type=\"ghost\" onClick={showModal} icon={<PlusOutlined />}>\n        Add\n      </Button>\n      <Modal\n        title=\"Add Address Tags\"\n        visible={isModalVisible}\n        maskClosable={false}\n        onOk={form.submit}\n        onCancel={handleCancel}\n        destroyOnClose={true}\n        footer={[\n          <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n            Cancel\n          </Button>,\n          <Button\n            type=\"primary\"\n            loading={isLoadingAddresses}\n            onClick={form.submit}\n            key=\"add\"\n          >\n            Add\n          </Button>,\n        ]}\n      >\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <ErrorAlert error={error} retryFunction={retryFunction} />\n          <Form\n            form={form}\n            name=\"formData\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            onFieldsChange={onFieldsChange}\n            autoComplete=\"off\"\n            preserve={false}\n            layout=\"vertical\"\n          >\n            <Form.List\n              name=\"recordsToAdd\"\n              initialValue={[{ key: null, val: null }]}\n            >\n              {(fields, { add, remove }) => (\n                <>\n                  {fields.map(({ key, name, ...restField }) => (\n                    <div\n                      key={`${name}-inputs`}\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        marginBottom: \"1em\",\n                        width: \"100%\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          flexGrow: 1,\n                        }}\n                      >\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"key\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Address is required.\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, key) => {\n                                return addresses?.some((r) => r.key === key)\n                                  ? Promise.reject(\n                                      new Error(keyIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Address\"}\n                            data-testid={`${name}-address-input`}\n                          />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"val\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Name is required\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, val) => {\n                                return addresses?.some((r) => r.val === val)\n                                  ? Promise.reject(\n                                      new Error(valIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Name\"}\n                            data-testid={`${name}-name-input`}\n                          />\n                        </Form.Item>\n                      </div>\n                      {name > 0 ? (\n                        <Button\n                          type=\"text\"\n                          icon={<MinusSquareFilled />}\n                          disabled={isLoadingAddresses}\n                          style={{\n                            height: \"auto\",\n                            marginLeft: \"1em\",\n                            marginBottom: \"1.2em\",\n                          }}\n                          onClick={() => remove(name)}\n                        />\n                      ) : null}\n                    </div>\n                  ))}\n                  <Form.Item>\n                    <Button\n                      type=\"dashed\"\n                      block\n                      icon={<PlusOutlined />}\n                      disabled={isLoadingAddresses}\n                      onClick={add}\n                    >\n                      Add Another Address Tag\n                    </Button>\n                  </Form.Item>\n                </>\n              )}\n            </Form.List>\n          </Form>\n        </Space>\n      </Modal>\n    </>\n  );\n};\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Table } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport intersectionBy from \"lodash/intersectionBy\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { constants } from \"../util/helpers\";\nimport { abbreviateHash } from \"../util/addresses\";\nconst { ADDRESSES_PER_PAGE } = constants;\n\n/**\n * `AddressTable` is a table of key-value pairs of names and hashes with some management features to\n * make it easier to manage a large amount of addresses.\n */\nexport const AddressTable = () => {\n  const { isLoadingAddresses, addresses, removeAddresses } = useAddresses();\n  const [input, setInput] = useState(\"\");\n  const [filteredAddresses, setFilteredAddresses] = useState([]);\n  const [selectedAddresses, setSelectedAddresses] = useState([]);\n\n  useEffect(() => {\n    setInput(\"\");\n    setFilteredAddresses(addresses);\n  }, [addresses, isLoadingAddresses]);\n\n  const filter = useCallback(\n    (value) =>\n      fuzzysort\n        .go(value, addresses, { keys: [\"key\", \"val\"] })\n        .map((x) => x.obj),\n    [addresses]\n  );\n\n  const handleOnSelect = (_, __, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const handleOnSelectAll = (_, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInput(value);\n    const _addresses = value ? filter(value) : addresses;\n    setFilteredAddresses(_addresses);\n    setSelectedAddresses(intersectionBy(selectedAddresses, _addresses, \"key\"));\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Input\n          value={input}\n          placeholder=\"Filter\"\n          disabled={isLoadingAddresses}\n          onChange={onChange}\n          style={{ marginBottom: \"1em\" }}\n          allowClear\n        />\n        <Button\n          danger\n          type=\"text\"\n          disabled={selectedAddresses.length === 0}\n          onClick={() =>\n            removeAddresses(selectedAddresses)\n              .then(() => {\n                setSelectedAddresses([]);\n              })\n          }\n          style={{ marginLeft: \"1em\" }}\n        >\n          Remove Selected\n        </Button>\n      </div>\n      <Table\n        dataSource={filteredAddresses}\n        tableLayout=\"fixed\"\n        loading={{\n          spinning: isLoadingAddresses,\n          tip: \"Loading...\",\n          indicator: <LoadingOutlined />,\n        }}\n        pagination={{\n          position: [\"bottomCenter\"],\n          pageSize: ADDRESSES_PER_PAGE,\n          defaultCurrent: 1,\n          showSizeChanger: false,\n        }}\n        rowSelection={{\n          type: \"checkbox\",\n          onSelect: handleOnSelect,\n          onSelectAll: handleOnSelectAll,\n          selectedRowKeys: selectedAddresses.map((x) => x.key),\n        }}\n      >\n        <Table.Column\n          title=\"Name\"\n          dataIndex=\"val\"\n          key=\"val\"\n          defaultSortOrder=\"ascend\"\n          sorter={(a: any, b: any) => a.val.localeCompare(b.val)}\n        />\n        <Table.Column\n          title=\"Address\"\n          dataIndex=\"key\"\n          key=\"key\"\n          render={(key) => abbreviateHash(key)}\n          sorter={(a: any, b: any) => a.key.localeCompare(b.key)}\n        />\n      </Table>\n    </div>\n  );\n};\n","/**\n * `abbreviateHash` takes a string and returns the first 10 and last 8 characters with an ellipsis between.\n * @param {string} hash - the hash string to shorten.\n */\nexport const abbreviateHash = (hash: string) => hash && hash.length > 24 ? `${hash.slice(0, 10)}...${hash.slice(\n  hash.length - 8,\n  hash.length\n)}` : hash ?? \"\"\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { Button, Card } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React, { useEffect } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { AddAddressesButton } from \"./AddAddressesButton\";\nimport { AddressTable } from \"./AddressTable\";\nimport { PageContent } from \"./index\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { ErrorAlert } from \"./ErrorAlert\";\n\nconst AddressTagsPage = () => {\n  const {\n    fetchAddresses,\n    isLoadingAddresses,\n    addresses,\n    resetAddressesInState,\n    error,\n    retryFunction,\n  } = useAddresses();\n\n  // Fetch and Cache Addresses\n  useEffect(() => {\n    if (isEmpty(addresses) && !isLoadingAddresses) {\n      fetchAddresses();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const extra = [\n    <Button\n      key=\"sync-button\"\n      type=\"link\"\n      icon={<SyncOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={() => {\n        resetAddressesInState();\n        fetchAddresses();\n      }}\n    >\n      Sync\n    </Button>,\n    <AddAddressesButton key=\"add-addresses-button\" />,\n  ];\n\n  return (\n    <PageContent>\n      <ErrorAlert error={error} retryFunction={retryFunction} />\n      <Card title={\"Saved Addresses\"} extra={extra} bordered={true}>\n        <AddressTable />\n      </Card>\n    </PageContent>\n  );\n};\n\nexport default AddressTagsPage;\n","import { DesktopOutlined, TagsOutlined } from \"@ant-design/icons\";\nimport { Alert, Card, Divider } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React, { useContext } from \"react\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport { AppContext } from \"../store/AppContext\";\nimport { constants } from \"../util/helpers\";\nimport { PageContent } from \"./index\";\n\nconst Landing = () => {\n  const { session } = useContext(AppContext) as { session: SDKSession };\n  const is15Released = false //TODO: Activate when fw v15 is released\n  const fwVersion = session?.client?.getFwVersion();\n  const doesSupportGenericSigning = fwVersion.minor < 15;\n\n  return (\n    <PageContent>\n      <Card bordered={true} style={{ textAlign: \"center\" }}>\n        <div>\n          <h1 className=\"lattice-h1\">\n            <DesktopOutlined />\n            &nbsp;Lattice Manager\n          </h1>\n          <p className=\"lattice-h4\">\n            Manage secure data on your Lattice hardware wallet device for a\n            better web3 experience:\n          </p>\n        </div>\n        <div style={{ margin: \"25px\" }}>\n          <p>\n            <a\n              href={constants.TAGS_HELP_LINK}\n              className=\"lattice-a\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <TagsOutlined />\n              &nbsp;\n              <b>Address Tags</b>&nbsp;\n            </a>\n          </p>\n        </div>\n        <p>\n          <i>Give names to your favorite contracts or recipient addresses.</i>\n        </p>\n        {is15Released && doesSupportGenericSigning ? (\n          <Alert\n            style={{ maxWidth: \"500px\", margin: \"auto\" }}\n            message=\"Lattice firmware is out of date\"\n            description={\n              <div style={{ padding: \"0 25px 0 25px\" }}>\n                <p>\n                  Please update immediately to receive automatic contract\n                  decoding, which ensures you know what you're signing.\n                </p>\n                <div\n                  style={{ margin: \"auto\", width: \"66%\", textAlign: \"left\" }}\n                >\n                  <p>To update your firmware:</p>\n                  <ol>\n                    <li>Unlock your device</li>\n                    <li>\n                      Tap <strong>Settings</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Software Update</strong>\n                    </li>\n                    <li>\n                      Tap <strong>Update</strong>\n                    </li>\n                  </ol>\n                </div>\n              </div>\n            }\n            type=\"warning\"\n            showIcon\n          />\n        ) : null}\n        <Divider />\n        <img\n          src=\"lattice-landing.jpg\"\n          style={{ maxHeight: \"500px\", maxWidth: \"100%\" }}\n          alt=\"lattice-one-device\"\n        />\n      </Card>\n    </PageContent>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\n\nclass Loading extends React.Component<any, any> {\n  render() {\n    const content = (\n      <center>\n        <Card title=\"Loading\" bordered={true}>\n          {this.props.spin !== false ? (\n            <Spin indicator={<LoadingOutlined/>} />\n          ) : null}\n          <p>{this.props.msg ? this.props.msg : \"Waiting for data from your Lattice\"}</p>\n          {this.props.onCancel ? (\n            <Button type='link' onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n          ) : null}\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Loading","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Button } from 'antd'\n\nclass Error extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.keyPressListener = this.keyPressListener.bind(this);\n    this.submit = this.submit.bind(this)\n   }\n\n  componentDidMount() {\n    window.addEventListener('keypress', this.keyPressListener)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.keyPressListener)\n  }\n\n  keyPressListener(e) {\n    if (e.key === 'Enter')\n      this.submit()\n  }\n\n  submit() {\n    this.props.retryCb()\n  }\n\n  render() {\n    return (\n      <center>\n        <Card title=\"Error\" bordered={true}>\n          <p>{this.props.msg}</p>\n          {this.props.retryCb ? (\n            <Button id=\"submitButton\"\n              //@ts-expect-error\n              onClick={this.submit} type=\"danger\">\n              {this.props.btnMsg || \"Retry\"}\n            </Button>\n          ): null}\n        </Card>\n      </center>\n    )\n  }\n}\n\nexport default Error","\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Avatar, Divider, Statistic, List, Row, Card, Tag} from 'antd';\nimport { \n  CaretLeftOutlined, CaretRightOutlined, ClockCircleOutlined, \n  ArrowDownOutlined, ArrowUpOutlined, ReloadOutlined\n} from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { constants } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\n\nclass Wallet extends React.Component<any, any> {\n  static contextType = AppContext;\n\n  componentDidMount() {\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n  }\n\n  getInnerWidth() {\n    return document.getElementById('main-content-inner')?.offsetWidth;\n  }\n\n  // Make sure text doesn't overflow on smaller screens. We need to trim larger strings\n  ensureTrimmedText(text) {\n    if (!this.context.isMobile) return text;\n    const maxChars = this.getInnerWidth() / 22;\n    if (text.length > maxChars) return `${text.slice(0, maxChars)}...`\n    return text;\n  }\n\n  // Render a transaction in a list\n  renderListItem(item) {\n    // Label to view transaction on explorer\n    const label = (\n      //@ts-expect-error\n      <div align={this.context.isMobile ? \"left\" : \"right\"}>\n        {item.confirmed ? (\n          <p>\n            {item.incoming ? 'Received ' : 'Sent '}\n            {getDateDiffStr(item.timestamp)} ago\n          </p>) : null}\n        <Button size=\"small\" \n                href={`${constants.BTC_TX_BASE_URL}/${item.id}`} \n                target=\"_blank\"\n          >View</Button>\n      </div>\n    );\n    if (item.value === 0) {\n      // This is an internal transaction, meaning all spenders and recipients\n      // are addresses we control\n      return (\n        <List.Item key={item.hash}>\n          <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                          title='Internal Transaction'\n                          description='This transaction sender and recipient are your addresses.'\n          />\n          {label}\n        </List.Item>\n      )\n    }\n    // Information about the transaction\n    const title = `${item.value / Math.pow(10, 8)} BTC`\n    const subtitle = `\\t${this.ensureTrimmedText(item.recipient)}`;\n    const itemMeta = (\n      <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                      title={item.confirmed ? (\n                        <p>{`${title}`}</p>\n                      ) : (\n                        <p><i>{`${title}`}</i></p>\n                      )}\n                      description={item.confirmed ? (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          {`${subtitle}`}\n                        </p>\n                      ) : (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          <i>{`${subtitle}`}</i>\n                        </p>\n                      )}\n      />\n    )\n    if (this.context.isMobile) {\n      return (\n        <List.Item key={item.hash}>\n          <Row justify='center'>{itemMeta}</Row>\n          <Row justify='center'>{label}</Row>\n        </List.Item>\n      )    \n    } else {\n      return(\n        <List.Item key={item.hash}>\n          {itemMeta}\n          {label}\n        </List.Item>\n      )\n    }\n  }\n\n  renderLastUpdatedTag() {\n    if (!this.props.session)\n      return;\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return (\n        <Tag color={'red'}>Never</Tag>\n      )\n    }\n    //@ts-expect-error\n    const elapsedSec = Math.floor((new Date() - lastUpdated) / 1000);\n    let elapsed, timeType, color;\n    if (elapsedSec < 60) {\n      // Just display that it was updated \"seconds\" ago if we're under a minute\n      elapsed = '';\n      timeType = 'seconds';\n      color = 'green';\n    } else if (elapsedSec < 3600) {\n      // A couple minutes is fine, but more than 10 and there's probably a connectivity\n      // problem -- display orange warning tag\n      elapsed = Math.floor(elapsedSec / 60);\n      timeType = elapsed === 1 ? 'min' : 'mins';\n      color = 'green'\n    } else if (elapsedSec < 172800) {\n      // Less than a 2 days we display hours \n      elapsed = Math.floor(elapsedSec / 3600);\n      timeType = elapsed === 1 ? 'hour' : 'hours';\n      color = 'orange';\n    } else { \n      // Otherwise display days\n      elapsed = Math.floor(elapsedSec / 86400);\n      timeType = 'days';\n      color = 'red';\n    }\n    return (\n      <Tag color={color}>{`${elapsed} ${timeType} ago`}</Tag>\n    )\n  }\n\n  renderList() {\n    const txs = {\n      confirmed: this.props.session.getBtcTxs(),\n      pending: this.props.session.getBtcTxs(false),\n    }\n    return (\n      <div>\n        {txs.pending.length > 0 ? (\n          <Card title={<p><ClockCircleOutlined/> Pending</p>} \n                bordered={true}\n                style={{ margin: '0 0 30px 0'}}>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={txs.pending}\n              renderItem={item => (\n                this.renderListItem(item)\n              )}\n            />\n          </Card>\n        ): null}\n        <Card title=\"Transactions\" bordered={true}>\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={txs.confirmed}\n            renderItem={item => (\n              this.renderListItem(item)\n            )}\n          />\n        </Card>\n      </div>\n    )\n  }\n\n  renderHeader() {\n    const btcBalance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    const btcPrice = this.props.session.btcPrice;\n    return (\n      <div>\n        <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            <Statistic title=\"Balance\" value={`${btcBalance} BTC`} />\n        </Row>\n        <Row justify='center'>\n          <Statistic title=\"USD Value\" value={btcBalance * btcPrice} precision={2} />\n        </Row>\n      </div>\n    )\n  }\n\n  renderPages() {\n    const page = this.props.session.getPage();\n    const txs = this.props.session.getBtcTxs();\n    return (\n      <center style={{margin: \"20px 0 0 0\"}}>\n        {page > 1 ? (\n          <Button onClick={() => {this.props.pageTurnCb(page-1)}}>\n            <CaretLeftOutlined/>\n          </Button>\n        ) : null}\n        {txs.length >= constants.PAGE_SIZE ? (\n          <Button onClick={() => { this.props.pageTurnCb(page+1)}}>\n            <CaretRightOutlined/>\n          </Button>\n        ): null}\n      </center>\n    )\n  }\n\n  renderStartCard() {\n    return (\n      <Card title={`BTC Wallet`} bordered={true}>\n        <center>\n          <p>You have not loaded any addresses yet.</p>\n          <Button size=\"large\" \n                  type=\"primary\" \n                  ghost \n                  onClick={() => {this.props.refreshData()}}\n          >\n            Start\n          </Button>\n        </center>\n      </Card>\n    )\n  }\n\n  renderContent() {\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return this.renderStartCard();\n    }\n    return (\n      <div>\n        <Card title={`BTC Wallet`} bordered={true}>\n          <Row justify='center'>\n            Last Update&nbsp;{this.renderLastUpdatedTag()}\n            <Button size=\"small\" \n                    type=\"primary\" \n                    ghost \n                    onClick={() => {this.props.refreshData()}}\n            >\n              Refresh <ReloadOutlined/>\n            </Button>\n          </Row>\n          <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            {this.renderHeader()}\n          </Row>\n        </Card>\n        <Divider/>\n        <div>\n          {this.renderList()}\n          {this.renderPages()}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderContent()}\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Wallet\n\n// Get a human readable, string representation of the difference\n// between two dates\nfunction getDateDiffStr(ts) {\n  const then = new Date(ts);\n  const now = new Date();\n  const min = 1000 * 60;\n  const hour = min * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = week * 4;\n  const year = month * 12;\n\n  //@ts-expect-error\n  const diff = now - then;\n\n  if (diff / min < 1) {\n    return 'seconds';\n  } else if (diff / hour < 1) {\n    return `${Math.floor(diff/min)} minutes`;\n  } else if (diff / day < 1) {\n    return `${Math.floor(diff/hour)} hours`;\n  } else if (diff / week < 1) {\n    return `${Math.floor(diff/day)} days`;\n  } else if (diff / month < 1) {\n    return `${Math.floor(diff/week)} weeks`;\n  } else if (diff / year < 1) {\n    return `${Math.floor(diff/month)} months`;\n  } else {\n    return `${Math.floor(diff/year)} years`\n  }\n\n}","const Buffer = require('buffer/').Buffer\nconst { validateBtcAddr } = require('./helpers');\n\nexport const allChecks = {\n  'ETH': {\n    full: checkEth,\n    recipient: checkEthRecipient,\n    value: checkNumericValue,\n  },\n  'BTC': {\n    full: checkBtc,\n    recipient: validateBtcAddr,\n    value: checkNumericValue,\n  }\n}\n\n// Checks for Ethereum transfers (ETH or token)\nfunction checkEth(data) {\n  return fullCheck(data, checkEthRecipient);\n}\n\n// Checks for Bitcoin transfers\nfunction checkBtc(data) {\n  return fullCheck(data, validateBtcAddr);\n}\n\n// Perform a check on the recipient and value\n// @returns bool -- true if params are both valid\nfunction fullCheck(data, recipientCheck) {\n  return true === recipientCheck(data.recipient) && true === checkNumericValue(data.value);\n} \n\nfunction checkEthRecipient(recipient) {\n  if (recipient === '') return null;\n  try {\n    // Make sure there is a 0x prefix\n    const isPrefixed = recipient.slice(0, 2) === '0x';\n    // Check that the address contains exactly 20 hex bytes.\n    // If any of the data is non-hex, the length will be shorter\n    const correctLength = Buffer.from(recipient.slice(2), 'hex').length === 20;\n    return isPrefixed === true && correctLength === true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction checkNumericValue(value) {\n  if (value === '') return false;\n  try {\n    const num = Number(value);\n    return !isNaN(num) && num >= 0;\n  } catch (e) {\n    return false;\n  }\n}\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Row, Input, InputNumber, Empty, Statistic, notification } from 'antd'\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { allChecks } from '../../util/sendChecks';\nimport { constants, buildBtcTxReq, getBtcNumTxBytes } from '../../util/helpers'\nimport '../styles.css'\nimport { AppContext } from '../../store/AppContext';\nconst RECIPIENT_ID = \"recipient\";\nconst VALUE_ID = \"value\";\n\nclass Send extends React.Component<any, any> {\n  static contextType = AppContext;\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipient: '',\n      value: null,\n      recipientCheck: null,\n      valueCheck: null,\n      error: null,\n      isLoading: false,\n      txHash: null,\n      btcFeeRate: constants.BTC_DEFAULT_FEE_RATE,\n      ensResolvedAddress: null,\n    }\n\n    this.handleENSResolution = this.handleENSResolution.bind(this);\n    this.renderBanner = this.renderBanner.bind(this);\n    this.renderSubmitButton = this.renderSubmitButton.bind(this);\n    this.renderValueLabel = this.renderValueLabel.bind(this);\n    this.submit = this.submit.bind(this);\n    this.buildBtcRequest = this.buildBtcRequest.bind(this);\n    this.updateBtcFeeRate = this.updateBtcFeeRate.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://blockstream.info/api/fee-estimates')\n    .then((response) => response.json())\n    .then((resp) => {\n      if (resp['1']) { // Expected confirmation in 1 block\n        this.setState({ btcFeeRate: Math.ceil(Number(resp['1'])) })\n      }\n      if (this.props.session) {\n        this.props.session.getBtcWalletData()\n      }\n    })\n    .catch((err) => {\n      console.error(`Error from fetching fee rates: ${err.toString()}`)\n    })\n  }\n\n  //========================================================\n  // STATE MANAGERS\n  //========================================================\n\n  handleENSResolution(err, address) {\n    if (err || address === null)\n      return this.setState({ recipientCheck: false, ensResolvedAddress: null })\n    // If we got an address, stash that under \"ensResolvedAddress\" so as to not\n    // overwrite the text in the display component.\n    return this.setState({ recipientCheck: true, ensResolvedAddress: address })\n  }\n\n  updateRecipient(evt) {\n    const val = evt.target.value;\n    const check = allChecks.BTC.recipient(val);\n    this.setState({ \n      recipient: val,\n      ensResolvedAddress: null,\n      recipientCheck: check, \n    });\n  }\n\n  checkValue(val) {\n    // Verify that it is smaller than the balance\n    const balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    if (val === '' || val === null || val === undefined)\n      return null;\n    return (Number(balance) >= Number(val));\n  }\n\n  updateValue(evt) {\n    let val = evt.target.value;\n    let numberVal = Number(val);\n    const isZeroPrefixed = val[0] === '0';\n    const isLessThanOne = isZeroPrefixed && val[1] === '.';\n    // Only update state if the value can be converted to a number!\n    if (val === '0') {\n      // Plain zero is fine\n      ;\n    } else if (!isNaN(numberVal)) {\n      // We want to save the string, as it may contain a period\n      // which is necessary for forming decimal numbers\n      // Because we will be saving the string and not the number,\n      // we should make sure we strip out leading zeros for numbers\n      // larger than zero (i.e. 0.4 is good, 01.4 is not)\n      if (isZeroPrefixed && !isLessThanOne) val = val.slice(1);\n    } else if (val === '.') {\n      // If the user is trying to make a decimal value <1, prefix\n      // with a 0\n      val = '0' + val;\n    } else {\n      return;\n    }\n    this.setState({ \n      value: val,\n      valueCheck: this.checkValue(val) \n    });\n  }\n\n  updateBtcFeeRate(value) {\n    this.setState({ btcFeeRate: value })\n  }\n\n  //========================================================\n  // TRANSACTION-RELATED BUILDERS AND HOOKS\n  //========================================================\n  buildBtcRequest() {\n    const req = buildBtcTxReq(this.state.recipient, \n                              this.state.value,\n                              this.props.session.btcUtxos, \n                              this.props.session.addresses['BTC'],  \n                              this.props.session.addresses['BTC_CHANGE'],\n                              this.state.btcFeeRate,\n                              this.state.value === this.calculateMaxValue());\n    if (req.error) {\n      this.setState({ error: req.error });\n      return null;\n    } else if (!req.data) {\n      this.setState({ error: 'Invalid response when building BTC transaction request. '});\n      return null;\n    }\n    return req;\n  }\n\n  submit() {\n    const req = this.buildBtcRequest();\n    if (req) {\n      notification.open({\n        message: \"Waiting for signature...\",\n        key: 'signNotification',\n        description: `We have sent the transaction to your Lattice for signing.\n                      After approval, the transaction will be broadcast.`,\n        duration: 0,\n      });\n      this.setState({ isLoading: true });\n      this.props.session.sign(req, (err, txHash) => {\n        notification.close('signNotification');\n        if (err) {\n          // Display an error banner\n          this.setState({ \n            error: err, \n            isLoading: false, \n            txHash: null \n          })\n        } else {\n          // Start watching this new tx hash for confirmation\n          this.setState({ \n            recipient: '',\n            recipientCheck: null,\n            value: null,\n            valueCheck: null,\n            txHash, \n            error: null, \n            isLoading: false \n          })\n        }\n      })\n    }\n  }\n\n  //========================================================\n  // HELPERS\n  //========================================================\n\n  getUrl() {\n    return `${constants.BTC_TX_BASE_URL}/${this.state.txHash}`;\n  }\n\n  //========================================================\n  // RENDERERS\n  //========================================================\n\n  renderValueLabelTitle() {\n    return (\n      <p style={{textAlign: 'left'}}>\n        <b>Value</b>\n        <Button type=\"link\"\n                onClick={() => { \n                  this.updateValue({ \n                    target: { \n                      value: this.calculateMaxValue(),\n                    } \n                  }) \n                }}>\n          Max\n        </Button>\n        {this.renderIcon(VALUE_ID)}\n      </p>\n    )\n  }\n\n  renderValueLabel() {\n    const input = (\n      <Input type=\"text\"\n              id={VALUE_ID} \n              value={this.state.value} \n              onChange={this.updateValue.bind(this)}\n      />\n    );\n    return (\n      <Row justify='center'>\n        {this.renderValueLabelTitle()}\n        {input}\n      </Row>\n    );\n  }\n\n  renderRecipientLabel() {\n    return (          \n      <Row justify='center'>  \n        <p style={{textAlign:'left'}}>\n          <b>Recipient</b>\n          &nbsp;&nbsp;&nbsp;{this.renderIcon(RECIPIENT_ID)}\n        </p>\n        <Input type=\"text\" \n                id={RECIPIENT_ID} \n                value={this.state.recipient} \n                onChange={this.updateRecipient.bind(this)}\n        />\n      </Row>\n    )\n  }\n\n  renderIcon(id) {\n    const name = `${id}Check`;\n    const isValid = this.state[name];\n    if (isValid === true) {\n      return (<CheckCircleOutlined style={{color: 'green'}}/>)\n    } else if (isValid === false) {\n      return (<CloseCircleOutlined style={{color: 'red'}}/>)\n    } else {\n      return;\n    }\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Failed to Send Transaction\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.txHash) {\n      const desc = this.context.isMobile ? (\n        <p>Transaction signed and broadcast successfully.&nbsp;\n        <a className='lattice-a' target='_blank' rel='noopener noreferrer' href={this.getUrl()}>View</a></p>\n      ) : (\n        <p>\n          Your transaction was signed and broadcast successfully. \n          Please return to your History tab and refresh to see status.\n        </p>\n      )\n      return (\n        <Alert\n          type=\"success\"\n          message=\"Success\"\n          description={desc}\n        />\n      )\n    } else {\n      return;\n    }\n  }\n\n  renderExtra() {\n    return (\n      <div>\n        <Row justify='center'>\n          <b><p>Fee (sat/byte):</p></b>\n        </Row>\n        <Row justify='center'>        \n          <InputNumber\n            min={1}\n            max={100}\n            onChange={this.updateBtcFeeRate}\n            value={this.state.btcFeeRate}\n          />\n        </Row>\n      </div>\n    )\n  }\n\n  calculateMaxValue() {\n    const balance = this.props.session.getBtcBalance();\n    const utxos = this.props.session.getBtcUtxos();\n    // To spend all BTC, get the size of all UTXOs and calculate the fee required\n    const txBytes = getBtcNumTxBytes(utxos.length);\n    const feeSat = Math.floor(this.state.btcFeeRate * txBytes);\n    // @ts-expect-error\n    return Math.max(((balance - feeSat) / constants.SATS_TO_BTC).toFixed(8), 0);\n  }\n\n  renderSubmitButton() {\n    // If all checks have passed, display the button\n    const isValidReq = (\n      (true === this.state.valueCheck) &&\n      (allChecks.BTC.full(this.state) || this.state.ensResolvedAddress !== null)\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                loading>\n          Waiting...\n        </Button>\n      )\n    } else if (isValidReq) {\n      return (\n        <Button type=\"primary\" \n                onClick={this.submit} \n                style={{ margin: '30px 0 0 0'}}>\n          Send\n        </Button>\n      )\n    } else {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                disabled>\n          Send\n        </Button>\n      )\n    }\n  }\n\n  renderBalance() {\n    let balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    return (\n      <Row justify='center' style={{margin: \"0 0 20px 0\"}}>\n        <Statistic title=\"Balance\" value={`${balance} BTC`} />\n      </Row>\n    )\n  }\n\n  renderCard() {\n    const hasAddressesSlot = this.props.session.addresses.BTC;\n    const hasAddresses =  hasAddressesSlot ? \n                          this.props.session.addresses.BTC.length > 0 : \n                          false;\n    if (hasAddresses) {\n      return (\n        <div>\n          {this.renderBalance()}\n          <div>\n            {this.renderRecipientLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderValueLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderExtra()}\n          </div>\n          {this.renderSubmitButton()}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found from your Lattice. If you have your wallet setup, please try logging out and reconnecting.</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={'Send BTC'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />    )\n  }\n}\n\nexport default Send\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Row, Input, Empty } from 'antd'\nimport { CopyOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { validateBtcAddr } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\nconst QRCode = require('qrcode.react');\nconst { Search, TextArea } = Input;\nconst SEARCH_ID = \"address-data\";\n\nclass Receive extends React.Component<any, any> {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: null,\n      windowWidth: document.getElementById('main-content-inner')?.offsetWidth,\n    }\n\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateDisplayAddress();\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  document.getElementById('main-content-inner')?.offsetWidth });\n  }\n\n  updateDisplayAddress() {\n    const displayAddr = this.props.session.getBtcDisplayAddress();\n    if (displayAddr) this.setState({ address:  displayAddr });\n  }\n\n  copyAddress() {\n    const copy = document.getElementById(SEARCH_ID);\n    //@ts-expect-error\n    copy.select();\n    document.execCommand(\"copy\")\n  }\n\n\n  renderAddrBox() {\n    if (this.context.isMobile) {\n      return (\n        <div>\n          <TextArea id={SEARCH_ID}\n                    value={this.state.address}\n                    autoSize={{minRows: 1, maxRows: 3}}\n                    style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}/>\n          <Button type=\"primary\"\n                  style={{margin: \"20px 0 0 0\"}}\n                  onClick={this.copyAddress}>\n            Copy <CopyOutlined/>\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n         <Search type=\"text\" \n                  id={SEARCH_ID} \n                  value={this.state.address} \n                  enterButton={<CopyOutlined/>}\n                  onSearch={this.copyAddress}\n                  style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}\n          />\n      );\n    }\n  }\n\n  renderCard() {\n    if (this.state.address) {\n      // Sanity check on BTC address checksum\n      if (!validateBtcAddr(this.state.address))\n        return;\n      const cardW = document.getElementById(\"receive-card\")?.offsetWidth;\n      const w = Math.min(300, 0.8 * cardW);\n      return (\n        <div>\n          <Row justify='center'>\n            <QRCode value={this.state.address} \n                    size={w}\n                    style={{margin: \"30px 0 0 0\"}}\n            />\n          </Row>\n          <Row justify='center'>\n            {this.renderAddrBox()}\n          </Row>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Receive BTC'} bordered={true} id=\"receive-card\">\n          <center>\n            {this.renderCard()}\n          </center>\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Receive","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Main } from './components'\nimport { AppContextProvider } from \"./store/AppContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Main />\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","\nimport localStorage from \"./localStorage\";\n\nconst bs58check = require('bs58check');\nconst bech32 = require('bech32').bech32;\nconst HARDENED_OFFSET = 0x80000000;\nexport const constants = {\n    DEFAULT_APP_NAME: 'Lattice Manager',\n    ENV: process.env.REACT_APP_ENV || 'prod',\n    BASE_SIGNING_URL: process.env.REACT_APP_BASE_SIGNING_URL || 'https://signing.gridpl.us',\n    BTC_PROD_DATA_API: 'https://blockchain.info',\n    BTC_BROADCAST_ENDPOINT: 'https://blockstream.info/api/tx',\n    HARDENED_OFFSET,\n    ASYNC_SDK_TIMEOUT: 60000,\n    ADDRESSES_PER_PAGE: 10,\n    CONTRACTS_PER_PAGE: 10,\n    SHORT_TIMEOUT: 30000,\n    BTC_COIN: parseInt(process.env.REACT_APP_BTC_COIN) || HARDENED_OFFSET,\n    SATS_TO_BTC: Math.pow(10, 8),\n    BTC_MAIN_GAP_LIMIT: 20,\n    BTC_CHANGE_GAP_LIMIT: 1,\n    BTC_ADDR_BLOCK_LEN: 10,\n    BTC_CHANGE_ADDR_BLOCK_LEN: 1,\n    BTC_DEFAULT_FEE_RATE: process.env.REACT_APP_BTC_DEFAULT_FEE_RATE || 10, // 10 sat/byte\n    BTC_TX_BASE_URL: process.env.REACT_APP_BTC_TX_BASE_URL || 'https://www.blockchain.com/btc/tx',\n    PAGE_SIZE: 20, // 20 transactions per requested page, per `gridplus-cloud-services`\n    CONTRACT_PAGE_SIZE: 6,\n    LOST_PAIRING_ERR: \"NOT_PAIRED\",\n    LOST_PAIRING_MSG: \"Cannot find Lattice connection. Please re-connect.\",\n    BTC_TESTNET: process.env.REACT_APP_BTC_TESTNET || null,\n    KEYRING_LOGOUT_MS: parseInt(process.env.KEYRING_LOGOUT_MS) || 2592000000, // default 30 days\n    KEYRING_DATA_PATH: 'gridplus_web_wallet_keyring_logins', // item in localStorage\n    ABI_PACK_URL: \"https://gridplus.github.io/abi-pack-framework\",\n    LATTICE_CERT_SIGNER: process.env.REACT_APP_LATTICE_CERT_SIGNER || '0477816e8e83bb17c4309cc2e5aa134c573a5943154940095a423149f7cc0384ad52d33f1b4cd89c967bf211c039202df3a7899cb7543de4738c96a81cfde4b117',\n    CONTRACTS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/use-ethereum-smart-contract-abi-function-definitions',\n    TAGS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/address-tags',\n    PERMISSIONS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/how-to-set-and-use-spending-limits',\n    BTC_WALLET_STORAGE_KEY: 'btc_wallet',\n    BTC_PURPOSE_NONE: -1,\n    BTC_PURPOSE_NONE_STR: 'Hide BTC Wallet',\n    BTC_PURPOSE_LEGACY: HARDENED_OFFSET + 44,\n    BTC_PURPOSE_LEGACY_STR: 'Legacy (1)',\n    BTC_PURPOSE_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n    BTC_PURPOSE_WRAPPED_SEGWIT_STR: 'Wrapped Segwit (3)',\n    BTC_PURPOSE_SEGWIT: HARDENED_OFFSET + 84,\n    BTC_PURPOSE_SEGWIT_STR: 'Segwit (bc1)',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'bc',\n    BTC_LEGACY_VERSION: 0x00,\n    BTC_WRAPPED_SEGWIT_VERSION: 0x05,\n    RATE_LIMIT: 1000, // 1s between requests\n    GET_ABI_URL: 'https://api.etherscan.io/api?module=contract&action=getabi&address=',\n    DEFAULT_CONTRACT_NETWORK: 'ethereum',\n    CONTRACT_NETWORKS: {\n        ethereum: {\n          label: \"Ethereum\",\n          url: \"https://etherscan.io\",\n          baseUrl: \"https://api.etherscan.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        arbitrum: {\n            label: \"Arbitrum\",\n            url: \"https://arbiscan.io\",\n            baseUrl: \"https://api.arbiscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        polygon: {\n          label: \"Polygon\",\n          url: \"https://polygonscan.com\",\n          baseUrl: \"https://api.polygonscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        optimism: {\n            label: \"Optimism\",\n            url: \"https://optimistic.etherscan.io\",\n            baseUrl: \"https://api-optimistic.etherscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        binance: {\n          label: \"Binance\",\n          url: \"https://bscscan.com/\",\n          baseUrl: \"https://api.bscscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        avalanche: {\n          label: \"Avalanche\",\n          url: \"https://snowtrace.io\",\n          baseUrl: \"https://api.snowtrace.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n      },\n};\n\nconst devConstants = {\n    BTC_DEV_DATA_API: 'https://blockstream.info/testnet/api',\n    BTC_BROADCAST_ENDPOINT : 'https://blockstream.info/testnet/api/tx',\n    BASE_SIGNING_URL: 'https://signing.staging-gridpl.us',\n    // Deprecating because using two different stores was very tricky and we don't\n    // need the second one anyway\n    // ROOT_STORE: 'gridplus-dev', \n    BTC_COIN: HARDENED_OFFSET + 1,\n    BTC_DEFAULT_FEE_RATE: 10,\n    BTC_TX_BASE_URL: 'https://www.blockchain.com/btc-testnet/tx',\n    BTC_TESTNET: 'Testnet3',\n    LATTICE_CERT_SIGNER: '045cfdf77a00b4b6b4a5b8bb26b5497dbc7a4d01cbefd7aaeaf5f6f8f8865976e7941ab0ec1651209c444009fd48d925a17de5040ba47eaf3f5b51720dd40b2f9d',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'tb',\n    BTC_LEGACY_VERSION: 0x6F,\n    BTC_WRAPPED_SEGWIT_VERSION: 0xC4,\n}\n\n// NEW: If you have checked the \"Using Dev Lattice\" box in settings, the constants\n// are swapped out here\nconst localSettings = localStorage.getSettings();\nif (localSettings.devLattice) {\n    Object.keys(devConstants).forEach((key) => {\n        constants[key] = devConstants[key];\n    })\n}\n\n\n//--------------------------------------------\n// CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\nfunction fetchJSON(url, opts, cb) {\n    fetch(url, opts)\n    .then((response) => response.json())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n\n//====== UTXOS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcUtxos(addresses, cb, utxos=[], offset=0) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, utxos);\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_UTOXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    let url = `${constants.BTC_PROD_DATA_API}/unspent?active=`;\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    url = `${url}&limit=${MAX_UTOXS_RET}&confirmations=1`;\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add confirmed UTXOs\n        data.unspent_outputs.forEach((u) => {\n            if (u.confirmations > 0) {\n                utxos.push({\n                    id: u.tx_hash_big_endian,\n                    vout: u.tx_output_n,\n                    value: u.value,\n                    address: _blockchainDotComScriptToAddr(u.script),\n                })\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (data.unspent_outputs.length >= MAX_UTOXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcUtxos(addresses, cb, utxos, offset+MAX_UTOXS_RET);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcUtxos(addresses, cb, utxos, 0);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcUtxosTestnet(addresses, cb, utxos=[]) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    const url = `${constants.BTC_DEV_DATA_API}/address/${address}/utxo`;\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        data.forEach((u) => {\n            // Add confirmed UTXOs\n            if (u.status.confirmed) {\n                utxos.push({\n                    id: u.txid,\n                    vout: u.vout,\n                    value: u.value,\n                    address,\n                })\n            }\n        })\n        if (addresses.length === 0) {\n            return cb(null, utxos);\n        }\n        setTimeout(() => {\n            _fetchBtcUtxosTestnet(addresses, cb, utxos)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcUtxos(addresses, cb) {\n    if (!addresses)\n        return cb('Cannot fetch UTXOs - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcUtxosTestnet : _fetchBtcUtxos;\n    f(addrsCopy, cb);\n}\n//====== END UTXOS ==================\n\n//====== TXS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcTxs(addresses, txs, cb, offset=0, isFirstCall=true) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, txs);\n    }\n\n    let url = `${constants.BTC_PROD_DATA_API}/multiaddr?active=`;\n    const isSingleAddr = isFirstCall && addresses.length === 1;\n    if (isSingleAddr) {\n        // Edge case when getting transactions from the blockchain.com API with\n        // only one address -- it appears when you call multiaddr with only one\n        // address you get only the output(s) associated with that one address,\n        // but if you call with multiple addresses that is no longer a problem.\n        // See: https://www.blockchain.com/btc/tx/ffc83686c911bcf7aa31a3d3ca014bae3b1044b2ec280c877758aa6b384cde0b\n        // 1. https://blockchain.info/rawaddr/3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        // 2. https://blockchain.info/multiaddr?active=3C8BhX4CGeyH3nXrYqRL89jvpakTPW1z8k|3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        url = `${constants.BTC_PROD_DATA_API}/rawaddr/`\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_TXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    if (isSingleAddr) {\n        url = `${url}?limit=${MAX_TXS_RET}`;\n    } else {\n        url = `${url}&n=${MAX_TXS_RET}`;\n    }\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add the new txs\n        let txsAdded = 0;\n        data.txs.forEach((t) => {\n            const ftx = {\n                timestamp: t.time * 1000,\n                confirmed: !!t.block_index,\n                id: t.hash,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],\n            };\n            t.inputs.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prev_out.addr,\n                    value: input.prev_out.value,\n                })\n            })\n            t.out.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.addr,\n                    value: output.value,\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n\n            // Only add the transaction if its hash is not already in the array.\n            // NOTE: There may be an edge case. I noticed in one case we got\n            // a result saying `vout_sz=2` but which only had one output in its array...\n            let shouldInclude = txs.every(_tx => _tx.id !== ftx.id);\n            if (shouldInclude) {\n                txs.push(ftx);\n                txsAdded += 1;\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (txsAdded >= MAX_TXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcTxs(addresses, txs, cb, offset+MAX_TXS_RET, false);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcTxs(addresses, txs, cb, 0, false);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcTxsTestnet(addresses, txs, cb, lastSeenId=null) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    let url = `${constants.BTC_DEV_DATA_API}/address/${address}/txs`;\n    if (lastSeenId) {\n        url = `${url}/chain/${lastSeenId}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        const formattedTxs: any[] = [];\n        let confirmedCount = 0;\n        data.forEach((t) => {\n            const ftx = {\n                timestamp: t.status.block_time * 1000,\n                confirmed: t.status.confirmed,\n                id: t.txid,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],                \n            }\n            t.vin.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prevout.scriptpubkey_address,\n                    value: input.prevout.value\n                })\n            })\n            t.vout.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.scriptpubkey_address,\n                    value: output.value\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n            formattedTxs.push(ftx)\n            if (ftx.confirmed) {\n                confirmedCount += 1;\n            }\n\n        })\n        txs = txs.concat(formattedTxs)\n        if (confirmedCount >= 25) {\n            // Blockstream only returns up to 25 confirmed transactions per request\n            // https://github.com/Blockstream/esplora/blob/master/API.md#get-addressaddresstxs\n            // We need to re-request with the last tx\n            addresses.push(address)\n            return _fetchBtcTxsTestnet(addresses, txs, cb, txs[confirmedCount-1].id)\n        }\n        if (addresses.length === 0) {\n            return cb(null, txs);\n        }\n        setTimeout(() => {\n            _fetchBtcTxsTestnet(addresses, txs, cb)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcTxs(addresses, txs, cb) {\n    if (!addresses)\n        return cb('Cannot fetch transactions - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcTxsTestnet : _fetchBtcTxs;\n    f(addrsCopy, txs, cb);\n}\n//====== END TXS ==================\n\nexport function fetchBtcPrice(cb) {\n    const url = 'https://api.blockchain.com/v3/exchange/tickers/BTC-USD'\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        else if (!data || !data.last_trade_price)\n            return cb('Invalid price data returned');\n        return cb(null, data.last_trade_price)\n    })\n}\n\nexport function broadcastBtcTx(rawTx, cb) {\n    const opts = {\n        method: 'POST',\n        body: rawTx\n    };\n    fetch(constants.BTC_BROADCAST_ENDPOINT, opts)\n    .then((response) => response.text())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n//--------------------------------------------\n// END CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\n\n//--------------------------------------------\n// OTHER HELPERS\n//--------------------------------------------\nexport function harden(x) {\n  return x + HARDENED_OFFSET;\n}\n\n// Determine how many inputs (utxos) need to be included in a transaction\n// given the desired value and fee rate\n// Returns the number of inputs to include or -1 if there isn't enough\n// value in the inputs provided to cover value + fee\nfunction _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx=0, currentValue=0) {\n    if (inputIdx >= utxos.length) {\n        return -1; // indicates error\n    }\n    currentValue += utxos[inputIdx].value;\n    const numInputs = inputIdx + 1;\n    const numBytes = getBtcNumTxBytes(numInputs);\n    const fee = Math.floor(feeRate * numBytes);\n    if (currentValue >= (value + fee)) {\n        return numInputs;\n    }\n    inputIdx = numInputs;\n    return _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx, currentValue);\n}\n\n// Convert a script from blockchain.com's API into an address\n// For some reason, they only return the script in the UTXO object.\n// We need to convert the script to a an address.\n// Since we know the purpose, we know the format of the address,\n// so we can slice out the pubkeyhash from the script and convert.\nfunction _blockchainDotComScriptToAddr(_scriptStr) {\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        const bech32Prefix = constants.BTC_SEGWIT_NATIVE_V0_PREFIX;\n        const bech32Version = 0; // Only v0 currently supported\n        // Script: |OP_0|0x20|pubkeyhash|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(-20)\n        const words = bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32.encode(bech32Prefix, words);\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n        const version = constants.BTC_WRAPPED_SEGWIT_VERSION;\n        // Script: |OP_HASH160|0x20|pubkeyhash|OP_EQUAL|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(2, 22);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        // Script: |OP_DUP|OP_HASH160|0x20|pubkeyhash|OP_EQUALVERIFY|OP_CHECKSIG|\n        const version = constants.BTC_LEGACY_VERSION;\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(3, 23);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    }\n}\n\nexport function getBtcPurpose() {\n    const localSettings = localStorage.getSettings();\n    return  localSettings.btcPurpose ? \n            localSettings.btcPurpose : \n            constants.BTC_PURPOSE_NONE;\n}\n\n// Calculate how many bytes will be in a transaction given purpose and input count\n// Calculations come from: https://github.com/jlopp/bitcoin-transaction-size-calculator/blob/master/index.html\n// Not a perfect calculation but pretty close\nexport function getBtcNumTxBytes(numInputs) {\n    let inputSize, outputSize, inputWitnessSize\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        inputSize = 148;\n        outputSize = 32;\n        inputWitnessSize = 0;\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        inputSize = 91;\n        outputSize = 32;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    } else {\n        inputSize = 67.75;\n        outputSize = 31;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    }\n    const vFactor = purpose === constants.BTC_PURPOSE_LEGACY ? 0 : 0.75;\n    // Hardcode 2 outputs to avoid complexity in app state\n    const txVBytes =  10 + vFactor + inputSize * numInputs + outputSize * 2;\n  return (3 * vFactor) + txVBytes + inputWitnessSize * numInputs;\n}\n\nexport function buildBtcTxReq (   recipient, \n                                    btcValue, \n                                    utxos, \n                                    addrs, \n                                    changeAddrs, \n                                    feeRate=constants.BTC_DEFAULT_FEE_RATE,\n                                    isFullSpend=false) {\n    if (!addrs || !changeAddrs || addrs.length < 1 || changeAddrs.length < 1) {\n        return { error: 'No addresses (or change addresses). Please wait to sync.' };\n    }\n    // Convert value to satoshis\n    const satValue = Math.round(Number(btcValue) * constants.SATS_TO_BTC);\n    const numInputs = isFullSpend ? utxos.length : _calcBtcTxNumInputs(utxos, satValue, feeRate);\n    if (numInputs < 0) {\n        return { error: 'Balance too low.' }\n    } else if (numInputs > utxos.length) {\n        return { error: 'Failed to build transaction.' }\n    }\n    const bytesUsed = getBtcNumTxBytes(numInputs);\n    //@ts-expect-error\n    const fee = Math.floor(bytesUsed * feeRate);\n    // Build the request inputs\n    const BASE_SIGNER_PATH = [getBtcPurpose(), constants.BTC_COIN, constants.HARDENED_OFFSET];\n    const prevOuts: any[] = [];\n    for (let i = 0; i < numInputs; i++) {\n        const utxo = utxos[i];\n        let signerPath = null;\n        if (addrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([0, addrs.indexOf(utxo.address)]);\n        } else if (changeAddrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([1, changeAddrs.indexOf(utxo.address)]);\n        } else {\n            return { error: 'Failed to find holder of UTXO. Syncing issue likely.' };\n        }\n        const prevOut = {\n            txHash: utxo.id,\n            value: utxo.value,\n            index: utxo.vout,\n            signerPath,\n        }\n        prevOuts.push(prevOut);\n    }\n    // Return the request (i.e. the whole object)\n    const req = {\n        prevOuts,\n        recipient,\n        value: satValue,\n        fee,\n        // Send change to the latest change address\n        changePath: BASE_SIGNER_PATH.concat([1, changeAddrs.length -1]),\n    };\n    return { currency: 'BTC', data: req }\n}\n\nexport function validateBtcAddr(addr) {\n    if (addr === '') return null;\n    try {\n        bs58check.decode(addr);\n        return true;\n    } catch (e) {\n        try {\n            bech32.decode(addr);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\nexport function toHexStr(bn) {\n    const s = bn.toString(16);\n    const base = s.length % 2 === 0 ? s : `0${s}`;\n    return `0x${base}`; \n}\n\n// Filter out any duplicate objects based on `keys`\nexport function filterUniqueObjects(objs, keys) {\n    const filtered: any[] = [];\n    // Copy the objects in reversed order so that newer instances\n    // are applied first\n    const objsCopy = JSON.parse(JSON.stringify(objs)).reverse()\n    objsCopy.forEach((obj) => {\n        let isDup = false;\n        filtered.forEach((fobj) => {\n            let matchedKeys = 0\n            keys.forEach((key) => {\n                if (fobj[key] === obj[key]) {\n                    matchedKeys += 1;\n                }\n            })\n            if (matchedKeys >= keys.length) {\n                isDup = true;\n            }\n        })\n        if (!isDup) {\n            filtered.push(obj);\n        }\n    })\n    // Return in the original order\n    return filtered.reverse();\n}\n//--------------------------------------------\n// END OTHER HELPERS\n//--------------------------------------------"],"sourceRoot":""}