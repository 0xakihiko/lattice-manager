{"version":3,"sources":["hooks/useRecords.tsx","components/main.tsx","util/localStorage.ts","store/AppContext.tsx","components/validateSig.tsx","util/storageSession.ts","sdk/sdkSession.ts","components/formatting/pageContent.tsx","components/NameEditor.tsx","components/connect.tsx","components/pair.tsx","util/contracts.ts","hooks/useRequestFailed.tsx","hooks/useContracts.tsx","util/addresses.ts","components/ContractCard.tsx","components/SelectNetwork.tsx","components/ContractCardList.tsx","components/ContractTable.tsx","components/SearchCard.tsx","components/ErrorAlert.tsx","components/ethContracts.tsx","hooks/useFeature.tsx","components/permissions.tsx","components/settings.tsx","hooks/useAddresses.tsx","components/AddAddressesButton.tsx","components/AddressTable.tsx","components/AddressTagsPage.tsx","components/landing.tsx","components/loading.tsx","components/error.tsx","components/btc-wallet/wallet.tsx","util/sendChecks.ts","components/btc-wallet/send.tsx","components/btc-wallet/receive.tsx","App.tsx","index.tsx","util/helpers.ts"],"names":["useRecords","defaultValue","id","useState","records","setRecords","addRecords","recordsToAdd","recordsInState","unionBy","removeRecords","recordsToRemove","differenceBy","resetRecords","Content","Layout","Footer","Sider","Main","props","keyringName","URLSearchParams","window","location","search","get","state","name","constants","DEFAULT_APP_NAME","menuItem","session","collapsed","error","msg","cb","loading","pendingMsg","waiting","onCancel","deviceID","password","lastUpdated","Date","windowWidth","innerWidth","walletIsExternal","openedByKeyring","hwCheck","handleMenuChange","bind","handleLogout","handleKeyringOpener","syncActiveWalletState","cancelConnect","connectSession","handlePair","fetchBtcData","setError","refreshWallets","handlePageTurn","retry","updateWidth","addEventListener","this","isMobile","setState","params","forceLogin","onload","prevKeyringLogin","localStorage","getKeyringItem","keyringTimeoutBoundary","getTime","KEYRING_LOGOUT_MS","lastLogin","connect","removeKeyringItem","getLogin","context","removeEventListener","updates","settings","getSettings","setSession","SDKSession","client","pair","unwait","isConnected","setKeyringItem","data","endpoint","BASE_SIGNING_URL","customEndpoint","opener","postMessage","JSON","stringify","close","enc","Buffer","from","toString","href","page","setPage","stateUpdate","key","err","disconnect","removeLogin","LOST_PAIRING_MSG","LOST_PAIRING_ERR","handleLostPairing","showLoading","wait","isPaired","setLogin","returnKeyringData","isRecursion","fetchBtcAddresses","newAddrCounts","console","regular","change","clearUtxos","opts","fetchBtcStateData","BTC_PURPOSE_NONE","getBtcPurpose","bypassRefresh","activeWallet","getActiveWallet","isExternal","external","shouldRefresh","slice","hideWallet","collapsedWidth","theme","mode","onSelect","Item","title","SubMenu","renderMenu","onClick","type","size","icon","style","backgroundColor","marginRight","className","target","rel","alt","src","height","extra","walletTag","ghost","push","renderHeaderText","retryCb","content","refreshData","pageTurnCb","hasActiveWallet","spin","renderMenuItem","submit","hide","submitCb","setKeyringName","errMsg","textAlign","ENV","color","margin","renderContent","minHeight","renderHeader","renderSidebar","renderErrorHeader","renderPage","renderFooter","React","Component","contextType","AppContext","ROOT_STORE","process","REACT_APP_ROOT_STORE","getItem","value","parse","e","setItem","removeItem","getRootStore","getRootStoreItem","setRootStoreItem","getKeyring","omit","getLoginId","setLoginId","removeLoginId","getLoginPassword","setLoginPassword","removeLoginPassword","getDeviceIndexedItem","deviceId","setDeviceIndexedItem","removeDeviceIndexedItem","setRootStore","removeRootStore","removeRootStoreItem","setSettings","setKeyring","renameKeyringItem","oldKey","newKey","item","getAddresses","setAddresses","removeAddresses","getContracts","setContracts","removeContracts","getContractPacks","setContractPacks","removeContractPacks","createContext","undefined","AppContextProvider","children","overrides","setIsMobile","isLoadingAddresses","setIsLoadingAddresses","addresses","addAddressesToState","removeAddressesFromState","resetAddressesInState","defaultContext","useEffect","windowIsMobileWidth","Provider","ReactCrypto","require","default","EC","ec","ValidateSig","signer","sig","curve","crypto","msgHash","createHash","update","digest","keyFromPublic","verify","decode","_certData","PREIMAGE_LEN","start","preimage","METADATA_LEN","pubkey","_sig","cert","getCert","_validate","LATTICE_CERT_SIGNER","validateCert","getPreimage","message","result","status","subTitle","validateSig","spanLength","spanOffset","span","offset","bordered","renderResult","StorageSession","device_id","pass","store","o","Array","isArray","newData","oldData","isObject","Object","keys","forEach","updateBranch","wallet_uid","k","stateUpdateHandler","storageSession","baseUrl","btcTxs","btcUtxos","lastFetchedBtcData","btcPrice","getBtcWalletData","saveBtcWalletData","lastUsed","_getLastUsedBtcAddrIdx","BTC","length","newPage","driedAddrs","hasBTCAddrs","hasBTCChangeAddrs","BTC_CHANGE","BTC_PURPOSE","allAddrs","rehydratedAddrs","walletData","BTC_WALLET_STORAGE_KEY","dryAddresses","uid","save","getWalletData","purposeSpecificData","rehydrateAddresses","pw","_triedLocal","tmpTimeout","SHORT_TIMEOUT","_genPrivKey","Client","privKey","timeout","skipRetryOnWrongWallet","warn","_tryConnect","log","ASYNC_SDK_TIMEOUT","prevWallet","resetStateData","req","sign","res","broadcastBtcTx","tx","txid","concat","confirmed","txs","t","balance","u","isChange","totalFetched","lastUsedIdx","currentAddrs","GAP_LIMIT","BTC_CHANGE_GAP_LIMIT","BTC_MAIN_GAP_LIMIT","targetIdx","maxToFetch","nToFetch","Math","min","BTC_ADDR_BLOCK_LEN","changeIdx","startPath","BTC_COIN","harden","n","skipCache","_getAddresses","utxos","addrs","fetchBtcPrice","fetchBtcTxs","_txs","fetchBtcUtxos","_utxos","floor","now","newTxs","filterUniqueObjects","_processBtcTxs","newUtxos","sort","a","b","setTimeout","coin","i","maxUsed","inputs","input","indexOf","addr","outputs","output","processedTxs","incoming","every","recipient","inputSum","internalOutputSum","externalOutputSum","fee","sortedTxs","timestamp","PageContent","justify","NameEditor","setName","isEditing","setIsEditing","isHovered","setIsHovered","Form","useForm","form","layout","onFinish","justifyContent","initialValue","rules","required","data-testid","resetFields","htmlType","EditOutlined","fontSize","onMouseEnter","onMouseLeave","Connect","isLoading","modal","showSettings","handleCancel","handleSubmit","renderMsg","showModal","focus","document","getElementById","getFieldDecorator","placeholder","ref","width","Password","onPressEnter","renderConnectButton","footer","visible","onOk","hideModal","inModal","renderSetupInfo","closable","spanWidth","tooLong","renderModal","LinkOutlined","DesktopOutlined","renderForm","Pair","code","toUpperCase","clientWidth","w","getBoxWidth","getBoxFontHeight","onChange","handleUpdate","transformContractDefinitionToContractRecord","def","category","header","numParam","transformLatticeContractToContractRecord","lc","useRequestFailed","retryFunction","setRetryFunction","setRetryFunctionWithReset","useCallback","func","CONTRACTS_PER_PAGE","ABI_PACK_URL","useContracts","useContext","contracts","addContractsToState","removeContractsFromState","resetContractsInState","contractPacks","setIsLoading","fetchContracts","fetched","retries","getAbiRecords","startIdx","then","_contracts","map","numFetched","numRemaining","catch","fetchContractPackIndex","fetch","json","fetchContractPack","pack","fname","fetchContractPacks","packs","Promise","all","finally","resetContractPacksInState","isEmpty","addContracts","addAbiDefs","contractsToRemove","sigs","c","removeAbiRecords","abbreviateHash","hash","ContractCard","isModalVisible","setIsModalVisible","isAdded","setIsAdded","url","CONTRACT_NETWORKS","metadata","network","defs","AddDefsButton","CheckCircleOutlined","disabled","PlusCircleOutlined","flex","maxWidth","actions","website","bodyStyle","desc","dataSource","rowKey","row","address","Column","dataIndex","render","Option","Select","SelectNetwork","setNetwork","minWidth","showSearch","DEFAULT_CONTRACT_NETWORK","optionFilterProp","filterOption","option","toLowerCase","entries","label","pageSize","CONTRACT_PAGE_SIZE","ContractCardList","filteredPacks","setFilteredPacks","paginatedPacks","setPaginatedPacks","filterPacksByNetwork","filter","pageZeroIndexed","chunkedList","chunk","direction","Group","compact","display","flexWrap","fuzzyFilteredPacks","fuzzysort","go","x","obj","fuzzyFilterPacksByName","SyncOutlined","gap","marginTop","current","defaultCurrent","defaultPageSize","total","ContractTable","setInput","filteredContracts","setFilteredContracts","selectedContracts","setSelectedContracts","intersectionBy","marginBottom","allowClear","danger","marginLeft","tableLayout","r","spinning","tip","indicator","LoadingOutlined","pagination","position","showSizeChanger","rowSelection","_","__","_selectedContracts","onSelectAll","selectedRowKeys","contract","expandable","expandedRowRender","record","columns","rowExpandable","defaultSortOrder","sorter","localeCompare","val","defaultNetwork","SearchCard","installing","setInstalling","success","setSuccess","setContract","setDefs","resetData","getNetwork","fetchContractData","test","apiRoute","parseAbi","throttledFetch","useMemo","throttle","SuccessAlert","ErrorAlert","NetworkLinkList","networks","last","pop","NetworkLink","Search","enterButton","onSearch","DownloadOutlined","description","action","TAB_KEYS","EthContracts","customDefs","setCustomDefs","customDefsStr","setCustomDefsStr","tab","setTab","CAN_VIEW_CONTRACTS","getFwVersion","fix","minor","major","fromEntries","_fix","_minor","_major","useFeature","onTabChange","renderSuccessAlert","buttonTxt","renderCustomCard","TextArea","autoSize","minRows","maxRows","parsed","newDefs","shouldAdd","param","TMP_REMOVE_ZERO_LEN_PARAMS","renderCard","activeKey","TabPane","renderTabs","f","CONTRACTS_HELP_LINK","QuestionCircleOutlined","BN","assets","ETH","decimals","Settings","keyring","getBtcPurposeName","reload","evt","devLattice","checked","updateCustomEndpoint","btcPurpose","parseInt","purpose","BTC_PURPOSE_NONE_STR","BTC_PURPOSE_LEGACY","BTC_PURPOSE_LEGACY_STR","BTC_PURPOSE_WRAPPED_SEGWIT","BTC_PURPOSE_WRAPPED_SEGWIT_STR","BTC_PURPOSE_SEGWIT","BTC_PURPOSE_SEGWIT_STR","handleChangeBitcoinVersionSetting","resetState","WarningOutlined","updateUseDevLattice","cols","text","removeKeyring","Panel","renderKeyringsSetting","renderCustomEndpointSetting","renderBitcoinVersionSetting","renderDevLatticeSetting","ADDRESSES_PER_PAGE","useAddresses","fetchAddresses","getKvRecords","addAddresses","addressesToAdd","addKvRecords","caseSensitive","selectedAddresses","ids","removeKvRecords","AddAddressesButton","PlusOutlined","maskClosable","destroyOnClose","validateFields","chain","keyBy","mapValues","onFinishFailed","onFieldsChange","autoComplete","preserve","List","fields","add","remove","restField","flexDirection","flexGrow","validateTrigger","max","validator","rule","some","reject","Error","resolve","addonBefore","MinusSquareFilled","block","AddressTable","filteredAddresses","setFilteredAddresses","setSelectedAddresses","_addresses","_selectedAddresses","AddressTagsPage","Landing","TAGS_HELP_LINK","TagsOutlined","AuditOutlined","maxHeight","Loading","keyPressListener","btnMsg","Wallet","offsetWidth","maxChars","getInnerWidth","align","ts","day","hour","diff","week","month","getDateDiffStr","BTC_TX_BASE_URL","Meta","avatar","pow","subtitle","ensureTrimmedText","itemMeta","ArrowDownOutlined","ArrowUpOutlined","elapsed","timeType","elapsedSec","getBtcTxs","pending","ClockCircleOutlined","itemLayout","renderItem","renderListItem","btcBalance","getBtcBalance","SATS_TO_BTC","precision","getPage","CaretLeftOutlined","PAGE_SIZE","CaretRightOutlined","renderLastUpdatedTag","ReloadOutlined","renderList","renderPages","renderStartCard","validateBtcAddr","allChecks","full","fullCheck","checkEthRecipient","checkNumericValue","recipientCheck","isPrefixed","correctLength","num","Number","isNaN","Send","valueCheck","txHash","btcFeeRate","BTC_DEFAULT_FEE_RATE","ensResolvedAddress","handleENSResolution","renderBanner","renderSubmitButton","renderValueLabel","buildBtcRequest","updateBtcFeeRate","response","resp","ceil","check","numberVal","isZeroPrefixed","isLessThanOne","checkValue","buildBtcTxReq","calculateMaxValue","notification","open","duration","updateValue","renderIcon","renderValueLabelTitle","updateRecipient","isValid","CloseCircleOutlined","onClose","getUrl","getBtcUtxos","txBytes","getBtcNumTxBytes","feeSat","toFixed","isValidReq","renderBalance","renderRecipientLabel","renderExtra","image","Empty","PRESENTED_IMAGE_SIMPLE","QRCode","Input","Receive","updateDisplayAddress","displayAddr","getBtcDisplayAddress","select","execCommand","copyAddress","CopyOutlined","cardW","renderAddrBox","App","ReactDOM","bs58check","bech32","REACT_APP_ENV","REACT_APP_BASE_SIGNING_URL","BTC_PROD_DATA_API","BTC_BROADCAST_ENDPOINT","HARDENED_OFFSET","REACT_APP_BTC_COIN","BTC_CHANGE_ADDR_BLOCK_LEN","REACT_APP_BTC_DEFAULT_FEE_RATE","REACT_APP_BTC_TX_BASE_URL","BTC_TESTNET","REACT_APP_BTC_TESTNET","KEYRING_DATA_PATH","REACT_APP_LATTICE_CERT_SIGNER","PERMISSIONS_HELP_LINK","BTC_SEGWIT_NATIVE_V0_PREFIX","BTC_LEGACY_VERSION","BTC_WRAPPED_SEGWIT_VERSION","RATE_LIMIT","GET_ABI_URL","ethereum","arbitrum","polygon","optimism","binance","avalanche","devConstants","BTC_DEV_DATA_API","fetchJSON","_fetchBtcUtxos","ADDRS_PER_CALL","MAX_UTOXS_RET","addrsToCheck","unspent_outputs","confirmations","tx_hash_big_endian","vout","tx_output_n","_blockchainDotComScriptToAddr","script","_fetchBtcUtxosTestnet","addrsCopy","_fetchBtcTxs","isFirstCall","isSingleAddr","MAX_TXS_RET","txsAdded","ftx","time","block_index","prev_out","out","_tx","_fetchBtcTxsTestnet","lastSeenId","formattedTxs","confirmedCount","block_time","vin","prevout","scriptpubkey_address","last_trade_price","rawTx","method","body","_calcBtcTxNumInputs","feeRate","inputIdx","currentValue","numInputs","numBytes","_scriptStr","bech32Prefix","pubkeyhash","words","toWords","unshift","encode","version","localSettings","inputSize","outputSize","inputWitnessSize","vFactor","btcValue","changeAddrs","isFullSpend","satValue","round","bytesUsed","BASE_SIGNER_PATH","prevOuts","utxo","signerPath","prevOut","index","changePath","currency","toHexStr","bn","s","base","objs","filtered","reverse","isDup","fobj","matchedKeys"],"mappings":"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","file":"static/js/main.976f5c12.chunk.js","sourcesContent":["import differenceBy from \"lodash/differenceBy\";\nimport unionBy from \"lodash/unionBy\";\nimport { useState } from \"react\";\nimport { Record } from \"../types/records\";\n\n/**\n * `useRecords` is a React hook that builds off of `useState` to add setter functions for\n * interacting with a list of objects:\n *  - `addRecords` - Combines passed in array of records and records in state by comparing ids\n *  - `removeRecords` - Removes passed in array of records from records in state by comparing ids\n * @param defaultValue - any array to set the default value\n */\nexport const useRecords = <T extends Record>(\n  defaultValue: T[],\n  id = \"id\"\n): [T[], (toAdd: T[]) => void, (toRemove: T[]) => void, () => void] => {\n  const [records, setRecords] = useState<T[]>(defaultValue);\n\n  const addRecords = (recordsToAdd: T[]) =>\n    setRecords((recordsInState) => unionBy(recordsInState, recordsToAdd, id));\n\n  const removeRecords = (recordsToRemove: T[]) =>\n    setRecords((recordsInState) =>\n      differenceBy(recordsInState, recordsToRemove, id)\n    );\n\n  const resetRecords = () => setRecords([]);\n\n  return [records, addRecords, removeRecords, resetRecords];\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport './styles.css'\nimport { Button, Layout, Menu, PageHeader, Tag, Tooltip } from 'antd';\nimport { \n  HomeOutlined, AuditOutlined, MenuOutlined, TagsOutlined, \n  WalletOutlined, ArrowUpOutlined, ArrowDownOutlined, \n  ReloadOutlined, CreditCardOutlined, CheckOutlined, SettingOutlined \n} from '@ant-design/icons';\nimport { default as SDKSession } from '../sdk/sdkSession';\nimport { \n  Connect, Error, Landing, Loading, PageContent, Pair, Send, \n  Receive, Wallet, EthContracts, Settings, ValidateSig, AddressTagsPage \n} from './index'\nimport { constants, getBtcPurpose } from '../util/helpers'\nimport localStorage from '../util/localStorage';\nimport { AppContext } from '../store/AppContext';\nconst { Content, Footer, Sider } = Layout;\nconst LOGIN_PARAM = 'loginCache';\nconst DEFAULT_MENU_ITEM = 'menu-landing';\n\ntype MainState = {\n  name: string,\n  menuItem: string,\n  session: any,\n  collapsed: boolean,\n  error: { msg: string, cb: Function },\n  loading: boolean,\n  pendingMsg: string,\n  waiting: boolean, \n  onCancel: Function,\n  deviceID: string,\n  password: string,\n  lastUpdated: Date,\n  windowWidth: number,\n  walletIsExternal: boolean,\n  keyringName: string,\n  openedByKeyring: boolean,\n  hwCheck: string,\n}\n\n\nclass Main extends React.Component<any, MainState> {\n  static contextType = AppContext\n\n  constructor(props) {\n    super(props)\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = params.get('keyring')\n    this.state = {\n      name: constants.DEFAULT_APP_NAME,\n      menuItem: DEFAULT_MENU_ITEM,\n      // GridPlusSDK session object\n      session: null,\n      collapsed: false,\n      error: { msg: null, cb: null },\n      loading: false,\n      pendingMsg: null,\n      // Waiting on asynchronous data, usually from the Lattice\n      waiting: false, \n      onCancel: null,\n      // Login info stored in localstorage. Can be cleared out at any time by the `logout` func\n      deviceID: null,\n      password: null,\n      // Last time the state was updated (comes from webwork setup by SdkSession)\n      lastUpdated: new Date(),\n      // Width of the current window\n      windowWidth: window.innerWidth,\n      // Track changes in the active wallet so we can refresh addresses when we detect one\n      walletIsExternal: null,\n      // Window params\n      keyringName,\n      // Was the app opened with a keyring in the url parameters\n      openedByKeyring: !!keyringName,\n      // Validation check on Lattice hardware. Should draw a separate component\n      hwCheck: null,\n    };\n\n    // Bind local state updaters\n    this.handleMenuChange = this.handleMenuChange.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleKeyringOpener = this.handleKeyringOpener.bind(this);\n    this.syncActiveWalletState = this.syncActiveWalletState.bind(this);\n\n    // Bind callbacks whose calls may originate elsewhere\n    this.cancelConnect = this.cancelConnect.bind(this);\n    this.connectSession = this.connectSession.bind(this);\n    this.handlePair = this.handlePair.bind(this);\n    this.fetchBtcData = this.fetchBtcData.bind(this);\n    this.setError = this.setError.bind(this);\n    this.refreshWallets = this.refreshWallets.bind(this);\n    this.handlePageTurn = this.handlePageTurn.bind(this);\n\n    // Bind wrappers\n    this.retry = this.retry.bind(this);\n\n    // Bind listener callbacks\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    // Listen for window resize\n    window.addEventListener('resize', this.updateWidth);\n\n    if (this.isMobile()) this.setState({collapsed: true})\n    // Metamask connects through a keyring and in these cases we need\n    // to utilize window.postMessage once we connect.\n    // We can extend this pattern to other apps in the future.\n    const params = new URLSearchParams(window.location.search);\n    const keyringName = this.state.keyringName\n    const hwCheck = params.get('hwCheck')\n    const forceLogin = params.get('forceLogin')\n    \n    // Workaround to support Firefox extensions. See `returnKeyringData` below.\n    const hasLoggedIn = params.get(LOGIN_PARAM)\n    if (hasLoggedIn) {\n      this.setState({ waiting: true, pendingMsg: 'Connecting...' })\n      return;\n    }\n    \n    if (keyringName) {\n      //@ts-expect-error\n      window.onload = this.handleKeyringOpener();\n      this.setState({ keyringName }, () => {\n        // Check if this keyring has already logged in. This login should expire after a period of time.\n        const prevKeyringLogin = localStorage.getKeyringItem(keyringName);\n        const keyringTimeoutBoundary = new Date().getTime() - constants.KEYRING_LOGOUT_MS;\n        if (!forceLogin && prevKeyringLogin && prevKeyringLogin.lastLogin > keyringTimeoutBoundary) {\n          this.connect( prevKeyringLogin.deviceID, \n                        prevKeyringLogin.password, \n                        () => this.connectSession(prevKeyringLogin));\n        } else {\n          // If the login has expired, clear it now.\n          localStorage.removeKeyringItem(keyringName)\n        }\n      })\n    } else if (hwCheck) {\n      // Lattice validation check builds this URL and includes a signature + preimage\n      this.setState({ hwCheck })\n    } else {\n      // Lookup deviceID and pw from storage\n      const { deviceID, password } = localStorage.getLogin()\n      if (deviceID && password)\n        this.connect(deviceID, password, () => this.connectSession())\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.context.session)\n      this.syncActiveWalletState();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  window.innerWidth });\n    if (this.isMobile() && !this.state.collapsed) {\n      this.setState({ collapsed: true })\n    } else if (!this.isMobile() && this.state.collapsed) {\n      this.setState({ collapsed: false })\n    }\n  }\n\n  isMobile() {\n    return this.context.isMobile\n  }\n\n  connect(deviceID, password, cb) {\n    const updates = { deviceID, password };\n    const name = this.state.keyringName ? this.state.keyringName : this.state.name\n    if (!this.context.session) {\n      // Create a new session if we don't have one.\n      const settings = localStorage.getSettings()\n      this.context.setSession(\n        new SDKSession(deviceID, this.setError, name, settings)\n      );\n    }\n    this.setState(updates, cb);\n  }\n\n  cancelConnect() {\n    // Cancel the pairing process if it was started (i.e. if the connection was started with\n    // a device that could be discovered). Most of the time this will not be possible because\n    // the cancel button that triggers this function will not be displayed once the device\n    // responds back that it is ready to pair.\n    if (this.context.session && this.context.session.client) {\n      this.context.session.client.pair('', () => {});\n    }\n    // Reset all SDK-related state variables so the user can re-connect to something else.\n    this.setState({ deviceID: null, password: null, session: null })\n    this.unwait()\n  }\n\n  isConnected() {\n    if (!this.context.session) return false;\n    return this.context.session.isConnected();\n  }\n\n  //------------------------------------------\n  // KEYRING HANDLERS\n  //------------------------------------------\n\n  handleKeyringOpener() {\n    this.setState({ openedByKeyring: true })\n  }\n\n  returnKeyringData() {\n    if (!this.state.openedByKeyring)\n      return;\n    // Save the login for later\n    localStorage.setKeyringItem(this.state.keyringName, {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      lastLogin: new Date().getTime()\n    })\n    // Send the data back to the opener\n    const data = {\n      deviceID: this.state.deviceID,\n      password: this.state.password,\n      endpoint: constants.BASE_SIGNING_URL,\n    };\n    // Check if there is a custom endpoint configured\n    const settings = localStorage.getSettings();\n    if (settings.customEndpoint && settings.customEndpoint !== '') {\n      data.endpoint = settings.customEndpoint;\n    }\n    this.handleLogout();\n    if (window.opener) {\n      // If there is a `window.opener` we can just post back\n      window.opener.postMessage(JSON.stringify(data), \"*\");\n      window.close();\n    } else {\n      // Otherwise we need a workaround to let the originator\n      // know we have logged in. We will put the login data\n      // into the URL and the requesting app will fetch that.\n      // Note that the requesting extension is now responsible for\n      // closing this web page.\n      const enc = Buffer.from(JSON.stringify(data)).toString('base64');\n      window.location.href = `${window.location.href}&${LOGIN_PARAM}=${enc}`;\n    }\n  }\n  //------------------------------------------\n  // END KEYRING HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // LOCAL STATE UPDATES\n  //------------------------------------------\n  wait(msg=null, onCancel=null) {\n    this.setState({ pendingMsg: msg, waiting: true, onCancel });\n  }\n\n  unwait() {\n    this.setState({ pendingMsg: null, waiting: false, onCancel: null });\n  }\n\n  //------------------------------------------\n  // END LOCAL STATE UPDATES\n  //------------------------------------------\n\n  //------------------------------------------\n  // HEADER HANDLERS\n  //------------------------------------------\n  handlePageTurn(page) {\n    this.context.session.setPage(page);\n  }\n\n  handleMenuChange ({ key }) {\n    const stateUpdate = { menuItem: key }\n    //@ts-expect-error\n    if (this.isMobile()) stateUpdate.collapsed = true\n    this.setState(stateUpdate)\n  }\n\n  handleLogout(err=null) {\n    this.unwait();\n    this.context.session.disconnect();\n    this.setState({ session: null });\n    localStorage.removeLogin()\n    if (err && err === constants.LOST_PAIRING_MSG)\n      //@ts-expect-error\n      this.setError({ err })\n  }\n\n  setError(data={msg:null, cb:null}) {\n    // Handle case where user deletes pairing on the Lattice\n    if (data.msg === constants.LOST_PAIRING_ERR)\n      return this.handleLostPairing();\n    this.setState({ error: data, loading: false })\n  }\n  \n  //------------------------------------------\n  // END HEADER HANDLERS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK HOOKS\n  //------------------------------------------\n\n  // Call `connect` on the SDK session. If we get an error back, clear out the client,\n  // as we cannot connect.\n  connectSession(data=this.state, showLoading=true) {\n    const { deviceID, password } = data;\n      // Sanity check -- this should never get hit\n    if (!deviceID || !password) {\n      //@ts-expect-error\n      return this.setError({ \n        msg: 'You must provide a deviceID and password. Please refresh and log in again. '\n      });\n    } else {\n      this.setError();\n    }\n    // Connect to the device\n    this.connect(deviceID, password, () => {\n      // Create a new session with the deviceID and password provided.\n      if (showLoading === true) {\n        this.wait(\"Looking for your Lattice\", this.cancelConnect);\n      }\n      this.context.session.connect(deviceID, password, (err, isPaired) => {\n        this.unwait();\n        // If the request was before we got our callback, exit here\n        if (!this.context.session || this.state.deviceID !== deviceID)\n          return;\n        if (err) {\n          // If we failed to connect, clear out the SDK session. This component will\n          // prompt the user for new login data and will try to create one.\n          this.setError({ \n            msg: err, \n            cb: () => { this.connectSession(data); } \n          });\n        } else {\n          // We connected!\n          // 1. Save these credentials to localStorage if this is NOT a keyring\n          if (!this.state.openedByKeyring) {\n            localStorage.setLogin({ deviceID, password })\n          }\n          // 2. Clear errors and alerts\n          this.setError();\n          // 3. Proceed based on state\n          if (isPaired && this.state.openedByKeyring) {\n            return this.returnKeyringData();\n          }\n        }\n      });\n    })\n  }\n\n  // Fetch up-to-date blockchain state data for the addresses stored in our\n  // SDKSession. Called after we load addresses for the first time\n  // Passing `isRecursion=true` means we will attempt to fetch new\n  // addresses based on known state data and if we do not yield any new ones\n  // we should exit. This is done to avoid naively requesting state data\n  // for all known addresses each time we add a new one based on a gap limit.\n  // For example, an initial sync will get 20 addrs and fetch state data. It \n  // may then request one address at a time and then state data for that one\n  // address until the gap limit is reached.\n  fetchBtcData(isRecursion=false) {\n    this.unwait();\n    this.setError();\n    this.wait('Fetching addresses');\n    this.context.session.fetchBtcAddresses((err, newAddrCounts) => {\n      if (err) {\n        console.error('Error fetching BTC addresses', err)\n        this.unwait();\n        this.setError({ \n          msg: 'Failed to fetch BTC addresses. Please try again.', \n          cb: this.fetchBtcData\n        });\n        return;\n      }\n      this.unwait()\n      const shouldExit =  isRecursion && \n                          newAddrCounts.regular === 0 && \n                          newAddrCounts.change === 0;\n      if (shouldExit) {\n        // Done syncing\n        return;\n      }\n      // If this is the first time we are calling this function,\n      // start by clearing UTXOs to avoid stale balances\n      if (!isRecursion) {\n        this.context.session.clearUtxos();\n      }\n      // Sync data now\n      this.wait('Syncing chain data')\n      const opts = isRecursion ? newAddrCounts : null;\n      this.context.session.fetchBtcStateData(opts, (err) => {\n        if (err) {\n          console.error('Error fetching BTC state data', err)\n          this.unwait();\n          this.setError({ \n            msg: 'Failed to fetch BTC state data. Please try again.', \n            cb: this.fetchBtcData \n          });\n          return;\n        }\n        // Recurse such that we exit if there are no new addresses\n        this.fetchBtcData(true);\n      })\n    })\n  }\n\n  handleLostPairing() {\n    // If we lost our pairing, we will have discovered that after trying to `connect`.\n    // The Lattice will draw a pairing screen, so to tear it down we need to send an\n    // invalid pairing code.\n    // TODO: This will still draw a pairing failure screen on the Lattice. There is\n    //       currently no way around this, but it is something we should address\n    //       in the future.\n    this.context.session.client.pair('x', () => {\n      this.handleLogout(constants.LOST_PAIRING_MSG);\n    });\n  }\n\n  refreshWallets() {\n    if (this.state.waiting === true)\n      return;\n    this.wait(\"Refreshing wallets\")\n    this.setState({ waiting: true })\n    this.context.session.refreshWallets((err) => {\n      if (err === constants.LOST_PAIRING_ERR)\n        return this.handleLostPairing();\n      \n      this.syncActiveWalletState(true);\n      this.unwait();\n      if (err)\n        return this.setError({ msg: err, cb: this.refreshWallets })\n      this.setError();\n      if (constants.BTC_PURPOSE_NONE !== getBtcPurpose())\n        this.fetchBtcData()\n    })\n  }\n\n  // If we detect a new active wallet interface, save it and refresh wallet addresses\n  syncActiveWalletState(bypassRefresh=false) {\n    const activeWallet = this.context.session.getActiveWallet();\n    if (!activeWallet)\n      return;\n    const isExternal = activeWallet.external;\n    if (this.state.walletIsExternal !== isExternal) {\n      // We only want to refresh if we know another interface was active before. If this\n      // is the first check, just set the flag without calling refresh (it will get called)\n      // automatically.\n      const shouldRefresh = this.state.walletIsExternal !== null;\n      // Set state regardless\n      this.setState({ walletIsExternal: isExternal })\n      // Refresh if needed\n      if (shouldRefresh === true && bypassRefresh !== true)\n        this.refreshWallets();\n    }\n  }\n\n  //------------------------------------------\n  // END SDK HOOKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // SDK CALLBACKS\n  //------------------------------------------\n\n  // Handle a `finalizePairing` response. There are three states:\n  // 1. Wrong secret: draw a new screen (try again) automatically\n  // 2. Timed out: display error screen and wait for user to try again\n  // 3. Success: load addresses\n  handlePair(data) {\n    // Hack to circumvent a weird screen artifact we are seeing in firmware\n    // NOTHING TO SEE HERE\n    if (data[0] === '_' || data[0] === '[') data = data.slice(1)\n\n    // If we didn't timeout, submit the secret and hope for success!\n    this.wait(\"Establishing connection with your Lattice\");\n    this.context.session.client.pair(data, (err) => {\n      this.unwait();\n      if (err) {\n        // If there was an error here, the user probably entered the wrong secret\n        const pairErr = 'Failed to pair. You either entered the wrong code or have already connected to this app.'\n        this.setError({ msg: pairErr, cb: this.connectSession });\n      } else if (this.state.openedByKeyring) {\n        this.returnKeyringData();\n      }\n    })\n  }\n\n  //------------------------------------------\n  // END SDK CALLBACKS\n  //------------------------------------------\n\n  //------------------------------------------\n  // RENDERERS\n  //------------------------------------------\n  renderMenu() {\n    const hideWallet = constants.BTC_PURPOSE_NONE === getBtcPurpose();\n    return (\n      <Sider\n        collapsed={this.state.collapsed}\n        collapsedWidth={0}\n      >\n        <Menu theme=\"dark\" mode=\"inline\" onSelect={this.handleMenuChange}>\n          {/* Setting title={null} removes floating tooltip on mobile */}\n          <Menu.Item key=\"menu-landing\" title={null}>\n            <HomeOutlined/>\n            <span>Home</span>\n            </Menu.Item>\n          <Menu.Item key=\"menu-kv-records\" title={null}>\n            <TagsOutlined />\n            <span>Address Tags</span>\n          </Menu.Item>\n          <Menu.Item key=\"menu-eth-contracts\" title={null}>\n            <AuditOutlined />\n            <span>Contracts</span>\n          </Menu.Item>\n          {/* <Menu.Item key=\"menu-permissions\">\n            <DollarOutlined/>\n            <span>Limits</span>\n          </Menu.Item> */}\n          <Menu.Item key=\"menu-settings\" title={null}>\n            <SettingOutlined />\n            <span>Settings</span>\n          </Menu.Item>\n          {!hideWallet ? (\n            <Menu.SubMenu title=\"BTC Wallet\" key=\"submenu-wallet\">\n              <Menu.Item key=\"menu-wallet\" title={null}>\n                <WalletOutlined />\n                <span>History</span>\n              </Menu.Item>\n              <Menu.Item key=\"menu-send\" title={null}>\n                <ArrowUpOutlined />\n                <span>Send</span>\n              </Menu.Item>\n              <Menu.Item key=\"menu-receive\" title={null}>\n                <ArrowDownOutlined />\n                <span>Receive</span>\n              </Menu.Item>\n            </Menu.SubMenu>\n          ) : null}\n        </Menu>\n      </Sider>\n    );\n  }\n\n  renderSidebar() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    if (this.isConnected())\n      return this.renderMenu();\n  }\n\n  renderHeaderText() {\n    return (\n      <>\n        {this.isMobile() ? (\n          <Button\n            onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n            type=\"text\"\n            size=\"large\"\n            icon={<MenuOutlined />}\n            style={{ backgroundColor: \"transparent\", marginRight: \"5px\" }}\n          />\n        ) : null}\n        <a\n          className=\"lattice-a\"\n          href=\"https://gridplus.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img  alt=\"GridPlus\" \n                src={'/gridplus-logo.png'}\n                style={{height: '1em'}}/>\n        </a>\n      </>\n    );\n  }\n\n  renderHeader() {\n    if (this.state.name !== constants.DEFAULT_APP_NAME)\n      return\n    let extra: any[] = [];\n    if (!this.isConnected())\n      return;\n\n    // Display a tag if there is a SafeCard inserted\n    let walletTag = null;\n    const size = this.isMobile() ? 'small' : 'middle';\n    const activeWallet = this.context.session.getActiveWallet();\n\n    if (activeWallet === null) {\n      walletTag = ( \n        //@ts-expect-error\n        <Button type=\"danger\" ghost onClick={this.refreshWallets} size={size}>No Wallet <ReloadOutlined/></Button>\n      )\n    } else {\n      walletTag = activeWallet.external === true ?  (\n        <Button type=\"primary\" ghost onClick={this.refreshWallets} size={size}><CreditCardOutlined/> SafeCard <ReloadOutlined/></Button>\n      ) : (\n        <Button type=\"default\" ghost onClick={this.refreshWallets} size={size}><CheckOutlined/> Lattice <ReloadOutlined/></Button>\n      )\n    }\n    if (walletTag) extra.push((\n      <Tooltip title=\"Refresh\" key=\"WalletTagTooltip\">{walletTag}</Tooltip>));\n\n    extra.push(\n      ( <Button key=\"logout-button\" type=\"primary\" onClick={this.handleLogout} size={size}>\n        Logout\n      </Button>)\n    );\n    return (\n      <PageHeader\n        title={this.renderHeaderText()}\n        ghost={true}\n        extra={!this.state.waiting ? extra : null}\n      />\n    )\n  }\n\n  renderErrorHeader() {\n    if (this.state.error.msg) {\n      const err = (\n        <Error  msg={this.state.error.msg} \n                retryCb={this.state.error.cb}\n        />\n      )\n      return (\n        <PageContent content={err} />\n      )\n    } else {\n      return;\n    }\n  }\n\n  retry(cb) {\n    this.setError();\n    return cb();\n  }\n\n  renderMenuItem() {\n    switch (this.state.menuItem) {\n      case \"menu-wallet\":\n        return (\n          <Wallet\n            session={this.context.session}\n            refreshData={this.fetchBtcData}\n            lastUpdated={this.state.lastUpdated}\n            pageTurnCb={this.handlePageTurn}\n          />\n        );\n      case \"menu-receive\":\n        return <Receive session={this.context.session} />;\n      case \"menu-send\":\n        return <Send session={this.context.session} />;\n      case \"menu-eth-contracts\":\n        return <EthContracts />;\n      // case 'menu-permissions':\n      //   return (\n      //     <Permissions\n      //       session={this.state.session}\n      //       isMobile={() => this.isMobile()}\n      //     />\n      //   )\n      case \"menu-settings\":\n        return <Settings />;\n      case \"menu-kv-records\":\n        return <AddressTagsPage />;\n      case DEFAULT_MENU_ITEM:\n        return <Landing />;\n      default:\n        return;\n    }\n  }\n\n  renderContent() {\n    const hasActiveWallet = this.context.session ? this.context.session.getActiveWallet() !== null : false;\n    if (this.state.waiting) {\n      return (\n        <Loading  msg={this.state.pendingMsg}\n                  onCancel={this.state.onCancel}/> \n      );\n    } else if (!this.isConnected()) {\n      // Connect to the Lattice via the SDK\n      return (\n        <Connect  submitCb={this.connectSession}\n                  cancelConnect={this.cancelConnect}\n                  name={this.state.name}\n                  keyringName={this.state.keyringName}\n                  setKeyringName={(keyringName) => this.setState({ keyringName })}\n                  errMsg={this.state.error.msg}/>\n      );\n    } else if (!this.context.session.isPaired()) {\n      // Automatically try to pair if we have a session but no pairing  \n      return (\n        <Pair submit={this.handlePair}\n              hide={!!this.state.error.msg} />\n      );\n    } else if (this.state.openedByKeyring) {\n      // The window should close automatically, but just in case something goes wrong...\n      return (\n        <Loading  msg={\"Successfully connected to your Lattice! You may close this window.\"}\n                  spin={false}/>\n      )\n    } else if (!hasActiveWallet) {\n      const retry = this.context.session ? this.refreshWallets : null;\n      return (\n        <Error msg={\"No active wallet present for device!\"}\n               retryCb={retry} \n        />\n      )\n    } else {\n      return this.renderMenuItem();\n    }\n  }\n\n  renderFooter() {\n    return (\n      <Footer style={{ textAlign: 'center' }}>\n        ©2021 GridPlus Inc\n        {constants.ENV === 'dev' ? <Tag color=\"blue\" style={{margin: \"0 0 0 10px\"}}>DEV</Tag> : null}\n      </Footer>\n    )\n  }\n\n  renderPage() {\n    if (this.state.hwCheck !== null) {\n      return <ValidateSig data={this.state.hwCheck} />\n    } else {\n      return this.renderContent();\n    }\n  }\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        {this.renderHeader()}\n        <Layout id=\"main-content-outer\">\n          {this.renderSidebar()}\n          <Layout id=\"main-content-inner\">\n            <Content style={{ margin: '0 0 0 0' }}>\n              {this.renderErrorHeader()}\n              <div style={{ margin: '30px 0 0 0'}}>\n                {this.renderPage()}        \n              </div>\n            </Content>\n            {this.renderFooter()}\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default Main","import omit from \"lodash/omit\";\n\nconst LOGIN_ID_STORAGE_KEY = \"gridplus_web_wallet_id\";\nconst LOGIN_PASSWORD_STORAGE_KEY = \"gridplus_web_wallet_password\";\nconst ADDRESSES_STORAGE_KEY = \"gridplus_addresses\";\nconst CONTRACTS_STORAGE_KEY = \"gridplus_contracts\";\nconst CONTRACT_PACKS_STORAGE_KEY = \"gridplus_contracts_packs\";\nconst ROOT_STORE = process.env.REACT_APP_ROOT_STORE || \"gridplus\";\n\n// #region -- Generic Local Storage Functions\n\nconst getItem = (key) => {\n  const value = window.localStorage.getItem(key);\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return JSON.parse(JSON.stringify(value));\n  }\n};\nconst setItem = (key, value) =>\n  window.localStorage.setItem(key, JSON.stringify(value));\nconst removeItem = (key) => window.localStorage.removeItem(key);\n\nconst getRootStore = () => getItem(ROOT_STORE) ?? {};\nconst setRootStore = (value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), ...value })\n  );\nconst removeRootStore = () => removeItem(ROOT_STORE);\n\nconst getRootStoreItem = (key) => getItem(ROOT_STORE)?.[key] ?? {};\nconst setRootStoreItem = (key, value) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify({ ...getRootStore(), [`${key}`]: value })\n  );\nconst removeRootStoreItem = (key) =>\n  window.localStorage.setItem(\n    ROOT_STORE,\n    JSON.stringify(omit(getRootStore(), key))\n  );\n\n// #endregion\n\n// #region -- Settings Functions\n\nconst getSettings = () => getRootStoreItem(\"settings\");\nconst setSettings = (value) => setRootStoreItem(\"settings\", value);\n\n// #endregion\n\n// #region -- Keyring Functions\n\nconst getKeyring = () => getRootStoreItem(\"keyring\");\nconst setKeyring = (value) => setRootStoreItem(\"keyring\", value);\n\nconst getKeyringItem = (key) => getRootStoreItem(\"keyring\")?.[key] ?? {};\nconst setKeyringItem = (key, value) =>\n  setRootStoreItem(\"keyring\", { [`${key}`]: value });\nconst removeKeyringItem = (key) =>\n  setRootStoreItem(\"keyring\", omit(getKeyring(), key));\nconst renameKeyringItem = (oldKey, newKey) => {\n  if (oldKey !== newKey) {\n    const item = { ...getKeyringItem(oldKey) };\n    setKeyringItem(newKey, item);\n    removeKeyringItem(oldKey);\n  }\n};\n\n// #endregion\n\n// #region -- Login Functions\n\nconst getLoginId = () => getItem(LOGIN_ID_STORAGE_KEY);\nconst setLoginId = (value) => setItem(LOGIN_ID_STORAGE_KEY, value);\nconst removeLoginId = () => removeItem(LOGIN_ID_STORAGE_KEY);\n\nconst getLoginPassword = () => getItem(LOGIN_PASSWORD_STORAGE_KEY);\nconst setLoginPassword = (value) => setItem(LOGIN_PASSWORD_STORAGE_KEY, value);\nconst removeLoginPassword = () => removeItem(LOGIN_PASSWORD_STORAGE_KEY);\n\nconst getLogin = () => ({\n  deviceID: getLoginId(),\n  password: getLoginPassword(),\n});\nconst setLogin = ({ deviceID, password }) => {\n  setLoginId(deviceID);\n  setLoginPassword(password);\n};\nconst removeLogin = () => {\n  removeLoginId();\n  removeLoginPassword();\n};\n\n// #endregion\n\n// #region -- Device Indexed Functions\n\nconst getDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return getRootStoreItem(deviceId)?.[key];\n  }\n};\n\nconst setDeviceIndexedItem = (key, value) => {\n  const deviceId = getLoginId();\n  if (deviceId && value) {\n    return setRootStoreItem(deviceId, {\n      ...getRootStoreItem(deviceId),\n      [`${key}`]: value,\n    });\n  }\n};\n\nconst removeDeviceIndexedItem = (key) => {\n  const deviceId = getLoginId();\n  if (deviceId) {\n    return setRootStoreItem(deviceId, omit(getRootStoreItem(deviceId), key));\n  }\n};\n\n// #endregion\n\n// #region -- Address & Contracts Functions\n\nconst getAddresses = () => getDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\nconst setAddresses = (value) =>\n  setDeviceIndexedItem(ADDRESSES_STORAGE_KEY, value);\nconst removeAddresses = () => removeDeviceIndexedItem(ADDRESSES_STORAGE_KEY);\n\nconst getContracts = () => getDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\nconst setContracts = (value) =>\n  setDeviceIndexedItem(CONTRACTS_STORAGE_KEY, value);\nconst removeContracts = () => removeDeviceIndexedItem(CONTRACTS_STORAGE_KEY);\n\nconst getContractPacks = () => getItem(CONTRACT_PACKS_STORAGE_KEY) ?? [];\nconst setContractPacks = (value) => setItem(CONTRACT_PACKS_STORAGE_KEY, value);\nconst removeContractPacks = () => removeItem(CONTRACT_PACKS_STORAGE_KEY);\n\n// #endregion\n\nexport default {\n  getItem,\n  setItem,\n  removeItem,\n  getRootStore,\n  setRootStore,\n  removeRootStore,\n  getRootStoreItem,\n  setRootStoreItem,\n  removeRootStoreItem,\n  getSettings,\n  setSettings,\n  getLoginId,\n  setLoginId,\n  removeLoginId,\n  getLoginPassword,\n  setLoginPassword,\n  removeLoginPassword,\n  getKeyring,\n  setKeyring,\n  getKeyringItem,\n  setKeyringItem,\n  removeKeyringItem,\n  renameKeyringItem,\n  getLogin,\n  setLogin,\n  removeLogin,\n  getDeviceIndexedItem,\n  setDeviceIndexedItem,\n  removeDeviceIndexedItem,\n  getAddresses,\n  setAddresses,\n  removeAddresses,\n  getContracts,\n  setContracts,\n  removeContracts,\n  getContractPacks,\n  setContractPacks,\n  removeContractPacks,\n};\n","import React, { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { useRecords } from \"../hooks/useRecords\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport localStorage from \"../util/localStorage\";\n\n/**\n * A React Hook that allows us to pass data down the component tree without having to pass\n * props.\n */\nexport const AppContext = createContext(undefined);\n\nexport const AppContextProvider = ({\n  children,\n  overrides,\n}: {\n  children: ReactNode;\n  overrides?: { [key: string]: any };\n}) => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 500);\n  const [session, setSession] = useState<SDKSession>(null);\n\n  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);\n  const [\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  ] = useRecords(localStorage.getAddresses() ?? [])\n\n  const defaultContext = {\n    isMobile,\n    session,\n    setSession,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  };\n\n  /**\n   * Whenever `addresses` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setAddresses(addresses);\n  }, [addresses]);\n\n  /**\n   * Sets `isMobile` when the window resizes.\n   * */\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      const windowIsMobileWidth = window.innerWidth < 500;\n      if (windowIsMobileWidth && !isMobile) setIsMobile(true);\n      if (!windowIsMobileWidth && isMobile) setIsMobile(false);\n    });\n  }, [isMobile]);\n\n  return (\n    <AppContext.Provider value={{ ...defaultContext, ...overrides }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Col, Result, Row } from 'antd'\nimport { decode } from 'bs58'\nimport { constants } from '../util/helpers';\nimport { AppContext } from '../store/AppContext';\nconst ReactCrypto = require('gridplus-react-crypto').default;\nconst EC = require('elliptic').ec;\n\nconst PREIMAGE_LEN = 32;\nconst SIG_TEMPLATE_LEN =  74; // Struct containing DER sig\nconst CERT_TEMPLATE_LEN = 147;  // Struct containing pubkey, permissions, and signature on it\n\nclass ValidateSig extends React.Component<any, any> {\n  static contextType = AppContext;\n  \n  // Validate a signature for a message from a known signer on a known curve\n  // * msg - Expected ASCII string\n  // * signer - Expected buffer containing 65-byte public key\n  // * sig - Expected DER signature (string is best)\n  // * curve - Consumable curve for elliptic\n  _validate(msg, signer, sig, curve='secp256k1') {\n    const crypto = new ReactCrypto();\n    const ec = new EC(curve);\n    const msgHash = crypto.createHash('sha256').update(msg).digest();\n    const key = ec.keyFromPublic(signer, 'hex')\n    return key.verify(msgHash, sig);\n  }\n\n  getPreimage() {\n    return decode(this.props.data).slice(0, PREIMAGE_LEN).toString()\n  }\n\n  getCert() {\n    const start = PREIMAGE_LEN + SIG_TEMPLATE_LEN;\n    const _certData = decode(this.props.data).slice(start, start + CERT_TEMPLATE_LEN);\n    const METADATA_LEN = 8;\n    const PUBKEY_LEN = 65;\n    const preimage = _certData.slice(2, METADATA_LEN + PUBKEY_LEN);\n    // When we issue the cert, we are signing metadata + the public key. However, this\n    // cert gets packed into a template along with this metadata and the length of the data in\n    // that template is variable, depending on the size of the DER sig (which we call a \"cert\").\n    // We sign metadata with 0 length at the outset because we won't know the eventual length.\n    // Therefore this byte needs to be reuturned to its initial 0 value in order to validate the \"cert\".\n    // preimage[1] = 0;\n    const pubkey = Buffer.from(_certData.slice((METADATA_LEN), (METADATA_LEN + PUBKEY_LEN))).toString('hex');\n    const _sig = Buffer.from(_certData.slice((METADATA_LEN + PUBKEY_LEN), (METADATA_LEN + PUBKEY_LEN + SIG_TEMPLATE_LEN)));\n    const sig = _sig.slice(0, (2 + _sig[1]));\n    return { pubkey, preimage, sig }\n  }\n\n  validateCert() {\n    const cert = this.getCert();\n    return this._validate(cert.preimage, constants.LATTICE_CERT_SIGNER, cert.sig)\n  }\n\n  validateSig() {\n    try {\n      if (!this.validateCert())\n        return false;\n      const preimage = this.getPreimage();\n      const cert = this.getCert();\n      const _sig = Buffer.from(decode(this.props.data).slice(PREIMAGE_LEN, PREIMAGE_LEN + SIG_TEMPLATE_LEN));\n      const sig = _sig.slice(0, (2 + _sig[1]))\n      return this._validate(preimage, cert.pubkey, sig);\n    } catch (err) {\n      console.error(`Encountered error validating signature: ${err.message}`)\n      return false;\n    }\n  }\n\n  renderResult() {\n    let result = {\n      status: \"warning\",\n      title: \"Could not Verify Authenticity\",\n      subTitle: \"We could not verify the authenticity of this signature or signer.\"\n    };\n    if (true === this.validateSig()) {\n      result.status = \"success\";\n      result.title = \"Verified\";\n      result.subTitle = \"The signer is authentic!\"\n    }\n    return (\n      <Result\n        //@ts-expect-error\n        status={result.status}\n        title={result.title}\n        subTitle={result.subTitle}\n      />\n    )\n  }\n\n\n  render() {\n    const spanLength = this.context.isMobile ? 18 : 10;\n    const spanOffset = this.context.isMobile ? 3 : 7; \n    return (\n      <Row>\n        <Col span={spanLength} offset={spanOffset}>\n          <center>\n            <Card title=\"Validate Hardware\" bordered={true}>\n              {this.renderResult()}\n              <p><b>Message:</b> {this.getPreimage()}</p>\n            </Card>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n\n\n}\n\nexport default ValidateSig","import localStorage from './localStorage';\n\nclass StorageSession {\n  data: any;\n  store: any;\n  \n  constructor(device_id, pass) {\n    this.data = null;\n    this.store = localStorage.getRootStore();\n  }\n\n  isObject(o) {\n    try {\n      return o && typeof o === 'object' && !Array.isArray(o);\n    } catch(e) {\n      return false;\n    }\n  }\n\n  updateBranch(newData, oldData, key) {\n    // If we have reached the end of oldData\n    if (!this.isObject(oldData))\n      return;\n\n    // If `newData[key]` is a nested object, start that object\n    // clone in `oldData`\n    if (this.isObject(newData[key]) && !oldData[key])\n      oldData[key] = {};\n\n    // Loop through all keys in new data at this level. We will\n    // be adding each one as a branch\n    if (this.isObject(newData[key])) {\n      Object.keys(newData[key]).forEach((newKey) => {\n        // If there are more keys nested in this branch, update them first\n        if (this.isObject(newData[key][newKey]))\n          this.updateBranch(newData[key], oldData[key], newKey)\n        // No more keys in this branch? Finally copy this data to `oldData`\n        else\n          oldData[key][newKey] = newData[key][newKey];\n      });\n    } else {\n      // If this is a non-ojbect, copy it directly\n      oldData[key] = newData[key];\n    }\n  }\n\n  save(deviceID, wallet_uid, data) {\n    // Get the data for this deviceID\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    // Update relevant keys without overwriting anything else\n    Object.keys(data).forEach((k) => {\n      this.updateBranch(data, this.store[deviceID][wallet_uid], k);\n    })\n    // Update the store itself\n    localStorage.setRootStore(this.store);\n  }\n\n  getWalletData(deviceID, wallet_uid) {\n    if (!this.store[deviceID]) this.store[deviceID] = {};\n    if (!this.store[deviceID][wallet_uid]) this.store[deviceID][wallet_uid] = {};\n    return this.store[deviceID][wallet_uid];\n  }\n}\n\n\nexport default StorageSession;","import { Client } from 'gridplus-sdk';\nimport { SDKAddresses } from '../types/SDKAddresses';\nimport {\n  broadcastBtcTx, constants, fetchBtcPrice,\n  fetchBtcTxs, fetchBtcUtxos, filterUniqueObjects, getBtcPurpose, harden\n} from '../util/helpers';\nimport { default as StorageSession } from '../util/storageSession';\nconst Buffer = require('buffer/').Buffer;\nconst ReactCrypto = require('gridplus-react-crypto').default;\n\nclass SDKSession {\n  client: Client;\n  crypto: any;\n  name: any;\n  storageSession: any;\n  deviceID: any;\n  stateUpdateHandler: any;\n  page: number;\n  baseUrl: any;\n  addresses: SDKAddresses;\n  btcTxs: any[];\n  btcUtxos: any[];\n  lastFetchedBtcData: number;\n  btcPrice: number;\n\n  constructor(deviceID, stateUpdateHandler, name=null, opts: any = {}) {\n    this.client = null;\n    this.crypto = null;\n    this.name = name || constants.DEFAULT_APP_NAME; // app name\n    // Make use of localstorage to persist wallet data\n    this.storageSession = null;\n    // Save the device ID for the session\n    this.deviceID = deviceID;\n    // Handler to call when we get state updates\n    this.stateUpdateHandler = stateUpdateHandler;\n\n    // Current page of results (transactions) for the wallet\n    this.page = 1; // (1-indexed)\n\n    // Configurable settings\n    this.baseUrl = opts.customEndpoint ? opts.customEndpoint : constants.BASE_SIGNING_URL;\n\n    // BTC wallet data\n    this.addresses = {};          // Contains BTC and BTC_CHANGE addresses\n    this.btcTxs = [];             // Contains all txs for all addresses\n    this.btcUtxos = [];           // Contains all utxos for all addresses\n    this.lastFetchedBtcData = 0;  // Timestamp containing the last time we updated data\n    this.btcPrice = 0;            // Price in dollars of full unit BTC\n    \n    // Go time\n    this.getBtcWalletData();\n  }\n\n  disconnect() {\n    this.client = null;\n    this.saveBtcWalletData();\n    this.storageSession = null;\n    this.deviceID = null;\n  }\n\n  isConnected() {\n    return this.client !== null;\n  }\n\n  isPaired() {\n    return this.client.isPaired || false;\n  }\n\n  resetStateData() {\n    this.addresses = {};\n    this.btcTxs = [];\n    this.btcUtxos = [];\n  }\n  \n  getBtcDisplayAddress() {\n    // If we have set the next address to use, display that.\n    // Otherwise, fallback on the first address.\n    const lastUsed = this._getLastUsedBtcAddrIdx()\n    if (lastUsed > -1 && this.addresses.BTC[lastUsed + 1])\n      return this.addresses.BTC[lastUsed + 1];\n    else if (this.addresses.BTC && this.addresses.BTC.length > 0)\n      return this.addresses.BTC[0];\n    else\n      return null;\n  }\n\n  getActiveWallet() {\n    if (!this.client) return null;\n    return this.client.getActiveWallet();\n  }\n\n  setPage(newPage=1) {\n    this.page = newPage;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  // Prepare addresses for caching in localStorage\n  dryAddresses() {\n    const driedAddrs: SDKAddresses = {};\n    const hasBTCAddrs = this.addresses.BTC && this.addresses.BTC.length > 0;\n    const hasBTCChangeAddrs = this.addresses.BTC_CHANGE && this.addresses.BTC_CHANGE.length > 0;\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return driedAddrs;\n    }\n    if (hasBTCAddrs) {\n      driedAddrs.BTC = {};\n      driedAddrs.BTC[BTC_PURPOSE] = this.addresses.BTC || [];\n    }\n    if (hasBTCChangeAddrs) {\n      driedAddrs.BTC_CHANGE = {};\n      driedAddrs.BTC_CHANGE[BTC_PURPOSE] = this.addresses.BTC_CHANGE || [];\n    }\n    return driedAddrs;\n  }\n\n  // Pull addresses out of cached localStorage data\n  rehydrateAddresses(allAddrs: SDKAddresses = {}) {\n    const rehydratedAddrs: SDKAddresses = {};\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return rehydratedAddrs;\n    }\n    if (allAddrs.BTC) {\n      rehydratedAddrs.BTC = allAddrs.BTC[BTC_PURPOSE];\n    }\n    if (allAddrs.BTC_CHANGE) {\n      rehydratedAddrs.BTC_CHANGE = allAddrs.BTC_CHANGE[BTC_PURPOSE];\n    }\n    this.addresses = rehydratedAddrs;\n  }\n\n  saveBtcWalletData() {\n    // This function should never be called without a deviceID \n    // or StorageSession\n    if (!this.deviceID || !this.storageSession) return;\n\n    // Package data and save it\n    // NOTE: We are only storing addresses at this point, as\n    // the blockchain state needs to be up-to-date and is therefore\n    // not very useful to store.\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      console.error('Cannot save BTC wallet data when wallet is hidden');\n      return;\n    }\n    const walletData = {\n      [constants.BTC_WALLET_STORAGE_KEY]: {\n        [BTC_PURPOSE]: {\n          addresses: this.dryAddresses(),\n          btcTxs: this.btcTxs,\n          btcUtxos: this.btcUtxos,\n          lastFetchedBtcData: this.lastFetchedBtcData,\n        },\n        btcPrice: this.btcPrice,\n      }\n    };\n    const activeWallet = this.client ? this.client.getActiveWallet() : null;\n    if (this.client && activeWallet !== null) {\n      const wallet_uid = activeWallet.uid.toString('hex');\n      this.storageSession.save(this.deviceID, wallet_uid, walletData);\n    }\n  }\n\n  getBtcWalletData() {\n    // Create a storage session only if we have a deviceID and don't\n    // have a current storage session\n    if (this.deviceID && !this.storageSession)\n      //@ts-expect-error\n      this.storageSession = new StorageSession(this.deviceID);\n    if (this.client) {\n      // Make sure the btc wallet is enabled\n      const BTC_PURPOSE = getBtcPurpose();\n      if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n        console.error('Cannot get wallet data when wallet is hidden.');\n        return;\n      }\n      // If we have a client and if it has a non-zero active wallet UID,\n      // lookup the addresses corresponding to that wallet UID in storage.\n      const activeWallet = this.getActiveWallet();\n      if (activeWallet === null) {\n        // No active wallet -- reset addresses\n        this.addresses = {};\n      } else {\n        const uid = activeWallet.uid.toString('hex')\n        // Rehydrate the data\n        const data = this.storageSession.getWalletData(this.deviceID, uid);\n        if (!data || !data[constants.BTC_WALLET_STORAGE_KEY])\n          return;\n        const walletData = data[constants.BTC_WALLET_STORAGE_KEY];\n        // Price is saved outside of the purpose sub-object\n        if (walletData.btcPrice) {\n          this.btcPrice = walletData.btcPrice;\n        }\n        // Unpack wallet data associated with the current btc purpose\n        const purposeSpecificData = walletData[BTC_PURPOSE];\n        if (!purposeSpecificData)\n          return;\n        if (purposeSpecificData.addresses) {\n          this.rehydrateAddresses(purposeSpecificData.addresses);\n        }\n        if (purposeSpecificData.btcTxs) {\n          this.btcTxs = purposeSpecificData.btcTxs;\n        }\n        if (purposeSpecificData.btcUtxos) {\n          this.btcUtxos = purposeSpecificData.btcUtxos;\n        }\n        if (purposeSpecificData.lastFetchedBtcData) {\n          this.lastFetchedBtcData = purposeSpecificData.lastFetchedBtcData;\n        }\n      }\n    }\n  }\n\n  _tryConnect(deviceID, pw, cb, _triedLocal=false) {\n    let baseUrl = this.baseUrl;\n    let tmpTimeout = constants.SHORT_TIMEOUT; // Artificially short timeout just for connecting\n    if (_triedLocal === false) {\n      baseUrl = `http://lattice-${deviceID}.local:8080`\n      tmpTimeout = 5000 // Shorten the timeout even more since we should discover quickly if device is on LAN\n    }\n    // Derive a keypair from the deviceID and password\n    // This key doesn't hold any coins and only allows this app to make\n    // requests to a particular device. Nevertheless, the user should\n    // enter a reasonably strong password to prevent unwanted requests\n    // from nefarious actors.\n    const key = this._genPrivKey(deviceID, pw, this.name);\n    // If no client exists in this session, create a new one and\n    // attach it.\n    let client;\n    try {\n      client = new Client({ \n        name: this.name,\n        privKey: key,\n        baseUrl,\n        timeout: tmpTimeout, // Artificially short timeout for simply locating the Lattice\n        skipRetryOnWrongWallet: false,\n      })\n    } catch (err) {\n      return cb(err.toString());\n    }\n    client.connect(deviceID, (err) => {\n      if (err) {\n        if (_triedLocal === false) {\n          console.warn('Failed to connect to Lattice over LAN. Falling back to cloud routing.')\n          return this._tryConnect(deviceID, pw, cb, true); \n        } else {\n          console.error('Failed to connect via cloud routing.')\n          return cb(err);\n        }\n      } else if (_triedLocal === false) {\n        console.log('Successfully connected to Lattice over LAN.')\n      }\n      // Update the timeout to a longer one for future async requests\n      client.timeout = constants.ASYNC_SDK_TIMEOUT;\n      this.client = client;\n      // Setup a new storage session if these are new credentials.\n      // (This call will be bypassed if the credentials are already saved\n      // in localStorage because getBtcWalletData is also called in the constructor)\n      this.deviceID = deviceID;\n      this.getBtcWalletData();\n      return cb(null, client.isPaired);\n    });\n  }\n\n  connect(deviceID, pw, cb) {\n    return this._tryConnect(deviceID, pw, cb, true); // temporarily disable local connect\n  }\n\n  refreshWallets(cb) {\n    if (this.client) {\n      const prevWallet = JSON.stringify(this.client.getActiveWallet());\n      this.client.connect(this.deviceID, (err, isPaired) => {\n        // If we lost connection, the user most likely removed the pairing and will need to repair\n        if (false === this.client.isPaired)\n          return cb(constants.LOST_PAIRING_ERR);\n        if (err)\n          return cb(err);\n        // If we pulled a new active wallet, reset balances + transactions\n        // so we can reload a new set.\n        const newWallet = JSON.stringify(this.client.getActiveWallet());\n        if (newWallet !== prevWallet)\n          this.resetStateData();\n        // Update storage. This will remap to a new localStorage key if the wallet UID\n        // changed. If we didn't get an active wallet, it will just clear out the addresses\n        this.getBtcWalletData();\n        return cb(null, isPaired);\n      })\n    } else {\n      return cb('Lost connection to Lattice. Please refresh.');\n    }\n  }\n\n  sign(req, cb) {\n    // Get the tx payload to broadcast\n    this.client.sign(req, (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n      broadcastBtcTx(res.tx, (err, txid) => {\n        if (err)\n          return cb(`Error broadcasting transaction: ${err.message}`)\n        return cb(null, txid)\n      })\n    })\n  }\n\n  _genPrivKey(deviceID, pw, name) {\n    const key = Buffer.concat([\n      Buffer.from(pw), \n      Buffer.from(deviceID),\n      Buffer.from(name),\n    ])\n    // Create a new instance of ReactCrypto using the key as entropy\n    this.crypto = new ReactCrypto(key);\n    return this.crypto.createHash('sha256').update(key).digest();\n  }\n\n  //----------------------------------------------------\n  // NEW STUFF - REWRITING ADDRESS/DATA FETCHING FOR BTC WALLET\n  //----------------------------------------------------\n\n  // Get a set of either pending or confirmed transactions from the full\n  // set of known BTC txs\n  getBtcTxs(confirmed=true) {\n    const txs: any[] = [];\n    this.btcTxs.forEach((t) => {\n      if (confirmed && t.confirmed) {\n        txs.push(t)\n      } else if (!confirmed && !t.confirmed) {\n        txs.push(t)\n      }\n    })\n    return txs;\n  }\n\n  // Get the set of known UTXOs belonging to our known set of BTC addresses\n  getBtcUtxos() {\n    return this.btcUtxos;\n  }\n\n  // Get the BTC balance, which is simply a sum of UTXO values\n  // Returns the balance in satoshis\n  getBtcBalance() {\n    let balance = 0;\n    this.btcUtxos.forEach((u) => {\n      balance += u.value;\n    })\n    return balance;\n  }\n\n  // Fetch necessary addresses based on state data. We need to fetch addresses\n  // for both BTC and BTC_CHANGE such that we have fetched GAP_LIMIT past the last\n  // used address. An address is \"used\" if it has at least one transaction associated.\n  // This function will automatically fetch both BTC and BTC_CHANGE addresses up to\n  // the associated GAP_LIMITs and updates state internally.\n  // Returns a callback containing params (error, numFetched), where `numFetched` is\n  // the total number of *new* addresses we fetched. If this number is >0, it signifies\n  // we should re-fetch transaction data for our new set of addresses.\n  fetchBtcAddresses(cb, isChange=false, totalFetched={regular: 0, change: 0}) {\n    const BTC_PURPOSE = getBtcPurpose();\n    if (BTC_PURPOSE === constants.BTC_PURPOSE_NONE) {\n      // We cannot continue if the wallet is hidden\n      return cb('Cannot request BTC addresses while wallet is hidden.');\n    }\n    const lastUsedIdx = this._getLastUsedBtcAddrIdx(isChange);\n    const currentAddrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    const GAP_LIMIT = isChange ?  constants.BTC_CHANGE_GAP_LIMIT : \n                                  constants.BTC_MAIN_GAP_LIMIT;\n    const targetIdx = lastUsedIdx + 1 + GAP_LIMIT;\n    const maxToFetch = targetIdx - currentAddrs.length;\n    const nToFetch = Math.min(constants.BTC_ADDR_BLOCK_LEN, maxToFetch)\n    if (nToFetch > 0) {\n      // If we have closed our gap limit we need to get more addresses\n      const changeIdx = isChange ? 1 : 0;\n      const opts = {\n        startPath: [ \n          BTC_PURPOSE, constants.BTC_COIN, harden(0), changeIdx, currentAddrs.length \n        ],\n        n: nToFetch,\n        skipCache: true,\n      }\n      this._getAddresses(opts, (err, addresses) => {\n        if (err)\n          return cb(err);\n        // Track the number of new addresses we fetched\n        if (isChange) {\n          totalFetched.change += nToFetch;\n        } else {\n          totalFetched.regular += nToFetch;\n        }\n        // Save the addresses to memory and also update them in localStorage\n        // Note that we do need to track index here\n        if (isChange) {\n          this.addresses.BTC_CHANGE = currentAddrs.concat(addresses);\n        } else {\n          this.addresses.BTC = currentAddrs.concat(addresses);\n        }\n        console.log('Fetched BTC', this.addresses.BTC)\n        console.log('Fetched BTC_CHANGE', this.addresses.BTC_CHANGE)\n        // If we need to fetch more, recurse\n        if (maxToFetch > nToFetch) {\n          this.fetchBtcAddresses(cb, isChange, totalFetched);\n        } else if (!isChange) {\n          // If we are done fetching main BTC addresses, switch to the change path\n          this.fetchBtcAddresses(cb, true, totalFetched);\n        } else {\n          this.saveBtcWalletData();\n          cb(null, totalFetched);\n        }\n      })\n    } else if (!isChange) {\n      // If we are done fetching main BTC addresses, switch to the change path\n      this.fetchBtcAddresses(cb, true, totalFetched);\n    } else {\n      // Nothing to fetch\n      this.saveBtcWalletData();\n      cb(null, totalFetched);\n    }\n  }\n\n  // We want to clear UTXOs when we re-sync because they could have been spent.\n  // Due to the nature of `fetchBtcStateData`, we need to append new UTXOs to\n  // the existing set as we sync data, so it is best to call this function once\n  // from the component that is starting the resync.\n  clearUtxos() {\n    this.btcUtxos = [];\n  }\n\n  // Fetch transactions and UTXOs for all known BTC addresses (including change)\n  // Calls to appropriate Bitcoin data provider and updates state internally.\n  // Returns a callback with params (error)\n  fetchBtcStateData(opts, cb, isChange=false, txs=[], utxos=[]) {\n    // Determine which addresses for which to fetch state.\n    // If we get non-zero `opts` values it means this is a follow up call\n    // and we only want to fetch data for new addresses we've collected\n    // rather than data for all known addresses.\n    let addrs = (isChange ? this.addresses.BTC_CHANGE : this.addresses.BTC) || [];\n    if (opts && opts.regular > 0) {\n      addrs = this.addresses.BTC.slice(-opts.regular);\n      opts.regular = 0;\n    } else if (opts && opts.change > 0) {\n      // If we have new change addrs but not new regular addrs,\n      // we can force a switch to change here so we don't re-scan\n      // the same regular addresses we have already scanned.\n      isChange = true;\n      addrs = this.addresses.BTC_CHANGE.slice(-opts.change);\n      opts.change = 0;\n    }\n    fetchBtcPrice((err, btcPrice) => {\n      if (err) {\n        // Don't fail out if we can't get the price - just display 0\n        console.error('Failed to fetch price:', err);\n        btcPrice = 0;\n      }\n      fetchBtcTxs(addrs, txs, (err, _txs) => {\n        if (err)\n          return cb(err);\n        else if (!_txs)\n          return cb('Failed to fetch transactions');\n        txs = txs.concat(_txs);\n        fetchBtcUtxos(addrs, (err, _utxos) => {\n          if (err)\n            return cb(err);\n          else if (!_utxos)\n            return cb('Failed to fetch UTXOs');\n          utxos = utxos.concat(_utxos);\n          if (!isChange) {\n            // Once we get data for our BTC addresses, switch to change\n            this.fetchBtcStateData(opts, cb, true, txs, utxos);\n          } else {\n            // All done! Filter/process data and save\n            this.btcPrice = btcPrice;\n            this.lastFetchedBtcData = Math.floor(Date.now());\n            const newTxs = this.btcTxs.concat(txs);\n            this.btcTxs = filterUniqueObjects(newTxs, ['id']);\n            this._processBtcTxs();\n            const newUtxos = this.btcUtxos.concat(utxos);\n            // UTXOs should already be filtered but it doesn't hurt to\n            // do a sanity check filter here.\n            this.btcUtxos =   filterUniqueObjects(newUtxos, ['id', 'vout'])\n                              .sort((a, b) => { return b.value - a.value });\n            this.saveBtcWalletData();\n            cb(null);\n          }\n        })\n      })\n    })\n  }\n\n  // Generic caller to SDK getAddress route with retry mechanism\n  _getAddresses(opts, cb) {\n    this.client.getAddresses(opts, (err, addresses) => {\n      // Catch an error, but if the device is busy it probably means it is currently\n      // caching a batch of new addresses. Continue the loop through this request until\n      // it hits.\n      if (err && err !== 'Device Busy') {\n        setTimeout(() => {\n          return cb(err);\n        }, 2000);\n      } else {\n        // To avoid concurrency problems on an initial sync, we need to wait\n        // for the device to refresh addresses before completing the callback\n        if (err === 'Device Busy') {\n          return this._getAddresses(opts, cb)\n        } else {\n          return cb(null, addresses);\n        }\n      }\n    })\n  }\n\n  // Get the highest index address that has been used for either BTC or BTC_CHANGE\n  _getLastUsedBtcAddrIdx(change=false) {\n    const coin = change ? 'BTC_CHANGE' : 'BTC';\n    const addrs = this.addresses[coin] || [];\n    const txs = this.btcTxs || [];\n    let lastUsed = -1;\n    for (let i = 0; i < txs.length; i++) {\n      if (txs[i].confirmed) {\n        let maxUsed = lastUsed;\n        txs[i].inputs.forEach((input) => {\n          if (addrs.indexOf(input.addr) > maxUsed)\n            maxUsed = addrs.indexOf(input.addr);\n        })\n        txs[i].outputs.forEach((output) => {\n          if (addrs.indexOf(output.addr) > maxUsed)\n            maxUsed = addrs.indexOf(output.addr);\n        })\n        if (maxUsed > lastUsed)\n          lastUsed = maxUsed;\n      }\n    }\n    return lastUsed;\n  }\n\n  // Loop through known txs, determining value and recipient\n  // based on known addresses.\n  // Recipient should be the first address\n  // If the recipient is one of our addresses, the transaction is inbound\n  // If the transaction is inbound, value is SUM(outputs to our addresses)\n  // If the transaction is outbound, value is SUM(inputs) - SUM(outputs to our addresses)\n  _processBtcTxs() {\n    const allAddrs = this.addresses.BTC.concat(this.addresses.BTC_CHANGE);\n    const processedTxs: any[] = [];\n    const txs = JSON.parse(JSON.stringify(this.btcTxs));\n    txs.forEach((tx) => {\n      // Determine if this is an outgoing transaction or not based on inputs.\n      // We consider a transaction as \"incoming\" if *every* input was signed by\n      // an external address.\n      tx.incoming = tx.inputs.every(input => allAddrs.indexOf(input.addr) === -1);\n\n      // Fill in the recipient. If this is an outgoing transaction, it will\n      // always be the first output. Otherwise, we consider the recipient\n      // to be the first address belonging to us that we can find in outputs.\n      if (!tx.incoming) {\n        tx.recipient = tx.outputs[0].addr;\n      } else {\n        tx.outputs.forEach((output) => {\n          if (!tx.recipient && allAddrs.indexOf(output.addr) > -1) {\n            // Mark the recipient as the first of our addresses we find\n            tx.recipient = allAddrs[allAddrs.indexOf(output.addr)];\n          }\n        })\n        if (!tx.recipient) {\n          // Fallback to the first output. This should not be possible after\n          // the loop above.\n          tx.recipient = tx.outputs[0].addr;\n        }\n      }\n\n      // Calculate the value of the transaction to display in our history\n      tx.value = 0;\n      if (!tx.incoming) {\n        // Outgoing tx: sum(outputs to external addrs)\n        let inputSum = 0;\n        tx.inputs.forEach((input) => {\n          inputSum += input.value;\n        })\n        let internalOutputSum = 0;\n        let externalOutputSum = 0;\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            internalOutputSum += output.value;\n          } else {\n            externalOutputSum += output.value;\n          }\n        })\n        if (inputSum === internalOutputSum + tx.fee) {\n          // Edge case: sent to internal address, i.e. internal transaction\n          tx.value = 0;\n        } else {\n          tx.value = externalOutputSum;\n        }\n      } else {\n        // Incoming tx: sum(outputs to internal addrs)\n        tx.outputs.forEach((output) => {\n          if (allAddrs.indexOf(output.addr) > -1) {\n            tx.value += output.value;\n          }\n        })\n      }\n      processedTxs.push(tx);\n    })\n    const sortedTxs = processedTxs\n                      .sort((a, b) => { return b.timestamp - a.timestamp })\n    this.btcTxs = sortedTxs;\n  }\n}\n\nexport default SDKSession","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Col, Row } from 'antd'\nimport { AppContext } from \"../../store/AppContext\";\nconst SPAN_WIDTH = 14; // Max 24 for 100% width\n\nclass PageContent extends React.Component<any, any> {\n  static contextType = AppContext\n\n  render () {\n    if (!this.props.children && !this.props.content)\n      return; // Content must be passed in\n    // Mobile content should be displayed without any padding\n    if (this.context.isMobile)\n      return this.props.children ?this.props.children : this.props.content\n    // Desktop content has some padding\n    return(\n      <Row justify=\"center\">\n        <Col span={SPAN_WIDTH}>\n          {this.props.children || this.props.content}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default PageContent;","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport React, { useState } from \"react\";\n\n/**\n * Allows the user to edit text inline by rendering\n * the string as a button that converts the string \n * into a text field when clicked by the user.\n */\nexport const NameEditor = ({ name, setName }: {\n  name: string;\n  setName: (name: string) => void;\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [form] = Form.useForm();\n\n  const onCancel = () => {\n    form.resetFields();\n    setIsEditing(false);\n  };\n\n  const onFinish = (value) => {\n    setIsEditing(false);\n    setName(value.name);\n  };\n\n  return isEditing ? (\n    <Form\n      form={form}\n      name=\"formData\"\n      layout=\"inline\"\n      onFinish={onFinish}\n      style={{ justifyContent: \"center\" }}\n    >\n      <Form.Item\n        name=\"name\"\n        initialValue={name}\n        rules={[{ required: true, message: \"Name is required.\" }]}\n      >\n        <Input data-testid={`${name}-input`} />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"text\" onClick={onCancel} data-testid={`${name}-cancel`}>\n          Cancel\n        </Button>\n        <Button type=\"ghost\" htmlType=\"submit\" data-testid={`${name}-save`}>\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  ) : (\n    <Button\n      type=\"text\"\n      size=\"large\"\n      icon={isHovered ? <EditOutlined /> : null}\n      style={{ fontSize: \"24px\" }}\n      data-testid={`${name}-edit`}\n      onClick={() => setIsEditing(true)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {name}\n    </Button>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Input, Row, Modal } from 'antd'\nimport { DesktopOutlined, LinkOutlined } from '@ant-design/icons';\nimport { Settings } from './index'\nimport { constants } from '../util/helpers'\nimport { NameEditor } from './NameEditor';\nimport { LoginData } from '../types/authentication';\nimport { AppContext } from '../store/AppContext';\n\ntype ConnectProps = {\n  submitCb: (data: LoginData, showLoading: boolean) => void,\n  cancelConnect: () => void,\n  name: string,\n  keyringName: string,\n  setKeyringName: (name: string) => void,\n  errMsg: string\n}\n\ntype ConnectState = {\n  errMsg: string,\n  isLoading: boolean,\n  modal: boolean,\n  showSettings: boolean\n}\n\nclass Connect extends React.Component<ConnectProps, ConnectState> {\n  static contextType = AppContext;\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      errMsg: null,\n      isLoading: false,\n      modal: false,\n      showSettings: false,\n    }\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderMsg = this.renderMsg.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  componentDidMount() {\n    //@ts-expect-error\n    this.input.focus()\n    this.setState({ isLoading: false  })\n  }\n\n  componentDidUpdate() {\n    if (this.props.name !== constants.DEFAULT_APP_NAME && document.title !== 'Lattice Connector') {\n      document.title = 'Lattice Connector'\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ isLoading: false })\n  }\n\n  handleSubmit() {\n    const deviceID = (document.getElementById(\"deviceIdInput\") as HTMLInputElement).value;\n    const password = (document.getElementById(\"passwordInput\") as HTMLInputElement).value;\n    if (password.length < 8) {\n      this.setState({ isLoading: true, errMsg: \"Your password must be at least 8 characters.\"})\n    } else {\n      this.setState({ isLoading: true, errMsg: null })\n      // Call the connect function. Skip the loading screen so we don't\n      // leave the landing page until we connect.\n      this.props.submitCb({deviceID, password}, false);\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelConnect();\n    this.setState({ isLoading: false, errMsg: null });\n  }\n\n  renderConnectButton() {\n    if (this.state.isLoading && \n        this.state.errMsg === null &&\n        this.props.errMsg === null) {\n      return (\n        <div>\n          <Button type=\"primary\"\n                  style={{ margin: '20px 0 0 0' }}\n                  loading>\n            Connecting...\n          </Button>\n          <br/>\n          <Button type=\"link\" onClick={this.handleCancel}>\n            Cancel\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n        <Button type=\"primary\" onClick={this.handleSubmit} style={{ margin: '20px 0 0 0'}}>\n          Connect\n        </Button>\n      )\n    }\n  }\n\n  renderForm(getFieldDecorator) {\n    return (\n      <div>\n        <Row justify=\"center\">\n          <Input  placeholder=\"DeviceID\" \n                  id=\"deviceIdInput\" \n                  //@ts-expect-error\n                  ref={i => {this.input = i}}\n                  style={{ margin: '10px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          <Input.Password placeholder=\"Password (create for new logins)\" \n                          id=\"passwordInput\" \n                          onPressEnter={this.handleSubmit} \n                          style={{ margin: '20px 0 0 0', width: \"70%\"}} />\n        </Row>\n        <Row justify=\"center\">\n          {this.renderConnectButton()}\n        </Row>\n      </div>\n    )\n  }\n\n  showModal() {\n    this.setState({ modal: true });\n  }\n\n  hideModal() {\n    this.setState({ modal: false, showSettings: false });\n  }\n\n  renderSetupInfo() {\n    return (\n      <div>\n        <center>\n          <h3><b>New User Setup</b></h3>\n        </center>\n        <p>\n          You can use this page to establish a connection between <b>{this.props.name}</b>&nbsp; and your Lattice \n          hardware wallet device.&nbsp;\n          <i>For more general device setup information, please see the&nbsp;\n            <a className=\"lattice-a\" href=\"https://gridplus.io/setup\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            Lattice setup page\n            </a>.</i>\n        </p>\n        <h3><b>Step 1:</b></h3>\n        <p>\n          Unlock your Lattice and find its <b>Device ID</b> on the main menu. This is a six-character code.\n        </p>\n        <h3><b>Step 2:</b></h3>\n        <p>\n          Once you have your Device ID, specify a <b>password</b>. This does <i>not</i> secure any value and \n          is <i>not</i> associated with your wallet seed - it is only used to send secure requests to your device. \n          If you lose your password, you can remove the permission on your device and re-connect with a new one.\n        </p>\n        <h3><b>Step 3:</b></h3>\n        <p>\n          Please ensure your Lattice is <b>online</b> and click \"Connect\". Your device is online if there is a single\n          wifi signal icon on the top-right of the screen.\n        </p>\n      </div>\n    )\n  }\n\n  renderModal() {\n    if (this.state.showSettings) {\n      return (\n        <Modal\n          title=\"Settings\"\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          <Settings inModal={true} />\n        </Modal>\n      )\n    }\n     return (\n      <div>\n        <Modal\n          title={this.props.name === constants.DEFAULT_APP_NAME ? this.props.name : 'Lattice Connector 🔗'}\n          footer={null}\n          visible={this.state.modal}\n          onOk={this.hideModal.bind(this)}\n          onCancel={this.hideModal.bind(this)}\n        >\n          {this.renderSetupInfo()}\n        </Modal>\n      </div>\n    );\n  }\n\n  renderMsg() {\n    let err;\n    if (this.state.errMsg)\n      err = this.state.errMsg;\n    else if (this.props.errMsg)\n      err = this.props.errMsg;\n    if (err)\n      return (\n        <Alert  message={<p><b>Error:</b><br/>{err}</p>} \n                type={\"error\"} \n                style={{margin: \"20px 0 0 0\"}}\n                closable/>\n      );\n    return;\n  }\n\n  render() {\n    const spanWidth = this.context.isMobile ? 24 : 10;\n    const spanOffset = this.context.isMobile ? 0 : 7;\n    const tooLong = this.props.keyringName !== null && this.props.keyringName.length < 5;\n    return (\n      <Row>\n        {this.renderModal()}\n        <Col span={spanWidth} offset={spanOffset}>\n          <center>\n            {this.renderMsg()}\n            <Card bordered={true}>\n              <a  className='lattice-a'\n                  href=\"https://gridplus.io/lattice\" \n                  target='_blank' \n                  rel='noopener noreferrer'\n              >\n                {this.props.keyringName ? (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Connector <LinkOutlined/></h2>\n                ) : (\n                  <h2 style={{margin: \"10px 0 0 0\"}}>Lattice Manager<br/><DesktopOutlined/></h2>\n                )}\n              </a>\n              {this.props.keyringName ? (\n                <div style={{margin: \"2em\"}}>\n                  <br />\n                  <i><h3>Connect to:</h3></i>\n                  <NameEditor\n                    name={this.props.keyringName}\n                    setName={this.props.setKeyringName}\n                  />\n                </div>) : null}\n              {/* @ts-expect-error */}\n              {tooLong ? (<p><b>Error: App name must be more than 4 characters.</b></p>) : this.renderForm()}\n            </Card>\n            <Button type=\"link\" onClick={this.showModal.bind(this)} style={{margin: \"20px 0 0 0\"}}>\n              New User Info\n            </Button>\n            <br/>\n            <Button type=\"link\" onClick={() => {\n              this.setState({ showSettings: true }, this.showModal)\n            }}>\n              Settings\n            </Button>\n            <br/>\n            <Button type=\"link\" href=\"https://gridplus.io/lattice\" target={\"_blank\"} rel={\"noopener noreferrer\"}>\n              About the Lattice\n            </Button>\n          </center>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default Connect\n","import React from 'react';\nimport { Card, Input } from 'antd'\nimport { PageContent } from './index'\nimport 'antd/dist/antd.dark.css'\nimport { AppContext } from '../store/AppContext';\nconst SUBMIT_LEN = 8; // 8 characters in a code\n\nclass Pair extends React.Component<any, any> {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ code: '' })\n    //@ts-expect-error\n    this.input.focus()\n  }\n\n  componentWillUnmount() {\n    this.setState({ code: '' })\n  }\n\n  handleUpdate(e) {\n    try {\n      this.setState({ code: e.target.value.toUpperCase() }, () => {\n        if (this.state.code.length >= SUBMIT_LEN) {\n          this.props.submit(this.state.code)\n        }\n      })\n    } catch (err) {\n      ;\n    }\n  }\n\n  getBoxWidth() {\n    const e = document.getElementById('secret-card')\n    if (!e)\n      return\n    return 0.8 * e.clientWidth\n  }\n\n  getBoxFontHeight() {\n    const w = this.getBoxWidth();\n    if (!w)\n      return;\n    return 0.6 * (w / SUBMIT_LEN);\n  }\n\n  render() {\n    if (this.props.hide) {\n      return null;\n    }\n    const size = this.context.isMobile ? 'small' : 'large';\n    const width = this.getBoxWidth();\n    const fontSize = this.getBoxFontHeight();\n    const content = (\n      <center>\n        <Card title=\"Enter Secret\" bordered={true} id='secret-card'>\n          <p></p>\n          <p>Please enter the pairing secret displayed on your Lattice screen:</p>\n          <Input\n            className='lattice-pairing-box'\n            size={size}\n            id=\"secret\"\n            //@ts-expect-error\n            ref={i => {this.input = i}}\n            onChange={this.handleUpdate.bind(this)}\n            style={{width, fontSize}}\n            value={this.state.code}\n          />\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Pair","import { ContractDefinition, ContractRecord, LatticeContract } from \"./../types/contracts\";\n\nexport const transformContractDefinitionToContractRecord = (\n  def: ContractDefinition \n): ContractRecord => {\n  return {\n    id: def.name,\n    category: \"\",\n    header: { name: def.name, sig: def.sig, numParam: def.params.length },\n    ...def,\n  };\n};\n\nexport const transformLatticeContractToContractRecord = (\n  lc: LatticeContract \n): ContractRecord => {\n  return {\n    id: lc.header.name,\n    name: lc.header.name,\n    sig: lc.header.sig,\n    ...lc,\n  };\n};\n","import { useCallback, useState } from \"react\";\n\n/**\n * The `useRequestFailed` hook is used to more easily manage the state of a request as it is loading,\n * responding with errors, or retrying.\n */\nexport const useRequestFailed = () => {\n  const [error, setError] = useState(undefined);\n  const [retryFunction, setRetryFunction] = useState(undefined);\n\n  /**\n   * Wraps the `retryFunction` in another function that will not only call the `retryFunction` but\n   * also reset the state of the `error` and `retryFunction` variables.\n   */\n  const setRetryFunctionWithReset = useCallback(\n    (func) =>\n      setRetryFunction(() => () => {\n        func();\n        setError(null);\n        setRetryFunction(null);\n      }),\n    [setRetryFunction]\n  );\n\n  return {\n    error,\n    setError,\n    retryFunction,\n    setRetryFunction,\n    setRetryFunctionWithReset,\n  };\n};\n","import { GetAbiRecordsData } from \"gridplus-sdk/dist/types/client\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport SDKSession from \"../sdk/sdkSession\";\nimport { AppContext } from \"../store/AppContext\";\nimport { ContractRecord } from \"../types/contracts\";\nimport { transformLatticeContractToContractRecord } from \"../util/contracts\";\nimport { constants } from \"../util/helpers\";\nimport localStorage from \"../util/localStorage\";\nimport { useRecords } from \"./useRecords\";\nimport { useRequestFailed } from \"./useRequestFailed\";\nconst { CONTRACTS_PER_PAGE, ABI_PACK_URL } = constants;\n\n/**\n * The `useContracts` hook is used to manage the external calls for fetching, adding, and removing\n * contract data on the user's Lattice, as well as fetching the public contract pack data, and\n * caching that data in `localStorage`.\n */\nexport const useContracts = () => {\n  const { session }: { session: SDKSession } = useContext(AppContext);\n\n  const [\n    contracts,\n    addContractsToState,\n    removeContractsFromState,\n    resetContractsInState,\n  ] = useRecords<ContractRecord>(localStorage.getContracts() ?? []);\n\n  const [contractPacks, setContractPacks] = useState(\n    localStorage.getContractPacks()\n  );\n\n  const { error, setError, retryFunction, setRetryFunctionWithReset } =\n    useRequestFailed();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Fetches the installed ABI contracts from the user's Lattice.\n   */\n  const fetchContracts = useCallback(\n    async (fetched = 0, retries = 1) => {\n      setIsLoading(true);\n      return session.client\n        .getAbiRecords({\n          startIdx: fetched,\n          n: CONTRACTS_PER_PAGE,\n          category: \"\",\n        })\n        .then(\n          //@ts-expect-error - SDK return type for `getAbiRecords` needs to be updated\n          (res: GetAbiRecordsData) => {\n            const _contracts = res.records.map(\n              transformLatticeContractToContractRecord\n            );\n            addContractsToState(_contracts);\n            const totalFetched = res.numFetched + fetched;\n            const remainingToFetch = res.numRemaining;\n            if (remainingToFetch > 0) {\n              fetchContracts(totalFetched);\n            } else {\n              setIsLoading(false);\n            }\n          }\n        )\n        .catch((err) => {\n          if (retries > 0) {\n            setError(null);\n            fetchContracts(fetched, retries - 1);\n          } else {\n            setError(err);\n            setIsLoading(false);\n            setRetryFunctionWithReset(fetchContracts);\n          }\n        });\n    },\n    [addContractsToState, session.client, setError, setRetryFunctionWithReset]\n  );\n\n  /**\n   * Removes installed ABI contracts from the user's Lattice.\n   */\n  const removeContracts = (contractsToRemove: ContractRecord[]) => {\n    setIsLoading(true);\n    const sigs = contractsToRemove.map((c) => c.header.sig);\n\n    return session.client\n      .removeAbiRecords({ sigs })\n      .then(() => {\n        removeContractsFromState(contractsToRemove);\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => removeContracts(contractsToRemove));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  /**\n   * Installs new ABI contracts to the user's Lattice.\n   */\n  const addContracts = (contracts: ContractRecord[]) => {\n    setIsLoading(true);\n    session.client.timeout = 2 * constants.ASYNC_SDK_TIMEOUT;\n\n    return session.client\n      .addAbiDefs(contracts)\n      .then(() => {\n        addContractsToState(contracts);\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => addContracts(contracts));\n      })\n      .finally(() => {\n        setIsLoading(false);\n        session.client.timeout = constants.ASYNC_SDK_TIMEOUT;\n      });\n  };\n\n  /**\n   * Fetches the index of the publicly available contract pack data.\n   */\n  const fetchContractPackIndex = useCallback(\n    () =>\n      fetch(`${ABI_PACK_URL}/`)\n        .then((res) => res.json())\n        .catch(console.error),\n    []\n  );\n\n  /**\n   * Fetches the individual contract pack data for a given pack's `fname`.\n   */\n  const fetchContractPack = useCallback(\n    (pack) =>\n      fetch(`${ABI_PACK_URL}/${pack.fname}`)\n        .then((res) => res.json())\n        .catch(console.error),\n    []\n  );\n\n  /**\n   *  Fetches `ContractPacks` by fetching the index and then each pack.\n   */\n  const fetchContractPacks = useCallback(() => {\n    setIsLoading(true);\n    fetchContractPackIndex()\n      .then(async (packs) => {\n        setContractPacks(await Promise.all(packs.map(fetchContractPack)));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [fetchContractPack, fetchContractPackIndex]);\n\n  /**\n   * Resets `ContractPacks` data to it's default.\n   */\n  const resetContractPacksInState = useCallback(() => {\n    localStorage.removeContractPacks();\n  }, []);\n\n  /**\n   *  Fetch and save `ContractPacks` data.\n   */\n  useEffect(() => {\n    if (isEmpty(contractPacks)) {\n      fetchContractPacks();\n    }\n  }, [contractPacks, fetchContractPacks]);\n\n  /**\n   * Whenever `contracts` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setContracts(contracts);\n  }, [contracts]);\n\n  /**\n   * Whenever `contractPacks` data changes, it is persisted to `localStorage`\n   */\n  useEffect(() => {\n    localStorage.setContractPacks(contractPacks);\n  }, [contractPacks]);\n\n  return {\n    contractPacks,\n    fetchContracts,\n    fetchContractPacks,\n    resetContractPacksInState,\n    isLoading,\n    setIsLoading,\n    contracts,\n    addContracts,\n    removeContracts,\n    addContractsToState,\n    removeContractsFromState,\n    resetContractsInState,\n    error,\n    setError,\n    retryFunction,\n  };\n};\n","/**\n * `abbreviateHash` takes a string and returns the first 10 and last 8 characters with an ellipsis between.\n * @param {string} hash - the hash string to shorten.\n */\nexport const abbreviateHash = (hash: string) => hash && hash.length > 24 ? `${hash.slice(0, 10)}...${hash.slice(\n  hash.length - 8,\n  hash.length\n)}` : hash ?? \"\"\n","import {\n  CheckCircleOutlined,\n  LinkOutlined,\n  PlusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Card, Modal, Table, Tag } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useContracts } from \"../hooks/useContracts\";\nimport { abbreviateHash } from \"../util/addresses\";\nimport { constants } from \"../util/helpers\";\n\nexport function ContractCard({ pack }) {\n  const { addContracts, isLoading } = useContracts();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isAdded, setIsAdded] = useState(false);\n  const { url } = constants.CONTRACT_NETWORKS[pack.metadata.network];\n  const { metadata, defs } = pack\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleAddClick = () => {\n    addContracts(defs).then(() => setIsAdded(true));\n  };\n\n  const AddDefsButton = isAdded ? (\n    <Button type=\"default\" icon={<CheckCircleOutlined />} disabled={isAdded}>\n      Added\n    </Button>\n  ) : (\n    <Button\n      type=\"primary\"\n      ghost\n      onClick={handleAddClick}\n      icon={<PlusCircleOutlined />}\n      loading={isLoading}\n    >\n      {isLoading ? \"Adding\" : \"Add to Lattice\"}\n    </Button>\n  );\n\n  return (\n    <Card\n      bordered={true}\n      title={metadata.name}\n      style={{\n        flex: \"1 1 30%\",\n        maxWidth: \"33%\",\n      }}\n      key={`card-${metadata.name}`}\n      extra={AddDefsButton}\n      actions={[\n        <Button type=\"default\" onClick={showModal}>\n          View Contents\n        </Button>,\n        <Button\n          type=\"text\"\n          href={metadata.website}\n          target=\"_blank\"\n          icon={<LinkOutlined />}\n        >\n          Website\n        </Button>,\n      ]}\n      bodyStyle={{ height: \"7em\" }}\n    >\n      <p className=\"lattice-h3\">{metadata.desc}</p>\n\n      <Modal\n        title={metadata.name}\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        width={1000}\n      >\n        <Table dataSource={metadata.addresses} rowKey={(row) => row.address}>\n          <Table.Column\n            title=\"Address\"\n            dataIndex=\"address\"\n            key=\"address\"\n            render={(address) => (\n              <Tag color=\"blue\" key={`tag-${address}`}>\n                <a\n                  className=\"lattice-a\"\n                  href={`${url}/address/${address}`}\n                  target={\"_blank\"}\n                  rel={\"noopener noreferrer\"}\n                  key={`a-${address}`}\n                >\n                  {abbreviateHash(address)}\n                </a>\n              </Tag>\n            )}\n          />\n          <Table.Column title=\"Tag\" dataIndex=\"tag\" key=\"tag\" />\n        </Table>\n      </Modal>\n    </Card>\n  );\n}\n","import { Select } from \"antd\";\nimport React from \"react\";\nimport { constants } from \"../util/helpers\";\nconst { Option } = Select;\n\nexport const SelectNetwork = ({ setNetwork }) => {\n  return (\n    <Select\n      style={{ minWidth: \"150px\", marginRight: \"10px\" }}\n      showSearch\n      defaultValue={constants.DEFAULT_CONTRACT_NETWORK}\n      optionFilterProp=\"children\"\n      onChange={setNetwork}\n      filterOption={(input, option) =>\n        //@ts-ignore\n        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n    >\n      {Object.entries(constants.CONTRACT_NETWORKS).map(([key, value]) => (\n        <Option key={key} value={key}>\n          {value.label}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Pagination, Space } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport chunk from \"lodash/chunk\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useContracts } from \"../hooks/useContracts\";\nimport { constants } from \"../util/helpers\";\nimport { ContractCard } from \"./ContractCard\";\nimport { SelectNetwork } from \"./SelectNetwork\";\nconst pageSize = constants.CONTRACT_PAGE_SIZE;\n\nexport function ContractCardList() {\n  const {\n    contractPacks,\n    isLoading,\n    fetchContractPacks,\n    resetContractPacksInState,\n  } = useContracts();\n  const [filteredPacks, setFilteredPacks] = useState([]);\n  const [paginatedPacks, setPaginatedPacks] = useState([]);\n  const [page, setPage] = useState(1);\n  const [network, setNetwork] = useState(constants.DEFAULT_CONTRACT_NETWORK);\n\n  const filterPacksByNetwork = useCallback(\n    (packs) => packs.filter((pack) => pack?.metadata.network === network),\n    [network]\n  );\n\n  useEffect(() => {\n    setPage(1);\n  }, [filteredPacks]);\n\n  useEffect(() => {\n    setFilteredPacks(filterPacksByNetwork(contractPacks));\n  }, [network, filterPacksByNetwork, contractPacks]);\n\n  useEffect(() => {\n    const pageZeroIndexed = page - 1;\n    const chunkedList = chunk(filteredPacks, pageSize)[pageZeroIndexed] ?? [];\n    setPaginatedPacks(chunkedList);\n  }, [page, filteredPacks]);\n\n  const fuzzyFilterPacksByName = (value) =>\n    fuzzysort\n      .go(value, contractPacks, {\n        key: [\"metadata\", \"name\"],\n      })\n      .map((x) => x.obj);\n\n  const onChange = ({ target: { value } }) => {\n    setPage(1);\n    const fuzzyFilteredPacks = value\n      ? fuzzyFilterPacksByName(value)\n      : contractPacks;\n    setFilteredPacks(filterPacksByNetwork(fuzzyFilteredPacks));\n  };\n\n  return (\n    <div>\n      <p>\n        Once loaded, please click View Contents to see the specific contracts\n        being loaded.\n      </p>\n      <p>\n        Don't see what you're looking for?{\" \"}\n        <a href=\"https://github.com/GridPlus/abi-pack-framework\">\n          Submit a pull request.\n        </a>\n      </p>\n      <Space\n        direction=\"vertical\"\n        style={{\n          width: \"100%\",\n        }}\n      >\n        <Input.Group\n          compact\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            flexWrap: \"wrap\",\n            width: \"100%\",\n          }}\n        >\n          <SelectNetwork setNetwork={setNetwork} />\n          <Input\n            placeholder=\"Filter\"\n            onChange={onChange}\n            style={{ maxWidth: \"80%\" }}\n          />\n          <Button\n            key=\"sync-button\"\n            type=\"link\"\n            icon={<SyncOutlined />}\n            disabled={isLoading}\n            onClick={() => {\n              resetContractPacksInState();\n              fetchContractPacks();\n            }}\n          >\n            Sync\n          </Button>\n        </Input.Group>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"10px\",\n            width: \"100%\",\n          }}\n        >\n          {paginatedPacks.length ? (\n            paginatedPacks.map((pack) => (\n              <ContractCard pack={pack} key={pack.metadata.name} />\n            ))\n          ) : (\n            <div style={{ marginTop: \"20px\" }}>\n              <p>\n                There are not any packs for this network yet.{\" \"}\n                <a href=\"https://github.com/GridPlus/abi-pack-framework\">\n                  Submit a pull request.\n                </a>\n              </p>\n            </div>\n          )}\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <Pagination\n            style={{ margin: \"20px auto 0 auto\" }}\n            current={page}\n            defaultCurrent={1}\n            pageSize={pageSize}\n            defaultPageSize={pageSize}\n            onChange={setPage}\n            total={filteredPacks?.length}\n          />\n        </div>\n      </Space>\n    </div>\n  );\n}\n","import { LoadingOutlined, SyncOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Table } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport intersectionBy from \"lodash/intersectionBy\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useContracts } from \"../hooks/useContracts\";\nimport { ContractRecord } from \"../types/contracts\";\nimport { constants } from \"../util/helpers\";\nconst { CONTRACTS_PER_PAGE } = constants;\n\n/**\n * `ContractTable` is a table of ABI contract data with some management features to\n * make it easier to manage a large amount of contracts.\n */\nexport const ContractTable = () => {\n  const [input, setInput] = useState(\"\");\n  const {\n    isLoading,\n    contracts,\n    fetchContracts,\n    removeContracts,\n    resetContractsInState,\n  } = useContracts();\n  const [filteredContracts, setFilteredContracts] = useState<ContractRecord[]>(\n    []\n  );\n  const [selectedContracts, setSelectedContracts] = useState<ContractRecord[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (contracts.length === 0) {\n      fetchContracts();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setInput(\"\");\n    setFilteredContracts(contracts);\n  }, [contracts, isLoading]);\n\n  const filter = useCallback(\n    (value) =>\n      fuzzysort\n        .go(value, contracts, { keys: [\"header.name\", \"header.sig\"] })\n        .map((x) => x.obj),\n    [contracts]\n  );\n\n  const handleOnSelect = (_, __, _selectedContracts) => {\n    setSelectedContracts(_selectedContracts);\n  };\n\n  const handleOnSelectAll = (_, _selectedContracts) => {\n    setSelectedContracts(_selectedContracts);\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInput(value);\n    const _contracts = value ? filter(value) : contracts;\n    setFilteredContracts(_contracts);\n    setSelectedContracts(intersectionBy(selectedContracts, _contracts, \"key\"));\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Input\n          value={input}\n          placeholder=\"Filter\"\n          disabled={isLoading}\n          onChange={onChange}\n          style={{ marginBottom: \"1em\" }}\n          allowClear\n        />\n        <Button\n          danger\n          type=\"text\"\n          disabled={selectedContracts.length === 0}\n          onClick={() => removeContracts(selectedContracts)}\n          style={{ marginLeft: \"1em\" }}\n        >\n          Remove Selected\n        </Button>\n        <Button\n          key=\"sync-button\"\n          type=\"link\"\n          icon={<SyncOutlined />}\n          disabled={isLoading}\n          onClick={() => {\n            resetContractsInState();\n            fetchContracts();\n          }}\n        >\n          Sync\n        </Button>\n      </div>\n      <Table\n        dataSource={filteredContracts}\n        tableLayout=\"fixed\"\n        rowKey={(r) => r.id}\n        loading={{\n          spinning: isLoading,\n          tip: \"Loading...\",\n          indicator: <LoadingOutlined />,\n        }}\n        pagination={{\n          position: [\"bottomCenter\"],\n          pageSize: CONTRACTS_PER_PAGE,\n          defaultCurrent: 1,\n          showSizeChanger: false,\n        }}\n        rowSelection={{\n          type: \"checkbox\",\n          onSelect: handleOnSelect,\n          onSelectAll: handleOnSelectAll,\n          selectedRowKeys: selectedContracts.map((contract) => contract.id),\n        }}\n        expandable={{\n          expandedRowRender: (record) => (\n            <Table\n              columns={[\n                { title: \"Parameter Name\", dataIndex: \"name\", key: \"name\" },\n                { title: \"Type\", dataIndex: \"typeName\", key: \"typeName\" },\n              ]}\n              dataSource={record.params}\n              pagination={false}\n              rowKey={(r) => r.name}\n            />\n          ),\n          rowExpandable: (record) => record.params.length > 0,\n        }}\n      >\n        <Table.Column\n          title=\"Function Name\"\n          dataIndex={[\"header\", \"name\"]}\n          defaultSortOrder=\"ascend\"\n          sorter={(a: ContractRecord, b: ContractRecord) =>\n            a.header.name.localeCompare(b.val)\n          }\n        />\n        <Table.Column\n          title=\"Identifier\"\n          dataIndex={[\"header\", \"sig\"]}\n          defaultSortOrder=\"ascend\"\n          sorter={(a: ContractRecord, b: ContractRecord) =>\n            a.header.sig.localeCompare(b.val)\n          }\n        />\n      </Table>\n    </div>\n  );\n};\n","import { DownloadOutlined } from \"@ant-design/icons\";\nimport { Button, Card, Input, Result } from \"antd\";\nimport throttle from \"lodash/throttle\";\nimport React, { useContext, useMemo, useState } from \"react\";\nimport { useContracts } from \"../hooks/useContracts\";\nimport { AppContext } from \"../store/AppContext\";\nimport { ContractDefinition } from \"../types/contracts\";\nimport { transformContractDefinitionToContractRecord } from \"../util/contracts\";\nimport { constants } from \"../util/helpers\";\nimport { SelectNetwork } from \"./SelectNetwork\";\nconst defaultNetwork =\n  constants.CONTRACT_NETWORKS[constants.DEFAULT_CONTRACT_NETWORK];\n\nexport const SearchCard = () => {\n  const { session } = useContext(AppContext);\n  const [installing, setInstalling] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [contract, setContract] = useState(\"\");\n  const [defs, setDefs] = useState<ContractDefinition[]>([]);\n  const [network, setNetwork] = useState(constants.DEFAULT_CONTRACT_NETWORK);\n  const { error, setError, addContracts, isLoading, setIsLoading } =\n    useContracts();\n\n  const resetData = () => {\n    setIsLoading(false);\n    setSuccess(false);\n    setInstalling(false);\n    setContract(\"\");\n    setDefs([]);\n  };\n\n  const getNetwork = () =>\n    constants.CONTRACT_NETWORKS[network] ?? defaultNetwork;\n\n  function fetchContractData(input) {\n    if (\n      input.slice(0, 2) !== \"0x\" ||\n      false === /^[0-9a-fA-F]+$/.test(input.slice(2)) ||\n      input.length !== 42\n    ) {\n      // Not a valid address\n      setError(`Invalid ${getNetwork().label} contract address`);\n      resetData();\n    } else {\n      const { label, baseUrl, apiRoute } = getNetwork();\n      fetch(`${baseUrl}/${apiRoute}${input}`)\n        .then((res) => res.json())\n        .then((res) => {\n          // Map confusing error strings to better descriptions\n          if (res.result === \"Contract source code not verified\") {\n            res.result = `Contract source code not published to ${label} or not verified. Cannot determine data.`;\n          }\n          if (res.status === \"0\") {\n            setError(res.result);\n            resetData();\n          } else {\n            try {\n              const result = JSON.parse(res.result);\n              const defs = session.client.parseAbi(\"etherscan\", result, true);\n              setDefs(defs);\n              setContract(input);\n              setError(\"\");\n              setSuccess(false);\n              setIsLoading(false);\n            } catch (err) {\n              setError(err.toString());\n              resetData();\n            }\n          }\n        })\n        .catch((err) => {\n          setError(err.toString());\n          resetData();\n        });\n    }\n  }\n\n  const throttledFetch = useMemo(\n    () => throttle(fetchContractData, 5100),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [network]\n  );\n\n  function addDefs() {\n    setInstalling(true);\n    setError(\"\");\n\n    const contracts = defs.map(transformContractDefinitionToContractRecord);\n\n    addContracts(contracts)\n      .then(() => {\n        setError(\"\");\n        setInstalling(false);\n        setSuccess(true);\n      })\n      .catch((err) => {\n        setError(err);\n        resetData();\n      });\n  }\n\n  const SuccessAlert = () => (\n    <Result\n      status=\"success\"\n      title=\"Success\"\n      subTitle=\"Successfully sent data to your Lattice. You must confirm all\n  functions on your Lattice for them to be saved.\n  Please confirm or reject the definitions before continuing.\"\n    />\n  );\n\n  const ErrorAlert = () => <Result status=\"error\" subTitle={error} />;\n\n  const NetworkLinkList = () => {\n    const networks = Object.entries(constants.CONTRACT_NETWORKS).map(\n      ([, value]) => value\n    );\n    const last = networks.pop();\n    const NetworkLink = ({ network }) => (\n      <a\n        className=\"lattice-a\"\n        href={network.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {network.label}\n      </a>\n    );\n    return (\n      <>\n        {networks.map((network) => (\n          <span key={network.label}>\n            <NetworkLink network={network} />\n            {\", \"}\n          </span>\n        ))}\n        or <NetworkLink network={last} />\n      </>\n    );\n  };\n\n  return (\n    <div>\n      <p>\n        You can install contract data from any supported contract which has been\n        verified by&nbsp;\n        <NetworkLinkList />.\n      </p>\n      <p>Search for a verified smart contract:</p>\n      <Input.Group>\n        <SelectNetwork setNetwork={setNetwork} />\n        <Input.Search\n          style={{ maxWidth: \"80%\" }}\n          placeholder=\"Contract address\"\n          allowClear\n          enterButton\n          loading={isLoading}\n          onSearch={(val) => {\n            setIsLoading(true);\n            throttledFetch(val);\n          }}\n        />\n      </Input.Group>\n\n      {contract && !success && !error && (\n        <Card\n          title={contract}\n          style={{ marginTop: \"20px\" }}\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={addDefs}\n              loading={installing}\n              icon={<DownloadOutlined />}\n            >\n              {installing ? \"Installing...\" : \"Install\"}\n            </Button>,\n          ]}\n        >\n          <p>\n            Found <b>{defs.length}</b> functions to add from this contract.\n          </p>\n        </Card>\n      )}\n      {success && <SuccessAlert />}\n      {error && <ErrorAlert />}\n    </div>\n  );\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nexport const ErrorAlert = ({ error, retryFunction }) => {\n  return error ? (\n    <Alert\n      message=\"Error\"\n      description={error}\n      type=\"error\"\n      closable\n      action={\n        <Button\n          //@ts-expect-error\n          type=\"danger\"\n          onClick={() => {\n            retryFunction && retryFunction();\n          }}\n        >\n          Retry\n        </Button>\n      }\n    />\n  ) : null;\n};\n","import { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { Button, Card, Input, Result, Tabs } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React, { useContext, useState } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\nimport { useFeature } from \"../hooks/useFeature\";\nimport { constants } from \"../util/helpers\";\nimport { ContractCardList } from \"./ContractCardList\";\nimport { ContractTable } from \"./ContractTable\";\nimport { PageContent } from \"./index\";\nimport { SearchCard } from \"./SearchCard\";\nimport \"./styles.css\";\nimport { ErrorAlert } from \"./ErrorAlert\";\nimport { useContracts } from \"../hooks/useContracts\";\n\nconst TAB_KEYS = {\n  PACK: \"1\",\n  SINGLE_ADDR: \"2\",\n  CUSTOM: \"3\",\n  ADDED: \"4\",\n};\nconst manualPlaceholder =\n  '[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_units\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},';\n\nconst EthContracts = () => {\n  const { session } = useContext(AppContext);\n  const { error, setError, retryFunction, addContracts, isLoading, } = useContracts();\n  const [defs, setDefs] = useState([]);\n  const [customDefs, setCustomDefs] = useState([]);\n  const [customDefsStr, setCustomDefsStr] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [tab, setTab] = useState(TAB_KEYS.PACK);\n  const { CAN_VIEW_CONTRACTS } = useFeature();\n\n  function setDefaultState() {\n    setDefs([]);\n    setSuccess(false);\n    setCustomDefs([]);\n    setCustomDefsStr(\"\");\n  }\n\n  function onTabChange(key) {\n    setTab(key);\n    setSuccess(false);\n    setError(null);\n  }\n\n  function addDefs() {\n    const _defs = customDefs ? customDefs : defs;\n    addContracts(_defs)\n      .then(() => {\n        setSuccess(true)\n      })\n      .catch(() => {\n        setSuccess(false)\n      })\n  }\n\n  function renderSuccessAlert(buttonTxt = null) {\n    return (\n      <Result\n        status=\"success\"\n        title=\"Success\"\n        subTitle=\"Successfully sent data to your Lattice. You must confirm all\n                  functions on your Lattice for them to be saved.\n                  Please confirm or reject the definitions before continuing.\"\n        extra={\n          buttonTxt !== null\n            ? [\n                <Button\n                  type=\"primary\"\n                  key=\"buttonTxt\"\n                  onClick={() => {\n                    setSuccess(false);\n                  }}\n                >\n                  {buttonTxt}\n                </Button>,\n              ]\n            : null\n        }\n      />\n    );\n  }\n\n  function renderTabs() {\n    return (\n      <Tabs activeKey={tab} onChange={onTabChange.bind(this)}>\n        <Tabs.TabPane tab=\"Add Packs\" key={TAB_KEYS.PACK} />\n        <Tabs.TabPane tab=\"Add By Address\" key={TAB_KEYS.SINGLE_ADDR} />\n        <Tabs.TabPane tab=\"Add Manually\" key={TAB_KEYS.CUSTOM} />\n        {CAN_VIEW_CONTRACTS && (\n          <Tabs.TabPane tab=\"View Added\" key={TAB_KEYS.ADDED} />\n        )}\n      </Tabs>\n    );\n  }\n\n  // TEMPORARY FUNCTION TO REMOVE FUNCTIONS WITH ZERO LENGTH PARAM NAMES\n  // SEE: https://github.com/GridPlus/gridplus-sdk/issues/154\n  function TMP_REMOVE_ZERO_LEN_PARAMS(defs) {\n    const newDefs: any[] = [];\n    defs.forEach((def) => {\n      let shouldAdd = true;\n      if (def.name.length === 0) {\n        shouldAdd = false;\n      } else {\n        def.params.forEach((param) => {\n          if (param.name.length === 0) shouldAdd = false;\n        });\n      }\n      if (shouldAdd === true) newDefs.push(def);\n    });\n    return newDefs;\n  }\n\n  function renderCustomCard() {\n    return (\n      <div>\n        <p>\n          Here you can add ABI definitions manually. Please stick with Etherscan\n          formatting (i.e. the contents of \"Contract ABI\" in the Contract tab\n          -&nbsp;\n          <a\n            className=\"lattice-a\"\n            href=\"https://etherscan.io/address/0x1494ca1f11d487c2bbe4543e90080aeba4ba3c2b#code\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            example\n          </a>\n          ).\n        </p>\n        <Input.TextArea\n          placeholder={`${manualPlaceholder}...`}\n          autoSize={{ minRows: 5, maxRows: 10 }}\n          value={customDefsStr}\n          onChange={(x) => {\n            const customDefsStr = x.target.value;\n            try {\n              const parsed = JSON.parse(customDefsStr);\n              const customDefs = TMP_REMOVE_ZERO_LEN_PARAMS(\n                session.client.parseAbi(\"etherscan\", parsed, true)\n              );\n              if (customDefs.length > 0) {\n                setCustomDefs(customDefs);\n                setSuccess(false);\n                setCustomDefsStr(customDefsStr);\n              }\n            } catch (err) {\n              console.warn(`Failed to scan for ABI definitions ${err.message}`);\n              setCustomDefs([]);\n              setSuccess(false);\n              setCustomDefsStr(customDefsStr);\n            }\n          }}\n        />\n        <br />\n        <br />\n        {customDefs && customDefs.length > 0 ? (\n          <div>\n            {success ? (\n              <div>\n                <center>\n                  {renderSuccessAlert()}\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setCustomDefs([]);\n                      setCustomDefsStr(\"\");\n                      setSuccess(false);\n                    }}\n                  >\n                    Add More\n                  </Button>\n                </center>\n              </div>\n            ) : (\n              <div>\n                <p>\n                  Found <b>{customDefs.length}</b> functions that can be added.\n                  <br />\n                  <i>\n                    Note: functions with unsupported types are not included.\n                  </i>\n                </p>\n                <Button\n                  type=\"primary\"\n                  onClick={() => {\n                    addDefs();\n                  }}\n                  loading={isLoading}\n                >\n                  {isLoading ? \"Installing...\" : \"Install\"}\n                </Button>\n                {success ? (\n                  <div>\n                    <br />\n                    {renderSuccessAlert()}\n                  </div>\n                ) : null}\n              </div>\n            )}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  function renderCard() {\n    const f = () => {\n      switch (tab) {\n        case TAB_KEYS.CUSTOM:\n          return renderCustomCard();\n        case TAB_KEYS.SINGLE_ADDR:\n          return <SearchCard />;\n        case TAB_KEYS.ADDED:\n          return <ContractTable />;\n        case TAB_KEYS.PACK:\n        default:\n          return <ContractCardList />;\n      }\n    };\n    return (\n      <div>\n        {renderTabs()}\n        {f()}\n      </div>\n    );\n  }\n\n  function render() {\n    const content = (\n      <div>\n        <ErrorAlert\n          error={error}\n          retryFunction={() => {\n            retryFunction();\n            setDefaultState();\n          }}\n        />\n        <Card\n          title={\n            <div>\n              <h3>\n                Contract Data&nbsp;&nbsp;\n                <a\n                  className=\"lattice-a\"\n                  href={constants.CONTRACTS_HELP_LINK}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <QuestionCircleOutlined />\n                </a>\n              </h3>\n            </div>\n          }\n          bordered={true}\n        >\n          {renderCard()}\n        </Card>\n      </div>\n    );\n    return <PageContent content={content} />;\n  }\n  return render();\n};\n\nexport default EthContracts;\n","import { useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\n\n/**\n * `useFeature` is a React hook for feature flags that makes it easy to know when a particular\n * feature is active for a version of the Lattice firmware (or other external data).\n * \n * To add a feature, add a SNAKE_CASE key to the `features` variable with an array that specifies\n * the required version of firmware as [fix, minor, major].\n */\nexport const useFeature = (): { [feature: string]: boolean } => {\n  const { session } = useContext(AppContext);\n  const { fix, minor, major } = session.client.getFwVersion();\n\n  const features = {\n    CAN_VIEW_CONTRACTS: [0, 14, 0],\n  };\n\n  return Object.fromEntries(\n    Object.entries(features).map(([key, [_fix, _minor, _major]]) => [\n      key,\n      fix >= _fix && minor >= _minor && major >= _major,\n    ])\n  );\n};\n","// NOTE: This feature has been shelved for now. The problem is this:\n// 1. We deprecated the ETH wallet and are in the process of deprecating the BTC wallet too\n// 2. Only the paired requester can setup a permission and the web wallet (rebanded manager)\n//    is itself a paired requester.\n// Ideally we could have a true manager that can create a permission on behalf of a paired\n// requester, otherwise the requester needs to have an interface to setup the permission.\n// If we are to use this app as the \"manager\", we cannot manage permissions on it.\n// FOR NOW, I AM HIDING THIS FEATURE IN main.js\n\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Col, Dropdown, Input, Menu, Row, Select, Spin } from 'antd'\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { constants, } from '../util/helpers';\nimport { PageContent } from './index'\nimport './styles.css'\nconst BN = require('bignumber.js');\nconst HOURS = 3600;\nconst DAYS = 86400;\nconst assets = {\n  ETH: {\n    name: 'ETH',\n    decimals: 18,\n  },\n  BTC: {\n    name: 'BTC',\n    decimals: 8,\n  }\n}\n\nclass Permissions extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      success: false,\n      loading: false,\n      asset: assets.ETH,\n      timeMultiplier: HOURS, // conversion of window to seconds\n      value: 0,\n      window: 0,\n    }\n\n    this.submit = this.submit.bind(this);\n    this.updateAsset = this.updateAsset.bind(this);\n    this.updateTimeMultiplier = this.updateTimeMultiplier.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateWindow = this.updateWindow.bind(this);\n  }\n\n  updateAsset(x) {\n    this.setState({ asset: assets[x.key]})\n  }\n\n  updateTimeMultiplier(x) {\n    this.setState({ timeMultiplier: x })\n  }\n\n  updateWindow(evt) {\n    const x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      let s = parseFloat(x);\n      if (x[x.length-1] === '.')\n      //@ts-expect-error\n        s += '.';\n      this.setState({ window: s })\n    }\n    else if (x === '')\n      this.setState({ window: '0' })\n  }\n\n  updateValue(evt) {\n    let x = evt.target.value\n    if (!isNaN(parseFloat(x))) {\n      if (x.length > 1 && x[0] === '0' && x[1] !== '.')\n        x = x.slice(1);\n      this.setState({ value: x })\n    }\n    else if (x === '')\n      this.setState({ value: '0' })\n  }\n\n  submit() {\n    this.setState({ loading: true, error: null, success: false })\n    const req = {\n      currency: this.state.asset.name,\n      decimals: this.state.asset.decimals,\n      timeWindow: Math.floor(parseFloat(this.state.window) * this.state.timeMultiplier),\n      limit: 0,\n      asset: null,\n    };\n    const value = new BN(this.state.value);\n    const decimals = new BN(this.state.asset.decimals);\n    const power = new BN('10').pow(decimals);\n    let limitStr = value.multipliedBy(power).toString(16)\n    if (limitStr.length % 2 > 0)\n      limitStr = `0${limitStr}`;\n    //@ts-expect-error\n    req.limit = `0x${limitStr}`;\n    this.props.session.client.addPermissionV0(req, (err) => {\n      if (err) {\n        this.setState({ error: err.toString(), success: false, loading: false })\n      } else {\n        this.setState({ error: null, success: true, loading: false })\n      }\n    })\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Error\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.loading) {\n      return (\n        <div>\n          <Spin indicator={(<LoadingOutlined/>)}/>\n          <br/>\n        </div>\n      )\n    } else if (this.state.success) {\n      return (\n        <Alert \n          type=\"success\"\n          message=\"Success\"\n          description=\"Successfully added permission to Lattice.\"\n        />\n      )\n    }\n  }\n\n  renderCard() {\n    const timeMultiplierSelect = (\n      <Select defaultValue={HOURS} onChange={this.updateTimeMultiplier}>\n        <Select.Option value={HOURS}>hours</Select.Option>\n        <Select.Option value={DAYS}>days</Select.Option>\n      </Select>\n    )\n\n    const currencyMenu = (\n      <Menu onClick={this.updateAsset}>\n        {Object.keys(assets).map((key) => {\n          return (\n            <Menu.Item key={key}>{key}</Menu.Item>\n          )\n        })}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <p>\n          You can set spending limits for ETH and BTC. If you make a request from this web wallet that is under your\n          spending limit, your Lattice will auto-sign the transaction. Note that this currently only works for simple \n          ETH and BTC transfers.&nbsp;\n           <a className='lattice-a'\n              href={constants.PERMISSIONS_HELP_LINK}\n              target='_blank'\n              rel='noopener noreferrer'\n          >\n            (More info)\n          </a>        \n        </p>\n        <br/>\n        <i>This is a feature prototype. In the future, GridPlus intends to expand this functionality\n        to other assets and more general contract interactions.</i>\n        <br/><br/>\n        <p><b>Currency:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Dropdown overlay={currencyMenu}>\n              <Button>{this.state.asset.name}</Button>\n            </Dropdown>\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Spending Limit:</b></p>\n        <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-value\" \n                  value={this.state.value} \n                  onChange={this.updateValue.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <p><b>Reset Every:</b></p>\n         <Row>\n          <Col span={12} offset={6}>\n            <Input type=\"text\"\n                  id=\"permission-window\"\n                  addonAfter={timeMultiplierSelect}\n                  value={this.state.window} \n                  onChange={this.updateWindow.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Button type=\"primary\" onClick={this.submit}>\n          Set Limit\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={<div>\n          <h3>Spending Limits (Beta)&nbsp;\n            <a  className='lattice-a'\n                href={constants.PERMISSIONS_HELP_LINK}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n              <QuestionCircleOutlined/>\n            </a>\n          </h3>\n        </div>} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Permissions","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Checkbox, Col, Collapse, Input, Radio, Row, Space, Table } from 'antd'\nimport { WarningOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\nimport './styles.css'\nimport omit from \"lodash/omit\"\nimport { constants, getBtcPurpose } from '../util/helpers';\nimport localStorage from '../util/localStorage';\n\nclass Settings extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      settings: localStorage.getSettings(),\n      keyring: localStorage.getKeyring(),\n    }\n    this.getBtcPurposeName = this.getBtcPurposeName.bind(this)\n  }\n\n\n  submit() {\n    // Save the settings to localStorage\n    localStorage.setSettings(this.state.settings)\n    // Reload the page for the changes to take effect\n    window.location.reload();\n  }\n\n  updateUseCustomEndpoint(value) {\n    const settings = this.state.settings;\n    if (value !== true) {\n      // Reset the custom endpoint if this value is false\n      settings.customEndpoint = '';\n    }\n    this.setState({ settings });\n  }\n\n  updateCustomEndpoint(evt) {\n    const settings = this.state.settings;\n    settings.customEndpoint = evt.target.value;\n    this.setState({ settings });\n  }\n\n  updateUseDevLattice(evt) {\n    const settings = this.state.settings;\n    settings.devLattice = evt.target.checked\n    this.setState({ settings }, this.submit)\n  }\n\n  removeKeyring ({ name }) {\n    localStorage.removeKeyringItem(name)\n    this.setState({ keyring: omit(this.state.keyring, name) })\n  }\n\n  resetState() {\n    localStorage.removeRootStore()\n    window.location.reload();\n  }\n\n  renderCustomEndpointSetting() {\n    const { customEndpoint='' } = this.state.settings;\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Connection Endpoint:</h3>\n            <p>\n              If you wish to route messages and connections through your own endpoint, you may specify it here.&nbsp;\n              Otherwise leave blank.&nbsp; See&nbsp;\n              <a  href=\"https://github.com/GridPlus/lattice-connect\"\n                  className='lattice-a'\n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\">\n                this\n              </a> for more information.\n            </p>\n            <div>\n              <Input  placeholder=\"host:port\" \n                      defaultValue={customEndpoint} \n                      onChange={this.updateCustomEndpoint.bind(this)}/>\n            </div>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  handleChangeBitcoinVersionSetting(evt) {\n    const settings = this.state.settings;\n    settings.btcPurpose = parseInt(evt.target.value);\n    this.setState({ settings }, this.submit)\n  }\n\n  getBtcPurposeName() {\n    const purpose = this.state.settings.btcPurpose ?\n                    this.state.settings.btcPurpose :\n                    getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_NONE) {\n      return constants.BTC_PURPOSE_NONE_STR;\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n      return constants.BTC_PURPOSE_LEGACY_STR\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n      return constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n      return constants.BTC_PURPOSE_SEGWIT_STR;\n    } else {\n      return 'Error finding BTC version'\n    }\n  }\n\n  renderBitcoinVersionSetting() {\n    // NOTE: Firmware does not yet support segwit addresses\n    // TODO: Uncomment this when firmware is updated\n    const purpose = getBtcPurpose() || constants.BTC_PURPOSE_NONE;\n    return (\n      <Card>\n        <h4>Bitcoin Wallet Type</h4>\n        <Radio.Group  onChange={this.handleChangeBitcoinVersionSetting.bind(this)}\n                      defaultValue={purpose}>\n          <Space direction=\"vertical\">\n            <Radio value={constants.BTC_PURPOSE_NONE}>\n              Hide BTC Wallet\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_SEGWIT}>\n              {constants.BTC_PURPOSE_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_WRAPPED_SEGWIT}>\n              {constants.BTC_PURPOSE_WRAPPED_SEGWIT_STR}\n            </Radio>\n            <Radio value={constants.BTC_PURPOSE_LEGACY}>\n              {constants.BTC_PURPOSE_LEGACY_STR}\n            </Radio>\n          </Space>\n        </Radio.Group>\n      </Card>\n    )\n  }\n\n  renderDevLatticeSetting() {\n    const { devLattice } = this.state.settings;\n    return (\n      <Card>\n        <h4>Debug Settings</h4>\n        <Row justify='center' style={{ margin: '10px 0 0 0'}}>\n          <Button type=\"link\" onClick={this.resetState} className='warning-a'>\n          <WarningOutlined/>&nbsp;Reset App State\n        </Button>\n        </Row>\n        <Row justify='center' style={{ margin: '20px 0 0 0'}}>\n          <Checkbox onChange={this.updateUseDevLattice.bind(this)} checked={devLattice}>\n            Using Dev Lattice\n          </Checkbox>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderKeyringsSetting() {\n    const keyring = localStorage.getKeyring()\n    const cols = [\n      { \n        title: 'App Name', \n        dataIndex: 'name', \n        key: 'name'\n      }, \n      { \n        title: 'Action', \n        dataIndex: 'action', \n        key: 'action',\n        render: (text, record) => (\n          <Button type=\"link\" onClick={() => {this.removeKeyring(record)}}>Forget</Button>\n        ) \n      }\n    ]\n    const data: any[] = [];\n    Object.keys(keyring)\n      .sort((a, b) => { return a.toLowerCase() > b.toLowerCase() ? 1 : -1 })\n      .forEach((name) => { data.push({ name, key: name }) })\n    return (\n      <Card>\n        <Row justify='center'>\n          <Col span={20}>\n            <h3>Third Party Connections</h3>\n            <p>\n              Manage connections to your Lattice. Third party apps should be listed here if they are connected to your device.\n            </p>\n            <Collapse>\n              {/* @ts-expect-error */}\n              <Collapse.Panel header={`Connections List (${data.length})`}>\n                <Table dataSource={data} columns={cols}/>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n\n  renderCard() {\n    return (\n      <div>\n        {this.renderKeyringsSetting()}\n        {this.renderCustomEndpointSetting()}\n        {this.renderBitcoinVersionSetting()}\n        {this.renderDevLatticeSetting()}\n        <br/>\n        <Button type=\"primary\" onClick={this.submit.bind(this)}>\n          Update and Reload\n        </Button>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Settings'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    if (this.props.inModal)\n      return (<center>{this.renderCard()}</center>);\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Settings","import isEmpty from \"lodash/isEmpty\";\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../store/AppContext\";\nimport { Record } from \"../types/records\";\nimport { constants } from \"../util/helpers\";\nimport { useRequestFailed } from \"./useRequestFailed\";\nconst { ADDRESSES_PER_PAGE } = constants;\nconst ADDRESS_RECORD_TYPE = 0;\n\n/**\n * The `useAddresses` hook is used to manage the external calls for fetching, adding, and removing\n * key-value address data on the user's Lattice and caching that data in `localStorage`.\n */\nexport const useAddresses = () => {\n  const {\n    session,\n    isLoadingAddresses,\n    setIsLoadingAddresses,\n    addresses,\n    addAddressesToState,\n    removeAddressesFromState,\n    resetAddressesInState,\n  } = useContext(AppContext);\n\n  const { error, setError, retryFunction, setRetryFunctionWithReset } =\n    useRequestFailed();\n\n  /**\n   * Fetches the installed addresses from the user's Lattice.\n   */\n  const fetchAddresses = useCallback(\n    async (fetched = 0, retries = 1) => {\n      setIsLoadingAddresses(true);\n\n      return session.client\n        .getKvRecords({\n          start: fetched,\n          n: ADDRESSES_PER_PAGE,\n        })\n        .then((res) => {\n          addAddressesToState(res.records);\n          const totalFetched = res.fetched + fetched;\n          const remainingToFetch = res.total - totalFetched;\n          if (remainingToFetch > 0) {\n            fetchAddresses(fetched + res.fetched);\n          } else {\n            setError(null);\n            setIsLoadingAddresses(false);\n          }\n        })\n        .catch((err) => {\n          if (retries > 0) {\n            setError(null);\n            fetchAddresses(fetched, retries - 1);\n          } else {\n            setError(err);\n            setIsLoadingAddresses(false);\n            setRetryFunctionWithReset(fetchAddresses);\n          }\n        });\n    },\n    [\n      addAddressesToState,\n      session.client,\n      setError,\n      setIsLoadingAddresses,\n      setRetryFunctionWithReset,\n    ]\n  );\n\n  /**\n   * Removes installed addresses from the user's Lattice.\n   */\n  const removeAddresses = (selectedAddresses: Record[]) => {\n    const ids = selectedAddresses.map((r) => parseInt(r.id));\n    if (isEmpty(ids)) return;\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .removeKvRecords({ ids })\n      .then(() => {\n        removeAddressesFromState(selectedAddresses);\n        setError(null);\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => removeAddresses(selectedAddresses));\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  /**\n   * Adds new addresses to the user's Lattice.\n   */\n  const addAddresses = async (addressesToAdd) => {\n    setIsLoadingAddresses(true);\n\n    return session.client\n      .addKvRecords({\n        caseSensitive: false,\n        type: ADDRESS_RECORD_TYPE,\n        records: addressesToAdd,\n      })\n      .then(() => {\n        // TODO: Remove fetch and call addAddressesToState() with the address data when FW is\n        //  updated to return address data. See GitHub issue:\n        //  https://github.com/GridPlus/k8x_firmware_production/issues/2323\n        fetchAddresses();\n      })\n      .catch((err) => {\n        setError(err);\n        setRetryFunctionWithReset(() => addAddresses(addressesToAdd));\n        throw err\n      })\n      .finally(() => {\n        setIsLoadingAddresses(false);\n      });\n  };\n\n  return {\n    fetchAddresses,\n    addresses,\n    addAddresses,\n    addAddressesToState,\n    removeAddresses,\n    removeAddressesFromState,\n    resetAddressesInState,\n    isLoadingAddresses,\n    error,\n    setError,\n    retryFunction,\n  };\n};\n","import { MinusSquareFilled, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input, Modal, Space } from \"antd\";\nimport _ from \"lodash\";\nimport React, { useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { ErrorAlert } from \"./ErrorAlert\";\n\nconst MAX_RECORD_LEN = 63; // 63 characters max for both key and vlaue\nexport const keyIsDuplicatedErrorMessage =\n  \"You already have a tag with this address on your device.\";\nexport const valIsDuplicatedErrorMessage =\n  \"You already have a tag with this name on your device.\";\n\nexport const AddAddressesButton = () => {\n  const {\n    addresses,\n    addAddresses,\n    isLoadingAddresses,\n    error,\n    setError,\n    retryFunction,\n  } = useAddresses();\n  const [form] = Form.useForm();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = () => {\n    form.validateFields().then(({ recordsToAdd }) => {\n      // Transform recordsToAdd data into { key: val } for SDK\n      const addresses = _.chain(recordsToAdd)\n        .keyBy(\"key\")\n        .mapValues(\"val\")\n        .value();\n\n      addAddresses(addresses)\n        .then(hideModal)\n        .catch(console.error);\n    });\n  };\n\n  const onFinishFailed = () => {\n    setError(\"Unable to submit. Fix errors in form and try again.\");\n  };\n\n  const onFieldsChange = () => {\n    setError(null);\n  };\n\n  return (\n    <>\n      <Button type=\"ghost\" onClick={showModal} icon={<PlusOutlined />}>\n        Add\n      </Button>\n      <Modal\n        title=\"Add Address Tags\"\n        visible={isModalVisible}\n        maskClosable={false}\n        onOk={form.submit}\n        onCancel={handleCancel}\n        destroyOnClose={true}\n        footer={[\n          <Button type=\"link\" onClick={handleCancel} key=\"cancel\">\n            Cancel\n          </Button>,\n          <Button\n            type=\"primary\"\n            loading={isLoadingAddresses}\n            onClick={form.submit}\n            key=\"add\"\n          >\n            Add\n          </Button>,\n        ]}\n      >\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <ErrorAlert error={error} retryFunction={retryFunction} />\n          <Form\n            form={form}\n            name=\"formData\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            onFieldsChange={onFieldsChange}\n            autoComplete=\"off\"\n            preserve={false}\n            layout=\"vertical\"\n          >\n            <Form.List\n              name=\"recordsToAdd\"\n              initialValue={[{ key: null, val: null }]}\n            >\n              {(fields, { add, remove }) => (\n                <>\n                  {fields.map(({ key, name, ...restField }) => (\n                    <div\n                      key={`${name}-inputs`}\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        marginBottom: \"1em\",\n                        width: \"100%\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          flexGrow: 1,\n                        }}\n                      >\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"key\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Address is required.\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, key) => {\n                                return addresses?.some((r) => r.key === key)\n                                  ? Promise.reject(\n                                      new Error(keyIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Address\"}\n                            data-testid={`${name}-address-input`}\n                          />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"val\"]}\n                          validateTrigger={[\"onChange\", \"onBlur\"]}\n                          rules={[\n                            { required: true, message: \"Name is required\" },\n                            {\n                              max: MAX_RECORD_LEN,\n                              type: \"string\",\n                              message: `Must be shorter than ${MAX_RECORD_LEN} characters.`,\n                            },\n                            {\n                              validator: (rule, val) => {\n                                return addresses?.some((r) => r.val === val)\n                                  ? Promise.reject(\n                                      new Error(valIsDuplicatedErrorMessage)\n                                    )\n                                  : Promise.resolve();\n                              },\n                              validateTrigger: [\"onChange\", \"onBlur\"],\n                            },\n                          ]}\n                        >\n                          <Input\n                            addonBefore={\"Name\"}\n                            data-testid={`${name}-name-input`}\n                          />\n                        </Form.Item>\n                      </div>\n                      {name > 0 ? (\n                        <Button\n                          type=\"text\"\n                          icon={<MinusSquareFilled />}\n                          disabled={isLoadingAddresses}\n                          style={{\n                            height: \"auto\",\n                            marginLeft: \"1em\",\n                            marginBottom: \"1.2em\",\n                          }}\n                          onClick={() => remove(name)}\n                        />\n                      ) : null}\n                    </div>\n                  ))}\n                  <Form.Item>\n                    <Button\n                      type=\"dashed\"\n                      block\n                      icon={<PlusOutlined />}\n                      disabled={isLoadingAddresses}\n                      onClick={add}\n                    >\n                      Add Another Address Tag\n                    </Button>\n                  </Form.Item>\n                </>\n              )}\n            </Form.List>\n          </Form>\n        </Space>\n      </Modal>\n    </>\n  );\n};\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Table } from \"antd\";\nimport fuzzysort from \"fuzzysort\";\nimport intersectionBy from \"lodash/intersectionBy\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { constants } from \"../util/helpers\";\nimport { abbreviateHash } from \"../util/addresses\";\nconst { ADDRESSES_PER_PAGE } = constants;\n\n/**\n * `AddressTable` is a table of key-value pairs of names and hashes with some management features to\n * make it easier to manage a large amount of addresses.\n */\nexport const AddressTable = () => {\n  const { isLoadingAddresses, addresses, removeAddresses } = useAddresses();\n  const [input, setInput] = useState(\"\");\n  const [filteredAddresses, setFilteredAddresses] = useState([]);\n  const [selectedAddresses, setSelectedAddresses] = useState([]);\n\n  useEffect(() => {\n    setInput(\"\");\n    setFilteredAddresses(addresses);\n  }, [addresses, isLoadingAddresses]);\n\n  const filter = useCallback(\n    (value) =>\n      fuzzysort\n        .go(value, addresses, { keys: [\"key\", \"val\"] })\n        .map((x) => x.obj),\n    [addresses]\n  );\n\n  const handleOnSelect = (_, __, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const handleOnSelectAll = (_, _selectedAddresses) => {\n    setSelectedAddresses(_selectedAddresses);\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInput(value);\n    const _addresses = value ? filter(value) : addresses;\n    setFilteredAddresses(_addresses);\n    setSelectedAddresses(intersectionBy(selectedAddresses, _addresses, \"key\"));\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Input\n          value={input}\n          placeholder=\"Filter\"\n          disabled={isLoadingAddresses}\n          onChange={onChange}\n          style={{ marginBottom: \"1em\" }}\n          allowClear\n        />\n        <Button\n          danger\n          type=\"text\"\n          disabled={selectedAddresses.length === 0}\n          onClick={() =>\n            removeAddresses(selectedAddresses)\n              .then(() => {\n                setSelectedAddresses([]);\n              })\n          }\n          style={{ marginLeft: \"1em\" }}\n        >\n          Remove Selected\n        </Button>\n      </div>\n      <Table\n        dataSource={filteredAddresses}\n        tableLayout=\"fixed\"\n        loading={{\n          spinning: isLoadingAddresses,\n          tip: \"Loading...\",\n          indicator: <LoadingOutlined />,\n        }}\n        pagination={{\n          position: [\"bottomCenter\"],\n          pageSize: ADDRESSES_PER_PAGE,\n          defaultCurrent: 1,\n          showSizeChanger: false,\n        }}\n        rowSelection={{\n          type: \"checkbox\",\n          onSelect: handleOnSelect,\n          onSelectAll: handleOnSelectAll,\n          selectedRowKeys: selectedAddresses.map((x) => x.key),\n        }}\n      >\n        <Table.Column\n          title=\"Name\"\n          dataIndex=\"val\"\n          key=\"val\"\n          defaultSortOrder=\"ascend\"\n          sorter={(a: any, b: any) => a.val.localeCompare(b.val)}\n        />\n        <Table.Column\n          title=\"Address\"\n          dataIndex=\"key\"\n          key=\"key\"\n          render={(key) => abbreviateHash(key)}\n          sorter={(a: any, b: any) => a.key.localeCompare(b.key)}\n        />\n      </Table>\n    </div>\n  );\n};\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { Button, Card } from \"antd\";\nimport \"antd/dist/antd.dark.css\";\nimport React, { useEffect } from \"react\";\nimport { useAddresses } from \"../hooks/useAddresses\";\nimport { AddAddressesButton } from \"./AddAddressesButton\";\nimport { AddressTable } from \"./AddressTable\";\nimport { PageContent } from \"./index\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { ErrorAlert } from \"./ErrorAlert\";\n\nconst AddressTagsPage = () => {\n  const {\n    fetchAddresses,\n    isLoadingAddresses,\n    addresses,\n    resetAddressesInState,\n    error,\n    retryFunction,\n  } = useAddresses();\n\n  // Fetch and Cache Addresses\n  useEffect(() => {\n    if (isEmpty(addresses) && !isLoadingAddresses) {\n      fetchAddresses();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const extra = [\n    <Button\n      key=\"sync-button\"\n      type=\"link\"\n      icon={<SyncOutlined />}\n      disabled={isLoadingAddresses}\n      onClick={() => {\n        resetAddressesInState();\n        fetchAddresses();\n      }}\n    >\n      Sync\n    </Button>,\n    <AddAddressesButton key=\"add-addresses-button\" />,\n  ];\n\n  return (\n    <PageContent>\n      <ErrorAlert error={error} retryFunction={retryFunction} />\n      <Card title={\"Saved Addresses\"} extra={extra} bordered={true}>\n        <AddressTable />\n      </Card>\n    </PageContent>\n  );\n};\n\nexport default AddressTagsPage;\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { AuditOutlined, DesktopOutlined, TagsOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\nimport { constants } from '../util/helpers';\nimport { Card, Col, Divider, Row } from 'antd'\n\nclass Landing extends React.Component<any, any> {\n  renderCard() {\n    return (\n      <Card bordered={true} style={{textAlign: \"center\"}}>\n        <Row justify='center'>\n          <Col span={20}>\n            <p className='lattice-h1'><DesktopOutlined/>&nbsp;Lattice Manager</p>\n            <p className='lattice-h4'>\n              Manage secure data on your Lattice hardware wallet device for a better web3 experience:\n            </p>\n            <br/>\n          </Col>\n        </Row>\n        <Row justify='center'>\n          <Col span={20}>\n            <p>\n              <a  href={constants.TAGS_HELP_LINK}\n                  className='lattice-a'\n                  target='_blank'\n                  rel='noopener noreferrer'\n              >\n                <TagsOutlined/>&nbsp;\n                <b>Address Tags</b>&nbsp;\n              </a>\n              <br/>\n              <i>Give names to your favorite contracts or recipient addresses.</i>\n            </p>\n            <br/>\n          </Col>\n        </Row>\n        <Row justify='center'>\n          <Col span={20}>\n            <p>\n              <a  href={constants.CONTRACTS_HELP_LINK}\n                  className='lattice-a'\n                  target='_blank'\n                  rel='noopener noreferrer'\n              >\n                <AuditOutlined/>&nbsp;\n                <b>Contracts</b>&nbsp;\n              </a>\n              <br/>\n              <i>Add your favorite smart contracts for better transaction request readability.</i>\n            </p>\n          </Col>\n        </Row>\n        <Divider/>\n        <img\n          src=\"lattice-landing.jpg\"\n          style={{ maxHeight: \"500px\", maxWidth: \"100%\" }}\n          alt=\"lattice-one-device\"\n        />\n      </Card>\n    )\n  }\n\n\n  render() {\n    return (\n      <PageContent content={this.renderCard()}/>\n    )\n  }\n}\n\nexport default Landing","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { PageContent } from './index'\n\nclass Loading extends React.Component<any, any> {\n  render() {\n    const content = (\n      <center>\n        <Card title=\"Loading\" bordered={true}>\n          {this.props.spin !== false ? (\n            <Spin indicator={<LoadingOutlined/>} />\n          ) : null}\n          <p>{this.props.msg ? this.props.msg : \"Waiting for data from your Lattice\"}</p>\n          {this.props.onCancel ? (\n            <Button type='link' onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n          ) : null}\n        </Card>\n      </center>\n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Loading","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Card, Button } from 'antd'\n\nclass Error extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.keyPressListener = this.keyPressListener.bind(this);\n    this.submit = this.submit.bind(this)\n   }\n\n  componentDidMount() {\n    window.addEventListener('keypress', this.keyPressListener)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.keyPressListener)\n  }\n\n  keyPressListener(e) {\n    if (e.key === 'Enter')\n      this.submit()\n  }\n\n  submit() {\n    this.props.retryCb()\n  }\n\n  render() {\n    return (\n      <center>\n        <Card title=\"Error\" bordered={true}>\n          <p>{this.props.msg}</p>\n          {this.props.retryCb ? (\n            <Button id=\"submitButton\"\n              //@ts-expect-error\n              onClick={this.submit} type=\"danger\">\n              {this.props.btnMsg || \"Retry\"}\n            </Button>\n          ): null}\n        </Card>\n      </center>\n    )\n  }\n}\n\nexport default Error","\nimport React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Avatar, Divider, Statistic, List, Row, Card, Tag} from 'antd';\nimport { \n  CaretLeftOutlined, CaretRightOutlined, ClockCircleOutlined, \n  ArrowDownOutlined, ArrowUpOutlined, ReloadOutlined\n} from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { constants } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\n\nclass Wallet extends React.Component<any, any> {\n  static contextType = AppContext;\n\n  componentDidMount() {\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n  }\n\n  getInnerWidth() {\n    return document.getElementById('main-content-inner')?.offsetWidth;\n  }\n\n  // Make sure text doesn't overflow on smaller screens. We need to trim larger strings\n  ensureTrimmedText(text) {\n    if (!this.context.isMobile) return text;\n    const maxChars = this.getInnerWidth() / 22;\n    if (text.length > maxChars) return `${text.slice(0, maxChars)}...`\n    return text;\n  }\n\n  // Render a transaction in a list\n  renderListItem(item) {\n    // Label to view transaction on explorer\n    const label = (\n      //@ts-expect-error\n      <div align={this.context.isMobile ? \"left\" : \"right\"}>\n        {item.confirmed ? (\n          <p>\n            {item.incoming ? 'Received ' : 'Sent '}\n            {getDateDiffStr(item.timestamp)} ago\n          </p>) : null}\n        <Button size=\"small\" \n                href={`${constants.BTC_TX_BASE_URL}/${item.id}`} \n                target=\"_blank\"\n          >View</Button>\n      </div>\n    );\n    if (item.value === 0) {\n      // This is an internal transaction, meaning all spenders and recipients\n      // are addresses we control\n      return (\n        <List.Item key={item.hash}>\n          <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                          title='Internal Transaction'\n                          description='This transaction sender and recipient are your addresses.'\n          />\n          {label}\n        </List.Item>\n      )\n    }\n    // Information about the transaction\n    const title = `${item.value / Math.pow(10, 8)} BTC`\n    const subtitle = `\\t${this.ensureTrimmedText(item.recipient)}`;\n    const itemMeta = (\n      <List.Item.Meta avatar={<Avatar src={'/BTC.png'}/>}\n                      title={item.confirmed ? (\n                        <p>{`${title}`}</p>\n                      ) : (\n                        <p><i>{`${title}`}</i></p>\n                      )}\n                      description={item.confirmed ? (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          {`${subtitle}`}\n                        </p>\n                      ) : (\n                        <p>\n                          {item.incoming ? (\n                            <ArrowDownOutlined/>\n                          ) : (\n                            <ArrowUpOutlined/>\n                          )}\n                          <i>{`${subtitle}`}</i>\n                        </p>\n                      )}\n      />\n    )\n    if (this.context.isMobile) {\n      return (\n        <List.Item key={item.hash}>\n          <Row justify='center'>{itemMeta}</Row>\n          <Row justify='center'>{label}</Row>\n        </List.Item>\n      )    \n    } else {\n      return(\n        <List.Item key={item.hash}>\n          {itemMeta}\n          {label}\n        </List.Item>\n      )\n    }\n  }\n\n  renderLastUpdatedTag() {\n    if (!this.props.session)\n      return;\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return (\n        <Tag color={'red'}>Never</Tag>\n      )\n    }\n    //@ts-expect-error\n    const elapsedSec = Math.floor((new Date() - lastUpdated) / 1000);\n    let elapsed, timeType, color;\n    if (elapsedSec < 60) {\n      // Just display that it was updated \"seconds\" ago if we're under a minute\n      elapsed = '';\n      timeType = 'seconds';\n      color = 'green';\n    } else if (elapsedSec < 3600) {\n      // A couple minutes is fine, but more than 10 and there's probably a connectivity\n      // problem -- display orange warning tag\n      elapsed = Math.floor(elapsedSec / 60);\n      timeType = elapsed === 1 ? 'min' : 'mins';\n      color = 'green'\n    } else if (elapsedSec < 172800) {\n      // Less than a 2 days we display hours \n      elapsed = Math.floor(elapsedSec / 3600);\n      timeType = elapsed === 1 ? 'hour' : 'hours';\n      color = 'orange';\n    } else { \n      // Otherwise display days\n      elapsed = Math.floor(elapsedSec / 86400);\n      timeType = 'days';\n      color = 'red';\n    }\n    return (\n      <Tag color={color}>{`${elapsed} ${timeType} ago`}</Tag>\n    )\n  }\n\n  renderList() {\n    const txs = {\n      confirmed: this.props.session.getBtcTxs(),\n      pending: this.props.session.getBtcTxs(false),\n    }\n    return (\n      <div>\n        {txs.pending.length > 0 ? (\n          <Card title={<p><ClockCircleOutlined/> Pending</p>} \n                bordered={true}\n                style={{ margin: '0 0 30px 0'}}>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={txs.pending}\n              renderItem={item => (\n                this.renderListItem(item)\n              )}\n            />\n          </Card>\n        ): null}\n        <Card title=\"Transactions\" bordered={true}>\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={txs.confirmed}\n            renderItem={item => (\n              this.renderListItem(item)\n            )}\n          />\n        </Card>\n      </div>\n    )\n  }\n\n  renderHeader() {\n    const btcBalance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    const btcPrice = this.props.session.btcPrice;\n    return (\n      <div>\n        <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            <Statistic title=\"Balance\" value={`${btcBalance} BTC`} />\n        </Row>\n        <Row justify='center'>\n          <Statistic title=\"USD Value\" value={btcBalance * btcPrice} precision={2} />\n        </Row>\n      </div>\n    )\n  }\n\n  renderPages() {\n    const page = this.props.session.getPage();\n    const txs = this.props.session.getBtcTxs();\n    return (\n      <center style={{margin: \"20px 0 0 0\"}}>\n        {page > 1 ? (\n          <Button onClick={() => {this.props.pageTurnCb(page-1)}}>\n            <CaretLeftOutlined/>\n          </Button>\n        ) : null}\n        {txs.length >= constants.PAGE_SIZE ? (\n          <Button onClick={() => { this.props.pageTurnCb(page+1)}}>\n            <CaretRightOutlined/>\n          </Button>\n        ): null}\n      </center>\n    )\n  }\n\n  renderStartCard() {\n    return (\n      <Card title={`BTC Wallet`} bordered={true}>\n        <center>\n          <p>You have not loaded any addresses yet.</p>\n          <Button size=\"large\" \n                  type=\"primary\" \n                  ghost \n                  onClick={() => {this.props.refreshData()}}\n          >\n            Start\n          </Button>\n        </center>\n      </Card>\n    )\n  }\n\n  renderContent() {\n    const lastUpdated = this.props.session.lastFetchedBtcData;\n    if (!lastUpdated) {\n      return this.renderStartCard();\n    }\n    return (\n      <div>\n        <Card title={`BTC Wallet`} bordered={true}>\n          <Row justify='center'>\n            Last Update&nbsp;{this.renderLastUpdatedTag()}\n            <Button size=\"small\" \n                    type=\"primary\" \n                    ghost \n                    onClick={() => {this.props.refreshData()}}\n            >\n              Refresh <ReloadOutlined/>\n            </Button>\n          </Row>\n          <Row justify='center' style={{margin: \"20px 0 0 0\"}}>\n            {this.renderHeader()}\n          </Row>\n        </Card>\n        <Divider/>\n        <div>\n          {this.renderList()}\n          {this.renderPages()}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderContent()}\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Wallet\n\n// Get a human readable, string representation of the difference\n// between two dates\nfunction getDateDiffStr(ts) {\n  const then = new Date(ts);\n  const now = new Date();\n  const min = 1000 * 60;\n  const hour = min * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = week * 4;\n  const year = month * 12;\n\n  //@ts-expect-error\n  const diff = now - then;\n\n  if (diff / min < 1) {\n    return 'seconds';\n  } else if (diff / hour < 1) {\n    return `${Math.floor(diff/min)} minutes`;\n  } else if (diff / day < 1) {\n    return `${Math.floor(diff/hour)} hours`;\n  } else if (diff / week < 1) {\n    return `${Math.floor(diff/day)} days`;\n  } else if (diff / month < 1) {\n    return `${Math.floor(diff/week)} weeks`;\n  } else if (diff / year < 1) {\n    return `${Math.floor(diff/month)} months`;\n  } else {\n    return `${Math.floor(diff/year)} years`\n  }\n\n}","const Buffer = require('buffer/').Buffer\nconst { validateBtcAddr } = require('./helpers');\n\nexport const allChecks = {\n  'ETH': {\n    full: checkEth,\n    recipient: checkEthRecipient,\n    value: checkNumericValue,\n  },\n  'BTC': {\n    full: checkBtc,\n    recipient: validateBtcAddr,\n    value: checkNumericValue,\n  }\n}\n\n// Checks for Ethereum transfers (ETH or token)\nfunction checkEth(data) {\n  return fullCheck(data, checkEthRecipient);\n}\n\n// Checks for Bitcoin transfers\nfunction checkBtc(data) {\n  return fullCheck(data, validateBtcAddr);\n}\n\n// Perform a check on the recipient and value\n// @returns bool -- true if params are both valid\nfunction fullCheck(data, recipientCheck) {\n  return true === recipientCheck(data.recipient) && true === checkNumericValue(data.value);\n} \n\nfunction checkEthRecipient(recipient) {\n  if (recipient === '') return null;\n  try {\n    // Make sure there is a 0x prefix\n    const isPrefixed = recipient.slice(0, 2) === '0x';\n    // Check that the address contains exactly 20 hex bytes.\n    // If any of the data is non-hex, the length will be shorter\n    const correctLength = Buffer.from(recipient.slice(2), 'hex').length === 20;\n    return isPrefixed === true && correctLength === true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction checkNumericValue(value) {\n  if (value === '') return false;\n  try {\n    const num = Number(value);\n    return !isNaN(num) && num >= 0;\n  } catch (e) {\n    return false;\n  }\n}\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Alert, Button, Card, Row, Input, InputNumber, Empty, Statistic, notification } from 'antd'\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { allChecks } from '../../util/sendChecks';\nimport { constants, buildBtcTxReq, getBtcNumTxBytes } from '../../util/helpers'\nimport '../styles.css'\nimport { AppContext } from '../../store/AppContext';\nconst RECIPIENT_ID = \"recipient\";\nconst VALUE_ID = \"value\";\n\nclass Send extends React.Component<any, any> {\n  static contextType = AppContext;\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipient: '',\n      value: null,\n      recipientCheck: null,\n      valueCheck: null,\n      error: null,\n      isLoading: false,\n      txHash: null,\n      btcFeeRate: constants.BTC_DEFAULT_FEE_RATE,\n      ensResolvedAddress: null,\n    }\n\n    this.handleENSResolution = this.handleENSResolution.bind(this);\n    this.renderBanner = this.renderBanner.bind(this);\n    this.renderSubmitButton = this.renderSubmitButton.bind(this);\n    this.renderValueLabel = this.renderValueLabel.bind(this);\n    this.submit = this.submit.bind(this);\n    this.buildBtcRequest = this.buildBtcRequest.bind(this);\n    this.updateBtcFeeRate = this.updateBtcFeeRate.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://blockstream.info/api/fee-estimates')\n    .then((response) => response.json())\n    .then((resp) => {\n      if (resp['1']) { // Expected confirmation in 1 block\n        this.setState({ btcFeeRate: Math.ceil(Number(resp['1'])) })\n      }\n      if (this.props.session) {\n        this.props.session.getBtcWalletData()\n      }\n    })\n    .catch((err) => {\n      console.error(`Error from fetching fee rates: ${err.toString()}`)\n    })\n  }\n\n  //========================================================\n  // STATE MANAGERS\n  //========================================================\n\n  handleENSResolution(err, address) {\n    if (err || address === null)\n      return this.setState({ recipientCheck: false, ensResolvedAddress: null })\n    // If we got an address, stash that under \"ensResolvedAddress\" so as to not\n    // overwrite the text in the display component.\n    return this.setState({ recipientCheck: true, ensResolvedAddress: address })\n  }\n\n  updateRecipient(evt) {\n    const val = evt.target.value;\n    const check = allChecks.BTC.recipient(val);\n    this.setState({ \n      recipient: val,\n      ensResolvedAddress: null,\n      recipientCheck: check, \n    });\n  }\n\n  checkValue(val) {\n    // Verify that it is smaller than the balance\n    const balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    if (val === '' || val === null || val === undefined)\n      return null;\n    return (Number(balance) >= Number(val));\n  }\n\n  updateValue(evt) {\n    let val = evt.target.value;\n    let numberVal = Number(val);\n    const isZeroPrefixed = val[0] === '0';\n    const isLessThanOne = isZeroPrefixed && val[1] === '.';\n    // Only update state if the value can be converted to a number!\n    if (val === '0') {\n      // Plain zero is fine\n      ;\n    } else if (!isNaN(numberVal)) {\n      // We want to save the string, as it may contain a period\n      // which is necessary for forming decimal numbers\n      // Because we will be saving the string and not the number,\n      // we should make sure we strip out leading zeros for numbers\n      // larger than zero (i.e. 0.4 is good, 01.4 is not)\n      if (isZeroPrefixed && !isLessThanOne) val = val.slice(1);\n    } else if (val === '.') {\n      // If the user is trying to make a decimal value <1, prefix\n      // with a 0\n      val = '0' + val;\n    } else {\n      return;\n    }\n    this.setState({ \n      value: val,\n      valueCheck: this.checkValue(val) \n    });\n  }\n\n  updateBtcFeeRate(value) {\n    this.setState({ btcFeeRate: value })\n  }\n\n  //========================================================\n  // TRANSACTION-RELATED BUILDERS AND HOOKS\n  //========================================================\n  buildBtcRequest() {\n    const req = buildBtcTxReq(this.state.recipient, \n                              this.state.value,\n                              this.props.session.btcUtxos, \n                              this.props.session.addresses['BTC'],  \n                              this.props.session.addresses['BTC_CHANGE'],\n                              this.state.btcFeeRate,\n                              this.state.value === this.calculateMaxValue());\n    if (req.error) {\n      this.setState({ error: req.error });\n      return null;\n    } else if (!req.data) {\n      this.setState({ error: 'Invalid response when building BTC transaction request. '});\n      return null;\n    }\n    return req;\n  }\n\n  submit() {\n    const req = this.buildBtcRequest();\n    if (req) {\n      notification.open({\n        message: \"Waiting for signature...\",\n        key: 'signNotification',\n        description: `We have sent the transaction to your Lattice for signing.\n                      After approval, the transaction will be broadcast.`,\n        duration: 0,\n      });\n      this.setState({ isLoading: true });\n      this.props.session.sign(req, (err, txHash) => {\n        notification.close('signNotification');\n        if (err) {\n          // Display an error banner\n          this.setState({ \n            error: err, \n            isLoading: false, \n            txHash: null \n          })\n        } else {\n          // Start watching this new tx hash for confirmation\n          this.setState({ \n            recipient: '',\n            recipientCheck: null,\n            value: null,\n            valueCheck: null,\n            txHash, \n            error: null, \n            isLoading: false \n          })\n        }\n      })\n    }\n  }\n\n  //========================================================\n  // HELPERS\n  //========================================================\n\n  getUrl() {\n    return `${constants.BTC_TX_BASE_URL}/${this.state.txHash}`;\n  }\n\n  //========================================================\n  // RENDERERS\n  //========================================================\n\n  renderValueLabelTitle() {\n    return (\n      <p style={{textAlign: 'left'}}>\n        <b>Value</b>\n        <Button type=\"link\"\n                onClick={() => { \n                  this.updateValue({ \n                    target: { \n                      value: this.calculateMaxValue(),\n                    } \n                  }) \n                }}>\n          Max\n        </Button>\n        {this.renderIcon(VALUE_ID)}\n      </p>\n    )\n  }\n\n  renderValueLabel() {\n    const input = (\n      <Input type=\"text\"\n              id={VALUE_ID} \n              value={this.state.value} \n              onChange={this.updateValue.bind(this)}\n      />\n    );\n    return (\n      <Row justify='center'>\n        {this.renderValueLabelTitle()}\n        {input}\n      </Row>\n    );\n  }\n\n  renderRecipientLabel() {\n    return (          \n      <Row justify='center'>  \n        <p style={{textAlign:'left'}}>\n          <b>Recipient</b>\n          &nbsp;&nbsp;&nbsp;{this.renderIcon(RECIPIENT_ID)}\n        </p>\n        <Input type=\"text\" \n                id={RECIPIENT_ID} \n                value={this.state.recipient} \n                onChange={this.updateRecipient.bind(this)}\n        />\n      </Row>\n    )\n  }\n\n  renderIcon(id) {\n    const name = `${id}Check`;\n    const isValid = this.state[name];\n    if (isValid === true) {\n      return (<CheckCircleOutlined style={{color: 'green'}}/>)\n    } else if (isValid === false) {\n      return (<CloseCircleOutlined style={{color: 'red'}}/>)\n    } else {\n      return;\n    }\n  }\n\n  renderBanner() {\n    if (this.state.error) {\n      return (\n        <Alert\n          message=\"Failed to Send Transaction\"\n          description={this.state.error}\n          type=\"error\"\n          closable\n          onClose={() => { this.setState({ error: null })}}\n        />\n      )\n    } else if (this.state.txHash) {\n      const desc = this.context.isMobile ? (\n        <p>Transaction signed and broadcast successfully.&nbsp;\n        <a className='lattice-a' target='_blank' rel='noopener noreferrer' href={this.getUrl()}>View</a></p>\n      ) : (\n        <p>\n          Your transaction was signed and broadcast successfully. \n          Please return to your History tab and refresh to see status.\n        </p>\n      )\n      return (\n        <Alert\n          type=\"success\"\n          message=\"Success\"\n          description={desc}\n        />\n      )\n    } else {\n      return;\n    }\n  }\n\n  renderExtra() {\n    return (\n      <div>\n        <Row justify='center'>\n          <b><p>Fee (sat/byte):</p></b>\n        </Row>\n        <Row justify='center'>        \n          <InputNumber\n            min={1}\n            max={100}\n            onChange={this.updateBtcFeeRate}\n            value={this.state.btcFeeRate}\n          />\n        </Row>\n      </div>\n    )\n  }\n\n  calculateMaxValue() {\n    const balance = this.props.session.getBtcBalance();\n    const utxos = this.props.session.getBtcUtxos();\n    // To spend all BTC, get the size of all UTXOs and calculate the fee required\n    const txBytes = getBtcNumTxBytes(utxos.length);\n    const feeSat = Math.floor(this.state.btcFeeRate * txBytes);\n    // @ts-expect-error\n    return Math.max(((balance - feeSat) / constants.SATS_TO_BTC).toFixed(8), 0);\n  }\n\n  renderSubmitButton() {\n    // If all checks have passed, display the button\n    const isValidReq = (\n      (true === this.state.valueCheck) &&\n      (allChecks.BTC.full(this.state) || this.state.ensResolvedAddress !== null)\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                loading>\n          Waiting...\n        </Button>\n      )\n    } else if (isValidReq) {\n      return (\n        <Button type=\"primary\" \n                onClick={this.submit} \n                style={{ margin: '30px 0 0 0'}}>\n          Send\n        </Button>\n      )\n    } else {\n      return (\n        <Button type=\"primary\"\n                style={{ margin: '30px 0 0 0'}}\n                disabled>\n          Send\n        </Button>\n      )\n    }\n  }\n\n  renderBalance() {\n    let balance = this.props.session.getBtcBalance() / constants.SATS_TO_BTC;\n    return (\n      <Row justify='center' style={{margin: \"0 0 20px 0\"}}>\n        <Statistic title=\"Balance\" value={`${balance} BTC`} />\n      </Row>\n    )\n  }\n\n  renderCard() {\n    const hasAddressesSlot = this.props.session.addresses.BTC;\n    const hasAddresses =  hasAddressesSlot ? \n                          this.props.session.addresses.BTC.length > 0 : \n                          false;\n    if (hasAddresses) {\n      return (\n        <div>\n          {this.renderBalance()}\n          <div>\n            {this.renderRecipientLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderValueLabel()}\n          </div>\n          <div style={{margin: \"20px 0 0 0\"}}>\n            {this.renderExtra()}\n          </div>\n          {this.renderSubmitButton()}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found from your Lattice. If you have your wallet setup, please try logging out and reconnecting.</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        {this.renderBanner()}\n        <Card title={'Send BTC'} bordered={true}>\n          {this.renderCard()}\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />    )\n  }\n}\n\nexport default Send\n","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Button, Card, Row, Input, Empty } from 'antd'\nimport { CopyOutlined } from '@ant-design/icons';\nimport { PageContent } from '../index'\nimport { validateBtcAddr } from '../../util/helpers'\nimport { AppContext } from '../../store/AppContext';\nconst QRCode = require('qrcode.react');\nconst { Search, TextArea } = Input;\nconst SEARCH_ID = \"address-data\";\n\nclass Receive extends React.Component<any, any> {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: null,\n      windowWidth: document.getElementById('main-content-inner')?.offsetWidth,\n    }\n\n    this.updateWidth = this.updateWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateDisplayAddress();\n    if (this.props.session) {\n      this.props.session.getBtcWalletData()\n    }\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  updateWidth() {\n    this.setState({ windowWidth:  document.getElementById('main-content-inner')?.offsetWidth });\n  }\n\n  updateDisplayAddress() {\n    const displayAddr = this.props.session.getBtcDisplayAddress();\n    if (displayAddr) this.setState({ address:  displayAddr });\n  }\n\n  copyAddress() {\n    const copy = document.getElementById(SEARCH_ID);\n    //@ts-expect-error\n    copy.select();\n    document.execCommand(\"copy\")\n  }\n\n\n  renderAddrBox() {\n    if (this.context.isMobile) {\n      return (\n        <div>\n          <TextArea id={SEARCH_ID}\n                    value={this.state.address}\n                    autoSize={{minRows: 1, maxRows: 3}}\n                    style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}/>\n          <Button type=\"primary\"\n                  style={{margin: \"20px 0 0 0\"}}\n                  onClick={this.copyAddress}>\n            Copy <CopyOutlined/>\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n         <Search type=\"text\" \n                  id={SEARCH_ID} \n                  value={this.state.address} \n                  enterButton={<CopyOutlined/>}\n                  onSearch={this.copyAddress}\n                  style={{margin: \"30px 0 0 0\", \"textAlign\": \"center\"}}\n          />\n      );\n    }\n  }\n\n  renderCard() {\n    if (this.state.address) {\n      // Sanity check on BTC address checksum\n      if (!validateBtcAddr(this.state.address))\n        return;\n      const cardW = document.getElementById(\"receive-card\")?.offsetWidth;\n      const w = Math.min(300, 0.8 * cardW);\n      return (\n        <div>\n          <Row justify='center'>\n            <QRCode value={this.state.address} \n                    size={w}\n                    style={{margin: \"30px 0 0 0\"}}\n            />\n          </Row>\n          <Row justify='center'>\n            {this.renderAddrBox()}\n          </Row>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No addresses found</p>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const content = (\n      <center>\n        <Card title={'Receive BTC'} bordered={true} id=\"receive-card\">\n          <center>\n            {this.renderCard()}\n          </center>\n        </Card>\n      </center>      \n    )\n    return (\n      <PageContent content={content} />\n    )\n  }\n}\n\nexport default Receive","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport { Main } from './components'\nimport { AppContextProvider } from \"./store/AppContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Main />\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","\nimport localStorage from \"./localStorage\";\n\nconst bs58check = require('bs58check');\nconst bech32 = require('bech32').bech32;\nconst HARDENED_OFFSET = 0x80000000;\nexport const constants = {\n    DEFAULT_APP_NAME: 'Lattice Manager',\n    ENV: process.env.REACT_APP_ENV || 'prod',\n    BASE_SIGNING_URL: process.env.REACT_APP_BASE_SIGNING_URL || 'https://signing.gridpl.us',\n    BTC_PROD_DATA_API: 'https://blockchain.info',\n    BTC_BROADCAST_ENDPOINT: 'https://blockstream.info/api/tx',\n    HARDENED_OFFSET,\n    ASYNC_SDK_TIMEOUT: 60000,\n    ADDRESSES_PER_PAGE: 10,\n    CONTRACTS_PER_PAGE: 10,\n    SHORT_TIMEOUT: 30000,\n    BTC_COIN: parseInt(process.env.REACT_APP_BTC_COIN) || HARDENED_OFFSET,\n    SATS_TO_BTC: Math.pow(10, 8),\n    BTC_MAIN_GAP_LIMIT: 20,\n    BTC_CHANGE_GAP_LIMIT: 1,\n    BTC_ADDR_BLOCK_LEN: 10,\n    BTC_CHANGE_ADDR_BLOCK_LEN: 1,\n    BTC_DEFAULT_FEE_RATE: process.env.REACT_APP_BTC_DEFAULT_FEE_RATE || 10, // 10 sat/byte\n    BTC_TX_BASE_URL: process.env.REACT_APP_BTC_TX_BASE_URL || 'https://www.blockchain.com/btc/tx',\n    PAGE_SIZE: 20, // 20 transactions per requested page, per `gridplus-cloud-services`\n    CONTRACT_PAGE_SIZE: 6,\n    LOST_PAIRING_ERR: \"NOT_PAIRED\",\n    LOST_PAIRING_MSG: \"Cannot find Lattice connection. Please re-connect.\",\n    BTC_TESTNET: process.env.REACT_APP_BTC_TESTNET || null,\n    KEYRING_LOGOUT_MS: parseInt(process.env.KEYRING_LOGOUT_MS) || 2592000000, // default 30 days\n    KEYRING_DATA_PATH: 'gridplus_web_wallet_keyring_logins', // item in localStorage\n    ABI_PACK_URL: \"https://gridplus.github.io/abi-pack-framework\",\n    LATTICE_CERT_SIGNER: process.env.REACT_APP_LATTICE_CERT_SIGNER || '0477816e8e83bb17c4309cc2e5aa134c573a5943154940095a423149f7cc0384ad52d33f1b4cd89c967bf211c039202df3a7899cb7543de4738c96a81cfde4b117',\n    CONTRACTS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/use-ethereum-smart-contract-abi-function-definitions',\n    TAGS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/address-tags',\n    PERMISSIONS_HELP_LINK: 'https://docs.gridplus.io/gridplus-web-wallet/how-to-set-and-use-spending-limits',\n    BTC_WALLET_STORAGE_KEY: 'btc_wallet',\n    BTC_PURPOSE_NONE: -1,\n    BTC_PURPOSE_NONE_STR: 'Hide BTC Wallet',\n    BTC_PURPOSE_LEGACY: HARDENED_OFFSET + 44,\n    BTC_PURPOSE_LEGACY_STR: 'Legacy (1)',\n    BTC_PURPOSE_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n    BTC_PURPOSE_WRAPPED_SEGWIT_STR: 'Wrapped Segwit (3)',\n    BTC_PURPOSE_SEGWIT: HARDENED_OFFSET + 84,\n    BTC_PURPOSE_SEGWIT_STR: 'Segwit (bc1)',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'bc',\n    BTC_LEGACY_VERSION: 0x00,\n    BTC_WRAPPED_SEGWIT_VERSION: 0x05,\n    RATE_LIMIT: 1000, // 1s between requests\n    GET_ABI_URL: 'https://api.etherscan.io/api?module=contract&action=getabi&address=',\n    DEFAULT_CONTRACT_NETWORK: 'ethereum',\n    CONTRACT_NETWORKS: {\n        ethereum: {\n          label: \"Ethereum\",\n          url: \"https://etherscan.io\",\n          baseUrl: \"https://api.etherscan.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        arbitrum: {\n            label: \"Arbitrum\",\n            url: \"https://arbiscan.io\",\n            baseUrl: \"https://api.arbiscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        polygon: {\n          label: \"Polygon\",\n          url: \"https://polygonscan.com\",\n          baseUrl: \"https://api.polygonscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        optimism: {\n            label: \"Optimism\",\n            url: \"https://optimistic.etherscan.io\",\n            baseUrl: \"https://api-optimistic.etherscan.io\",\n            apiRoute: \"api?module=contract&action=getabi&address=\",\n          },\n        binance: {\n          label: \"Binance\",\n          url: \"https://bscscan.com/\",\n          baseUrl: \"https://api.bscscan.com\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n        avalanche: {\n          label: \"Avalanche\",\n          url: \"https://snowtrace.io\",\n          baseUrl: \"https://api.snowtrace.io\",\n          apiRoute: \"api?module=contract&action=getabi&address=\",\n        },\n      },\n};\n\nconst devConstants = {\n    BTC_DEV_DATA_API: 'https://blockstream.info/testnet/api',\n    BTC_BROADCAST_ENDPOINT : 'https://blockstream.info/testnet/api/tx',\n    BASE_SIGNING_URL: 'https://signing.staging-gridpl.us',\n    // Deprecating because using two different stores was very tricky and we don't\n    // need the second one anyway\n    // ROOT_STORE: 'gridplus-dev', \n    BTC_COIN: HARDENED_OFFSET + 1,\n    BTC_DEFAULT_FEE_RATE: 10,\n    BTC_TX_BASE_URL: 'https://www.blockchain.com/btc-testnet/tx',\n    BTC_TESTNET: 'Testnet3',\n    LATTICE_CERT_SIGNER: '045cfdf77a00b4b6b4a5b8bb26b5497dbc7a4d01cbefd7aaeaf5f6f8f8865976e7941ab0ec1651209c444009fd48d925a17de5040ba47eaf3f5b51720dd40b2f9d',\n    BTC_SEGWIT_NATIVE_V0_PREFIX: 'tb',\n    BTC_LEGACY_VERSION: 0x6F,\n    BTC_WRAPPED_SEGWIT_VERSION: 0xC4,\n}\n\n// NEW: If you have checked the \"Using Dev Lattice\" box in settings, the constants\n// are swapped out here\nconst localSettings = localStorage.getSettings();\nif (localSettings.devLattice) {\n    Object.keys(devConstants).forEach((key) => {\n        constants[key] = devConstants[key];\n    })\n}\n\n\n//--------------------------------------------\n// CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\nfunction fetchJSON(url, opts, cb) {\n    fetch(url, opts)\n    .then((response) => response.json())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n\n//====== UTXOS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcUtxos(addresses, cb, utxos=[], offset=0) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, utxos);\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_UTOXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    let url = `${constants.BTC_PROD_DATA_API}/unspent?active=`;\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    url = `${url}&limit=${MAX_UTOXS_RET}&confirmations=1`;\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add confirmed UTXOs\n        data.unspent_outputs.forEach((u) => {\n            if (u.confirmations > 0) {\n                utxos.push({\n                    id: u.tx_hash_big_endian,\n                    vout: u.tx_output_n,\n                    value: u.value,\n                    address: _blockchainDotComScriptToAddr(u.script),\n                })\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (data.unspent_outputs.length >= MAX_UTOXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcUtxos(addresses, cb, utxos, offset+MAX_UTOXS_RET);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcUtxos(addresses, cb, utxos, 0);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcUtxosTestnet(addresses, cb, utxos=[]) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    const url = `${constants.BTC_DEV_DATA_API}/address/${address}/utxo`;\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        data.forEach((u) => {\n            // Add confirmed UTXOs\n            if (u.status.confirmed) {\n                utxos.push({\n                    id: u.txid,\n                    vout: u.vout,\n                    value: u.value,\n                    address,\n                })\n            }\n        })\n        if (addresses.length === 0) {\n            return cb(null, utxos);\n        }\n        setTimeout(() => {\n            _fetchBtcUtxosTestnet(addresses, cb, utxos)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcUtxos(addresses, cb) {\n    if (!addresses)\n        return cb('Cannot fetch UTXOs - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcUtxosTestnet : _fetchBtcUtxos;\n    f(addrsCopy, cb);\n}\n//====== END UTXOS ==================\n\n//====== TXS ==================\n// For mainnet (production env) we can bulk request data from the blockchain.com API\nfunction _fetchBtcTxs(addresses, txs, cb, offset=0, isFirstCall=true) {\n    if (addresses.length === 0) {\n        // No more addresses left to check. We are done.\n        return cb(null, txs);\n    }\n\n    let url = `${constants.BTC_PROD_DATA_API}/multiaddr?active=`;\n    const isSingleAddr = isFirstCall && addresses.length === 1;\n    if (isSingleAddr) {\n        // Edge case when getting transactions from the blockchain.com API with\n        // only one address -- it appears when you call multiaddr with only one\n        // address you get only the output(s) associated with that one address,\n        // but if you call with multiple addresses that is no longer a problem.\n        // See: https://www.blockchain.com/btc/tx/ffc83686c911bcf7aa31a3d3ca014bae3b1044b2ec280c877758aa6b384cde0b\n        // 1. https://blockchain.info/rawaddr/3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        // 2. https://blockchain.info/multiaddr?active=3C8BhX4CGeyH3nXrYqRL89jvpakTPW1z8k|3BrvBeRy8qMijfZHzo8VJ77gdL1W9EvgHj\n        url = `${constants.BTC_PROD_DATA_API}/rawaddr/`\n    }\n    const ADDRS_PER_CALL = 20;\n    const MAX_TXS_RET = 50;\n    const addrsToCheck = addresses.slice(0, ADDRS_PER_CALL);\n    for (let i = 0; i < addrsToCheck.length; i++) {\n        if (i === 0) {\n            url = `${url}${addrsToCheck[i]}`\n        } else {\n            url = `${url}|${addrsToCheck[i]}`\n        }\n    }\n    if (isSingleAddr) {\n        url = `${url}?limit=${MAX_TXS_RET}`;\n    } else {\n        url = `${url}&n=${MAX_TXS_RET}`;\n    }\n    if (offset > 0) {\n        // If this is a follow up, fetch txs after an offset\n        url = `${url}&offset=${offset}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err);\n        // Add the new txs\n        let txsAdded = 0;\n        data.txs.forEach((t) => {\n            const ftx = {\n                timestamp: t.time * 1000,\n                confirmed: !!t.block_index,\n                id: t.hash,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],\n            };\n            t.inputs.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prev_out.addr,\n                    value: input.prev_out.value,\n                })\n            })\n            t.out.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.addr,\n                    value: output.value,\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n\n            // Only add the transaction if its hash is not already in the array.\n            // NOTE: There may be an edge case. I noticed in one case we got\n            // a result saying `vout_sz=2` but which only had one output in its array...\n            let shouldInclude = txs.every(_tx => _tx.id !== ftx.id);\n            if (shouldInclude) {\n                txs.push(ftx);\n                txsAdded += 1;\n            }\n        })\n        // Determine if we need to recurse on this set of addresses\n        if (txsAdded >= MAX_TXS_RET) {\n            return setTimeout(() => {\n                _fetchBtcTxs(addresses, txs, cb, offset+MAX_TXS_RET, false);\n            }, constants.RATE_LIMIT);\n        }\n        // Otherwise we are done with these addresses. Clip them and recurse.\n        addresses = addresses.slice(ADDRS_PER_CALL);\n        setTimeout(() => {\n            _fetchBtcTxs(addresses, txs, cb, 0, false);\n        }, constants.RATE_LIMIT);\n    })\n}\n\n// For testnet we cannot use blockchain.com - we have to request stuff from each\n// address individually.\nfunction _fetchBtcTxsTestnet(addresses, txs, cb, lastSeenId=null) {\n    const address = addresses.pop()\n    //@ts-expect-error\n    let url = `${constants.BTC_DEV_DATA_API}/address/${address}/txs`;\n    if (lastSeenId) {\n        url = `${url}/chain/${lastSeenId}`\n    }\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        const formattedTxs: any[] = [];\n        let confirmedCount = 0;\n        data.forEach((t) => {\n            const ftx = {\n                timestamp: t.status.block_time * 1000,\n                confirmed: t.status.confirmed,\n                id: t.txid,\n                fee: t.fee,\n                inputs: [],\n                outputs: [],                \n            }\n            t.vin.forEach((input) => {\n                ftx.inputs.push({\n                    addr: input.prevout.scriptpubkey_address,\n                    value: input.prevout.value\n                })\n            })\n            t.vout.forEach((output) => {\n                ftx.outputs.push({\n                    addr: output.scriptpubkey_address,\n                    value: output.value\n                })\n            })\n            if (!ftx.confirmed) {\n                ftx.timestamp = -1;\n            }\n            formattedTxs.push(ftx)\n            if (ftx.confirmed) {\n                confirmedCount += 1;\n            }\n\n        })\n        txs = txs.concat(formattedTxs)\n        if (confirmedCount >= 25) {\n            // Blockstream only returns up to 25 confirmed transactions per request\n            // https://github.com/Blockstream/esplora/blob/master/API.md#get-addressaddresstxs\n            // We need to re-request with the last tx\n            addresses.push(address)\n            return _fetchBtcTxsTestnet(addresses, txs, cb, txs[confirmedCount-1].id)\n        }\n        if (addresses.length === 0) {\n            return cb(null, txs);\n        }\n        setTimeout(() => {\n            _fetchBtcTxsTestnet(addresses, txs, cb)\n        }, constants.RATE_LIMIT)\n    })\n}\n\nexport function fetchBtcTxs(addresses, txs, cb) {\n    if (!addresses)\n        return cb('Cannot fetch transactions - bad input');\n    else if (addresses.length < 1)\n        return cb(null, []);\n    const addrsCopy = JSON.parse(JSON.stringify(addresses));\n    //@ts-expect-error\n    const f = constants.BTC_DEV_DATA_API ? _fetchBtcTxsTestnet : _fetchBtcTxs;\n    f(addrsCopy, txs, cb);\n}\n//====== END TXS ==================\n\nexport function fetchBtcPrice(cb) {\n    const url = 'https://api.blockchain.com/v3/exchange/tickers/BTC-USD'\n    fetchJSON(url, null, (err, data) => {\n        if (err)\n            return cb(err)\n        else if (!data || !data.last_trade_price)\n            return cb('Invalid price data returned');\n        return cb(null, data.last_trade_price)\n    })\n}\n\nexport function broadcastBtcTx(rawTx, cb) {\n    const opts = {\n        method: 'POST',\n        body: rawTx\n    };\n    fetch(constants.BTC_BROADCAST_ENDPOINT, opts)\n    .then((response) => response.text())\n    .then((resp) => cb(null, resp))\n    .catch((err) => cb(err))\n}\n//--------------------------------------------\n// END CHAIN DATA SYNCING HELPERS\n//--------------------------------------------\n\n//--------------------------------------------\n// OTHER HELPERS\n//--------------------------------------------\nexport function harden(x) {\n  return x + HARDENED_OFFSET;\n}\n\n// Determine how many inputs (utxos) need to be included in a transaction\n// given the desired value and fee rate\n// Returns the number of inputs to include or -1 if there isn't enough\n// value in the inputs provided to cover value + fee\nfunction _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx=0, currentValue=0) {\n    if (inputIdx >= utxos.length) {\n        return -1; // indicates error\n    }\n    currentValue += utxos[inputIdx].value;\n    const numInputs = inputIdx + 1;\n    const numBytes = getBtcNumTxBytes(numInputs);\n    const fee = Math.floor(feeRate * numBytes);\n    if (currentValue >= (value + fee)) {\n        return numInputs;\n    }\n    inputIdx = numInputs;\n    return _calcBtcTxNumInputs(utxos, value, feeRate, inputIdx, currentValue);\n}\n\n// Convert a script from blockchain.com's API into an address\n// For some reason, they only return the script in the UTXO object.\n// We need to convert the script to a an address.\n// Since we know the purpose, we know the format of the address,\n// so we can slice out the pubkeyhash from the script and convert.\nfunction _blockchainDotComScriptToAddr(_scriptStr) {\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        const bech32Prefix = constants.BTC_SEGWIT_NATIVE_V0_PREFIX;\n        const bech32Version = 0; // Only v0 currently supported\n        // Script: |OP_0|0x20|pubkeyhash|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(-20)\n        const words = bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32.encode(bech32Prefix, words);\n    } else if (purpose === constants.BTC_PURPOSE_WRAPPED_SEGWIT) {\n        const version = constants.BTC_WRAPPED_SEGWIT_VERSION;\n        // Script: |OP_HASH160|0x20|pubkeyhash|OP_EQUAL|\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(2, 22);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    } else if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        // Script: |OP_DUP|OP_HASH160|0x20|pubkeyhash|OP_EQUALVERIFY|OP_CHECKSIG|\n        const version = constants.BTC_LEGACY_VERSION;\n        const pubkeyhash = Buffer.from(_scriptStr, 'hex').slice(3, 23);\n        return bs58check.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    }\n}\n\nexport function getBtcPurpose() {\n    const localSettings = localStorage.getSettings();\n    return  localSettings.btcPurpose ? \n            localSettings.btcPurpose : \n            constants.BTC_PURPOSE_NONE;\n}\n\n// Calculate how many bytes will be in a transaction given purpose and input count\n// Calculations come from: https://github.com/jlopp/bitcoin-transaction-size-calculator/blob/master/index.html\n// Not a perfect calculation but pretty close\nexport function getBtcNumTxBytes(numInputs) {\n    let inputSize, outputSize, inputWitnessSize\n    const purpose = getBtcPurpose();\n    if (purpose === constants.BTC_PURPOSE_LEGACY) {\n        inputSize = 148;\n        outputSize = 32;\n        inputWitnessSize = 0;\n    } else if (purpose === constants.BTC_PURPOSE_SEGWIT) {\n        inputSize = 91;\n        outputSize = 32;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    } else {\n        inputSize = 67.75;\n        outputSize = 31;\n        inputWitnessSize = 107; // size(signature) + signature + size(pubkey) + pubkey\n    }\n    const vFactor = purpose === constants.BTC_PURPOSE_LEGACY ? 0 : 0.75;\n    // Hardcode 2 outputs to avoid complexity in app state\n    const txVBytes =  10 + vFactor + inputSize * numInputs + outputSize * 2;\n  return (3 * vFactor) + txVBytes + inputWitnessSize * numInputs;\n}\n\nexport function buildBtcTxReq (   recipient, \n                                    btcValue, \n                                    utxos, \n                                    addrs, \n                                    changeAddrs, \n                                    feeRate=constants.BTC_DEFAULT_FEE_RATE,\n                                    isFullSpend=false) {\n    if (!addrs || !changeAddrs || addrs.length < 1 || changeAddrs.length < 1) {\n        return { error: 'No addresses (or change addresses). Please wait to sync.' };\n    }\n    // Convert value to satoshis\n    const satValue = Math.round(Number(btcValue) * constants.SATS_TO_BTC);\n    const numInputs = isFullSpend ? utxos.length : _calcBtcTxNumInputs(utxos, satValue, feeRate);\n    if (numInputs < 0) {\n        return { error: 'Balance too low.' }\n    } else if (numInputs > utxos.length) {\n        return { error: 'Failed to build transaction.' }\n    }\n    const bytesUsed = getBtcNumTxBytes(numInputs);\n    //@ts-expect-error\n    const fee = Math.floor(bytesUsed * feeRate);\n    // Build the request inputs\n    const BASE_SIGNER_PATH = [getBtcPurpose(), constants.BTC_COIN, constants.HARDENED_OFFSET];\n    const prevOuts: any[] = [];\n    for (let i = 0; i < numInputs; i++) {\n        const utxo = utxos[i];\n        let signerPath = null;\n        if (addrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([0, addrs.indexOf(utxo.address)]);\n        } else if (changeAddrs.indexOf(utxo.address) > -1) {\n            signerPath = BASE_SIGNER_PATH.concat([1, changeAddrs.indexOf(utxo.address)]);\n        } else {\n            return { error: 'Failed to find holder of UTXO. Syncing issue likely.' };\n        }\n        const prevOut = {\n            txHash: utxo.id,\n            value: utxo.value,\n            index: utxo.vout,\n            signerPath,\n        }\n        prevOuts.push(prevOut);\n    }\n    // Return the request (i.e. the whole object)\n    const req = {\n        prevOuts,\n        recipient,\n        value: satValue,\n        fee,\n        // Send change to the latest change address\n        changePath: BASE_SIGNER_PATH.concat([1, changeAddrs.length -1]),\n    };\n    return { currency: 'BTC', data: req }\n}\n\nexport function validateBtcAddr(addr) {\n    if (addr === '') return null;\n    try {\n        bs58check.decode(addr);\n        return true;\n    } catch (e) {\n        try {\n            bech32.decode(addr);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\nexport function toHexStr(bn) {\n    const s = bn.toString(16);\n    const base = s.length % 2 === 0 ? s : `0${s}`;\n    return `0x${base}`; \n}\n\n// Filter out any duplicate objects based on `keys`\nexport function filterUniqueObjects(objs, keys) {\n    const filtered: any[] = [];\n    // Copy the objects in reversed order so that newer instances\n    // are applied first\n    const objsCopy = JSON.parse(JSON.stringify(objs)).reverse()\n    objsCopy.forEach((obj) => {\n        let isDup = false;\n        filtered.forEach((fobj) => {\n            let matchedKeys = 0\n            keys.forEach((key) => {\n                if (fobj[key] === obj[key]) {\n                    matchedKeys += 1;\n                }\n            })\n            if (matchedKeys >= keys.length) {\n                isDup = true;\n            }\n        })\n        if (!isDup) {\n            filtered.push(obj);\n        }\n    })\n    // Return in the original order\n    return filtered.reverse();\n}\n//--------------------------------------------\n// END OTHER HELPERS\n//--------------------------------------------"],"sourceRoot":""}